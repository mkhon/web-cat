/*==========================================================================*\
 |  _JobBase.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to JobBase.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2009 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.jobqueue;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * JobBase.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _JobBase
    extends er.extensions.eof.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _JobBase object.
     */
    public _JobBase()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String ENQUEUE_TIME_KEY = "enqueueTime";
    public static final String IS_CANCELLED_KEY = "isCancelled";
    public static final String IS_READY_KEY = "isReady";
    public static final String PRIORITY_KEY = "priority";
    public static final String PROGRESS_KEY = "progress";
    public static final String PROGRESS_MESSAGE_KEY = "progressMessage";
    public static final String SCHEDULED_TIME_KEY = "scheduledTime";
    // To-one relationships ---
    public static final String USER_KEY = "user";
    public static final String WORKER_KEY = "worker";
    // To-many relationships ---
    // Fetch specifications ---
    public static final String NEXT_JOB_FSPEC = "nextJob";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public JobBase localInstance(EOEditingContext editingContext)
    {
        return (JobBase)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>enqueueTime</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp enqueueTime()
    {
        return (NSTimestamp)storedValueForKey( "enqueueTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>enqueueTime</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setEnqueueTime( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setEnqueueTime("
                + value + "): was " + enqueueTime() );
        }
        takeStoredValueForKey( value, "enqueueTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isCancelled</code> value.
     * @return the value of the attribute
     */
    public boolean isCancelled()
    {
        Integer result =
            (Integer)storedValueForKey( "isCancelled" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isCancelled</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsCancelled( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsCancelled("
                + value + "): was " + isCancelled() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsCancelledRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isCancelled</code> value.
     * @return the value of the attribute
     */
    public Integer isCancelledRaw()
    {
        return (Integer)storedValueForKey( "isCancelled" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isCancelled</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsCancelledRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsCancelledRaw("
                + value + "): was " + isCancelledRaw() );
        }
        takeStoredValueForKey( value, "isCancelled" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isReady</code> value.
     * @return the value of the attribute
     */
    public boolean isReady()
    {
        Integer result =
            (Integer)storedValueForKey( "isReady" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isReady</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsReady( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsReady("
                + value + "): was " + isReady() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsReadyRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isReady</code> value.
     * @return the value of the attribute
     */
    public Integer isReadyRaw()
    {
        return (Integer)storedValueForKey( "isReady" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isReady</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsReadyRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsReadyRaw("
                + value + "): was " + isReadyRaw() );
        }
        takeStoredValueForKey( value, "isReady" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>priority</code> value.
     * @return the value of the attribute
     */
    public int priority()
    {
        Integer result =
            (Integer)storedValueForKey( "priority" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>priority</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPriority( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPriority("
                + value + "): was " + priority() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setPriorityRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>priority</code> value.
     * @return the value of the attribute
     */
    public Integer priorityRaw()
    {
        return (Integer)storedValueForKey( "priority" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>priority</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPriorityRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPriorityRaw("
                + value + "): was " + priorityRaw() );
        }
        takeStoredValueForKey( value, "priority" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>progress</code> value.
     * @return the value of the attribute
     */
    public Double progress()
    {
        return (Double)storedValueForKey( "progress" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>progress</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setProgress( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setProgress("
                + value + "): was " + progress() );
        }
        takeStoredValueForKey( value, "progress" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>progressMessage</code> value.
     * @return the value of the attribute
     */
    public String progressMessage()
    {
        return (String)storedValueForKey( "progressMessage" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>progressMessage</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setProgressMessage( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setProgressMessage("
                + value + "): was " + progressMessage() );
        }
        takeStoredValueForKey( value, "progressMessage" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>scheduledTime</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp scheduledTime()
    {
        return (NSTimestamp)storedValueForKey( "scheduledTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>scheduledTime</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setScheduledTime( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setScheduledTime("
                + value + "): was " + scheduledTime() );
        }
        takeStoredValueForKey( value, "scheduledTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>user</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User user()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>user</code>
     * relationship (DO NOT USE--instead, use
     * <code>setUserRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setUser( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUser("
                + value + "): was " + user() );
        }
        takeStoredValueForKey( value, "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>user</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setUserRelationship(
        net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUserRelationship("
                + value + "): was " + user() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.User object = user();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "user" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "user" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>worker</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.jobqueue.WorkerDescriptor worker()
    {
        return (net.sf.webcat.jobqueue.WorkerDescriptor)storedValueForKey( "worker" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>worker</code>
     * relationship (DO NOT USE--instead, use
     * <code>setWorkerRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setWorker( net.sf.webcat.jobqueue.WorkerDescriptor value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setWorker("
                + value + "): was " + worker() );
        }
        takeStoredValueForKey( value, "worker" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>worker</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setWorkerRelationship(
        net.sf.webcat.jobqueue.WorkerDescriptor value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setWorkerRelationship("
                + value + "): was " + worker() );
        }
        if ( value == null )
        {
            net.sf.webcat.jobqueue.WorkerDescriptor object = worker();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "worker" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "worker" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Produce a string representation of this object.  This implementation
     * calls UserPresentableDescription(), which uses WebObjects' internal
     * mechanism to print out the visible fields of this object.  Normally,
     * subclasses would override userPresentableDescription() to change
     * the way the object is printed.
     *
     * @return A string representation of the object's value
     */
    public String toString()
    {
        return userPresentableDescription();
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( JobBase.class );
}
