AddStep: WCButton {
    action              = addStep;
    label               = "Add";
    remote.refreshPanes = "gradingSteps";
}

GradingPluginsToAdd: WCFilteringSelect {
    list          = gradingPluginsToAdd;
    item          = gradingPluginToAdd;
    selection     = selectedGradingPluginToAdd;
    displayString = displayStringForGradingPluginToAdd;
    noSelectionString = "(no selection)";
}

CanDelete: WOConditional {
    condition = "~!thisOffering.isNewObject && !thisOffering.hasStudentSubmissions";
}

CancelSubs: WCButton {
    action = cancelSuspendedSubs;
    label  = "Cancel Them";
}

ClearGraph: WCButton {
    action = clearGraph;
    label  = "Refresh Cached Graph Data";
    remote.refreshPanes = "scoreHistogram";
}

CourseOfferingSection: WCPageModule {
    title = "~ \"Properties for \" + thisOffering.courseOffering.deptNumberAndName";
}

Description: WOTextField {
    size = 40;
    value = assignment.shortDescription;
}

DescriptionInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Title";
    message = "Place the title of your assignment here, like &quot;Word Ladder Finder&quot;.  This value is used as a supplementary description when there is space to display more than just the name.";
}

DueDate2: WCDateTimePicker {
     value      = thisOffering.dueDate;
     dateformat = user.dateFormat;
     timeformat = user.timeFormat;
     dateWidth  = "8em";
     timeWidth  = "6em";
     timeZone   = timeZone;
}

EditStep: WOImageButton {
    filename  = "icons/edit.gif";
    framework = "Core";
    action    = editStep;
    width     = "18";
    height    = "17";
    alt       = "Set/edit parameters for this step";
    title     = "Set/edit parameters for this step";
    class     = "icon";
}

EditSubmissionProfile: WOImageButton {
    filename  = "icons/edit.gif";
    framework = "Core";
    action    = editSubmissionProfile;
    width     = "18";
    height    = "17";
    alt       = "Edit selected submission rules";
    title     = "Edit selected submission rules";
    class     = "icon";
}

Graph: net.sf.webcat.grader.graphs.MiniBarGraph {
    graphSummary = thisOffering.graphSummary;
}

HasSuspendedSubs: WOConditional {
    condition = hasSuspendedSubs;
}

LastTR: net.sf.webcat.core.TableRow {
    index = index;
}

MoodleId: WOTextField {
    size = 8;
    numberformat = "0";
    value = assignment.moodleId;
}

MoodleIdInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Moodle Id";
    message = "If you are using our Moodle for your course web site and it has extensions to support uploading CSV gradebook information, place your Moodle course\'s ID in this slot.  Otherwise, leave it blank.";
}

OverrideMoodleId: WOTextField {
    size = 8;
    numberformat = "0";
    value = thisOffering.moodleId;
}


MoveStepDown: WCLink {
    action = moveStepDown;
    remote.refreshPanes = "gradingSteps";
}

MoveStepDownImage: WOImage {
    filename  = "icons/arrowDown.gif";
    framework = "Core";
    width     = "15";
    height    = "13";
    alt       = "Move this step down";
    title     = "Move this step down";
    class     = "icon";
}

MoveStepUp: WCLink {
    action = moveStepUp;
    remote.refreshPanes = "gradingSteps";
}

MoveStepUpImage: WOImage {
    filename  = "icons/arrowUp.gif";
    framework = "Core";
    width     = "15";
    height    = "13";
    alt       = "Move this step up";
    title     = "Move this step up";
    class     = "icon";
}

Name: WOTextField {
    value = assignment.name;
    size  = 40;
}

NameInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Name";
    message = "Use a short 1-3 word assignment name, like &quot;Program 1&quot; or &quot;Lab 04&quot;.  The name cannot be blank.  This name is used to construct human-readable directory names for the assignment, and is also used as a shorthand for referring to the assignment in student feedback.";
}

Navigator: net.sf.webcat.grader.GraderNavigator {
}

NewSubmissionProfile: WCButton {
    action = newSubmissionProfile;
    label  = "New";
}

NumSuspended: WOString {
    value = numSuspendedSubs;
}

Order: WOString {
    value = thisStep.order;
}

Page: net.sf.webcat.core.WCPageWithNavigation {
    title = "Edit Assignment Properties";
//    stylesheet           = "Grader.framework/WebServerResources/jscalendar/skins/aqua/theme.css";
//    externalJavascript   = "Grader.framework/WebServerResources/jscalendar/calendar.js,Grader.framework/WebServerResources/jscalendar/lang/calendar-en.js,Grader.framework/WebServerResources/jscalendar/calendar-setup.js";
}

PublishIt: WOCheckBox {
    checked = thisOffering.publish;
}

PublishItInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Publish It";
    message = "Determines whether or not the assignment is visible and available to students. When this box is unchecked, only course staff can access the assignment.";
}

ReleaseSubs: WCButton {
    action = releaseSuspendedSubs;
    label  = "Re-grade Them";
}

RemoveStep: WCLink {
    action              = removeStep;
    remote.refreshPanes = "gradingSteps";
}

RemoveStepImage: WOImage {
    filename  = "icons/trash.gif";
    framework = "Core";
    width     = "14";
    height    = "17";
    alt       = "Delete this step";
    title     = "Delete this step";
    class     = "icon";
}

ScriptName: WOString {
    value = thisStep.script.displayableName;
}

StepAllowsTimeout: WOConditional {
    condition = stepAllowsTimeout;
}

StepRepetition: WORepetition {
    item  = thisStep;
    list  = scriptDisplayGroup.displayedObjects;
    index = index;
}

SubmissionProfileInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Submission Rules";
    message = "The <b>submission rules</b> define the policy that governs acceptance of student submissions, including the points available, limits on the number or size of submissions, the applicable late policy, and any penalties for late submissions, etc.  Click the edit icon to edit the selected rules, or click the New button to create a new rule set.";
}

SubmissionProfileList: WOPopUpButton {
    list          = submissionProfileDisplayGroup.displayedObjects;
    item          = submissionProfile;
    displayString = submissionProfile.name;
    selection     = assignment.submissionProfile;
}

//SubmissionProfileName: WOString {
//	value = thisAssignment.assignment.submissionProfile.name;
//}

Suspend: WOCheckBox {
    checked = isSuspended;
}

SuspendInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Suspend Grading";
    message = "Disables processing of any further submissions for an assignment. Any submissions made will be accepted and queued up, but will not be processed. If this box is already checked, when you uncheck it and then click &quot;Apply All&quot; or &quot;Finish&quot;, all submissions that have been queued up will be processed.";
}

Timeout: WOTextField {
    numberformat = "0";
    size = 4;
    value = stepTimeout;
}

TR: net.sf.webcat.core.TableRow {
    index = index;
}

TR2: net.sf.webcat.core.TableRow {
    index = index;
    showCaution = upcomingOfferingIsLate;
    showError   = upcomingOffering.gradingSuspended;
}

UploadInstructions: WOText {
    rows     = 8;
    cols     = 60;
     value    = assignment.fileUploadMessage;
//    dojoType = "dijit.form.Textarea";
}

UploadInstructionsInfo: net.sf.webcat.core.PopUpInfo {
    title   = "Upload Instructions";
    message = "Optionally, enter any assignment-specific instructions that you want students to see when they upload submissions through Web-CAT\'s web interface. Any content you insert here will be included in the HTML page where users select files to upload and submit. You can use full HTML markup in your instructions, which will be inserted unfiltered in the page students see. Note that these instructions will only be available to students who submit using their web browser--they will not be seen by students who submit from an IDE, such as BlueJ or Eclipse.";
}

UpcomingAssignmentName: WOHyperlink {
    string = upcomingOffering.titleString;
    href   = upcomingOffering.assignment.url;
}

UpcomingAssignmentRepetition: WORepetition {
    item  = upcomingOffering;
    list  = upcomingOfferings;
    index = index;
}

UpcomingDueDate: WOString {
    formatter = session.timeFormatter;
    value     = upcomingOffering.dueDate;
}

UpcomingIsUnpublished: WOConditional {
    condition = upcomingOffering.publish;
    negate = true;
}

URL: WOTextField {
    size = 40;
    value = assignment.url;
}

URLInfo: net.sf.webcat.core.PopUpInfo {
    title   = "URL";
    message = "Place a URL to use for the assignment writeup.  If this optional value is set, the assignment name will be shown to students as an active hyperlink that targets this URL.";
}
