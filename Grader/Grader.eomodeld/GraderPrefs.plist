{
    attributes = (
        {
            columnName = CASSIGNMENTID; 
            name = assignmentOfferingId; 
            prototypeName = foreignId; 
        }, 
        {
            columnName = CCOMMENTHISTORY; 
            name = commentHistory; 
            prototypeName = mediumText; 
        }, 
        {name = id; prototypeName = id; }, 
        {columnName = CSTEPID; name = stepId; prototypeName = foreignId; }, 
        {
            columnName = CSUBMISSIONFILESTATSID; 
            name = submissionFileStatsId; 
            prototypeName = foreignId; 
        }, 
        {columnName = CSUBMISSIONID; name = submissionId; prototypeName = foreignId; }, 
        {columnName = CUSERID; name = userId; prototypeName = foreignId; }
    ); 
    attributesUsedForLocking = (
        assignmentOfferingId, 
        commentHistory, 
        stepId, 
        submissionFileStatsId, 
        submissionId, 
        userId
    ); 
    className = "net.sf.webcat.grader.GraderPrefs"; 
    classProperties = (
        assignmentOffering, 
        commentHistory, 
        step, 
        submission, 
        submissionFileStats, 
        user
    ); 
    externalName = TGRADERPREFS; 
    name = GraderPrefs; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = AssignmentOffering; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = assignmentOfferingId; }); 
            name = assignmentOffering; 
        }, 
        {
            destination = Step; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = stepId; }); 
            name = step; 
        }, 
        {
            destination = Submission; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = submissionId; }); 
            name = submission; 
        }, 
        {
            destination = SubmissionFileStats; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = submissionFileStatsId; }); 
            name = submissionFileStats; 
        }, 
        {
            destination = User; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = userId; }); 
            name = user; 
        }
    ); 
}
