
{
    attributes =
    (

       {
           columnName = CASSIGNMENTID;
           name = assignmentOfferingId;
           prototypeName = foreignId;
       },

       {
           columnName = CFILENAME;
           name = fileName;
           prototypeName = tinyText;
       },

       {
           name = id;
           prototypeName = id;
       },

       {
           columnName = CPARTNERLINK;
           externalType = BIT;
           name = partnerLink;
           prototypeName = boolean;
           userInfo =
           {
               isScalar = true;
               scalarDefault = false;
               type = boolean;
           };
       },

       {
           columnName = CRESULTID;
           name = resultId;
           prototypeName = foreignId;
       },

       {
           columnName = CSUBMITNUMBER;
           name = submitNumber;
           prototypeName = integer;
           userInfo =
           {
               isScalar = true;
               scalarConversionMethodName = intValue;
               scalarDefault = 0;
               type = int;
               valueClassName = Integer;
           };
       },

       {
           columnName = CSUBMITTIME;
           name = submitTime;
           prototypeName = dateTime;
       },

       {
           columnName = CUSERID;
           name = userId;
           prototypeName = foreignId;
       }
    );
    attributesUsedForLocking =
    (
       assignmentOfferingId,
       fileName,
       partnerLink,
       resultId,
       submitNumber,
       userId
    );
    className = net.sf.webcat.grader.Submission;
    classProperties =
    (
       assignmentOffering,
       enqueuedJobs,
       fileName,
       graderPrefs,
       partnerLink,
       result,
       submitNumber,
       submitTime,
       user
    );
    externalName = TSUBMISSION;
    internalInfo =
    {};
    name = Submission;
    primaryKeyAttributes =
    (
       id
    );
    relationships =
    (

       {
           destination = AssignmentOffering;
           isToMany = N;
           joinSemantic = EOInnerJoin;
           joins =
           (

              {
                  destinationAttribute = id;
                  sourceAttribute = assignmentOfferingId;
              }
           );
           name = assignmentOffering;
       },

       {
           deleteRule = EODeleteRuleCascade;
           destination = EnqueuedJob;
           isToMany = Y;
           joinSemantic = EOInnerJoin;
           joins =
           (

              {
                  destinationAttribute = submissionId;
                  sourceAttribute = id;
              }
           );
           name = enqueuedJobs;
       },

       {
           destination = GraderPrefs;
           isToMany = Y;
           joinSemantic = EOInnerJoin;
           joins =
           (

              {
                  destinationAttribute = submissionId;
                  sourceAttribute = id;
              }
           );
           name = graderPrefs;
       },

       {
           deleteRule = EODeleteRuleCascade;
           destination = SubmissionResult;
           isToMany = N;
           joinSemantic = EOInnerJoin;
           joins =
           (

              {
                  destinationAttribute = id;
                  sourceAttribute = resultId;
              }
           );
           name = result;
       },

       {
           destination = User;
           isToMany = N;
           joinSemantic = EOInnerJoin;
           joins =
           (

              {
                  destinationAttribute = id;
                  sourceAttribute = userId;
              }
           );
           name = user;
       }
    );
}