{
    attributes = (
        {
            columnName = CASSIGNMENTID; 
            name = assignmentId; 
            prototypeName = foreignId; 
        },
        {
            columnName = CCONFIGSETTINGS; 
            name = configSettings; 
            prototypeName = mutableDictionary; 
            userInfo = {
                adaptorValueConversionMethodName = archiveData; 
                valueFactoryMethodName = objectWithArchiveData; 
                isMutable = true; 
                valueClassName = net.sf.webcat.core.MutableDictionary; 
            }; 
        },
        {
            name = updateMutableFields; 
            prototypeName = updateMutableFields; 
            userInfo = {
                isScalar = true;
                scalarDefault = false;
                type = boolean; 
            }; 
        }, 
        { name = id; prototypeName = id; }, 
        {
            columnName = CORDER; 
            name = order; 
            prototypeName = integer; 
            userInfo = {
                scalarConversionMethodName = intValue; 
                isScalar = true;
                scalarDefault = 0;
                type = int;
                valueClassName = Integer;
            }; 
        }, 
        {
            columnName = CSCRIPTID; 
            name = scriptId; 
            prototypeName = foreignId; 
        }, 
        {
            columnName = CSTEPCONFIGID; 
            name = stepConfigId; 
            prototypeName = foreignId; 
        }, 
        {
            columnName = CTIMEOUT; 
            name = timeout; 
            prototypeName = integer; 
            userInfo = {
                scalarConversionMethodName = intValue; 
                isScalar = true;
                scalarDefault = 0;
                type = int;
                valueClassName = Integer;
            }; 
        }
    ); 
    attributesUsedForLocking = (
        scriptId,
        assignmentId,
        order,
        timeout,
        updateMutableFields
    ); 
    className = net.sf.webcat.grader.Step; 
    classProperties = (
        assignment,
        config,
        configSettings,
        order,
        script,
        timeout,
        updateMutableFields
    ); 
    externalName = TSTEP; 
    fetchSpecificationDictionary = {}; 
    name = Step; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = Assignment; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = assignmentId; }); 
            name = assignment; 
        }, 
        {
            destination = StepConfig; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = stepConfigId; }); 
            name = config; 
        }, 
        {
            destination = ScriptFile; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = scriptId; }); 
            name = script; 
        }
    ); 
}
