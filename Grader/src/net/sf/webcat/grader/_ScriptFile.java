/*==========================================================================*\
 |  _ScriptFile.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to ScriptFile.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2009 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.grader;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * ScriptFile.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _ScriptFile
    extends er.extensions.eof.ERXGenericRecord
    implements net.sf.webcat.core.MutableContainer.MutableContainerOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _ScriptFile object.
     */
    public _ScriptFile()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _ScriptFile object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param isConfigFile
     * @param isPublished
     * @param updateMutableFields
     * @return The newly created object
     */
    public static ScriptFile create(
        EOEditingContext editingContext,
        boolean isConfigFile,
        boolean isPublished,
        boolean updateMutableFields
        )
    {
        ScriptFile eoObject = (ScriptFile)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _ScriptFile.ENTITY_NAME);
        eoObject.setIsConfigFile(isConfigFile);
        eoObject.setIsPublished(isPublished);
        eoObject.setUpdateMutableFields(updateMutableFields);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static ScriptFile localInstance(
        EOEditingContext editingContext, ScriptFile eo)
    {
        return (eo == null)
            ? null
            : (ScriptFile)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static ScriptFile forId(
        EOEditingContext ec, int id )
    {
        ScriptFile obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (ScriptFile)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static ScriptFile forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.foundation.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String CONFIG_DESCRIPTION_KEY = "configDescription";
    public static final String DEFAULT_CONFIG_SETTINGS_KEY = "defaultConfigSettings";
    public static final String GLOBAL_CONFIG_SETTINGS_KEY = "globalConfigSettings";
    public static final String IS_CONFIG_FILE_KEY = "isConfigFile";
    public static final String IS_PUBLISHED_KEY = "isPublished";
    public static final String LAST_MODIFIED_KEY = "lastModified";
    public static final String MAIN_FILE_NAME_KEY = "mainFileName";
    public static final String NAME_KEY = "name";
    public static final String SUBDIR_NAME_KEY = "subdirName";
    public static final String UPDATE_MUTABLE_FIELDS_KEY = "updateMutableFields";
    public static final String UPLOADED_FILE_NAME_KEY = "uploadedFileName";
    // To-one relationships ---
    public static final String AUTHOR_KEY = "author";
    public static final String LANGUAGE_KEY = "language";
    // To-many relationships ---
    public static final String COURSE_OFFERINGS_KEY = "courseOfferings";
    public static final String STEPS_KEY = "steps";
    // Fetch specifications ---
    public static final String AVAILABLE_TO_USER_FSPEC = "availableToUser";
    public static final String ENTITY_NAME = "ScriptFile";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public ScriptFile localInstance(EOEditingContext editingContext)
    {
        return (ScriptFile)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    //-- Local mutable cache --
    private net.sf.webcat.core.MutableDictionary configDescriptionCache;
    private NSData configDescriptionRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>configDescription</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.core.MutableDictionary configDescription()
    {
        NSData dbValue =
            (NSData)storedValueForKey( "configDescription" );
        if ( configDescriptionRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( configDescriptionRawCache ) )
            {
                // They are still equal, so just update the raw cache
                configDescriptionRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                configDescriptionRawCache = dbValue;
                net.sf.webcat.core.MutableDictionary newValue =
                    net.sf.webcat.core.MutableDictionary
                    .objectWithArchiveData( dbValue );
                if ( configDescriptionCache != null )
                {
                    configDescriptionCache.copyFrom( newValue );
                }
                else
                {
                    configDescriptionCache = newValue;
                }
                configDescriptionCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && configDescriptionCache == null )
        {
            configDescriptionCache =
                net.sf.webcat.core.MutableDictionary
                .objectWithArchiveData( dbValue );
             configDescriptionCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return configDescriptionCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>configDescription</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConfigDescription( net.sf.webcat.core.MutableDictionary value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConfigDescription("
                + value + ")" );
        }
        if ( configDescriptionCache == null )
        {
            configDescriptionCache = value;
            value.setHasChanged( false );
            configDescriptionRawCache = value.archiveData();
            takeStoredValueForKey( configDescriptionRawCache, "configDescription" );
        }
        else if ( configDescriptionCache != value )  // ( configDescriptionCache != null )
        {
            configDescriptionCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( configDescriptionCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>configDescription</code>
     * property.
     */
    public void clearConfigDescription()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "clearConfigDescription()" );
        }
        takeStoredValueForKey( null, "configDescription" );
        configDescriptionRawCache = null;
        configDescriptionCache = null;
    }


    //-- Local mutable cache --
    private net.sf.webcat.core.MutableDictionary defaultConfigSettingsCache;
    private NSData defaultConfigSettingsRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>defaultConfigSettings</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.core.MutableDictionary defaultConfigSettings()
    {
        NSData dbValue =
            (NSData)storedValueForKey( "defaultConfigSettings" );
        if ( defaultConfigSettingsRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( defaultConfigSettingsRawCache ) )
            {
                // They are still equal, so just update the raw cache
                defaultConfigSettingsRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                defaultConfigSettingsRawCache = dbValue;
                net.sf.webcat.core.MutableDictionary newValue =
                    net.sf.webcat.core.MutableDictionary
                    .objectWithArchiveData( dbValue );
                if ( defaultConfigSettingsCache != null )
                {
                    defaultConfigSettingsCache.copyFrom( newValue );
                }
                else
                {
                    defaultConfigSettingsCache = newValue;
                }
                defaultConfigSettingsCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && defaultConfigSettingsCache == null )
        {
            defaultConfigSettingsCache =
                net.sf.webcat.core.MutableDictionary
                .objectWithArchiveData( dbValue );
             defaultConfigSettingsCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return defaultConfigSettingsCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>defaultConfigSettings</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDefaultConfigSettings( net.sf.webcat.core.MutableDictionary value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setDefaultConfigSettings("
                + value + ")" );
        }
        if ( defaultConfigSettingsCache == null )
        {
            defaultConfigSettingsCache = value;
            value.setHasChanged( false );
            defaultConfigSettingsRawCache = value.archiveData();
            takeStoredValueForKey( defaultConfigSettingsRawCache, "defaultConfigSettings" );
        }
        else if ( defaultConfigSettingsCache != value )  // ( defaultConfigSettingsCache != null )
        {
            defaultConfigSettingsCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( defaultConfigSettingsCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>defaultConfigSettings</code>
     * property.
     */
    public void clearDefaultConfigSettings()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "clearDefaultConfigSettings()" );
        }
        takeStoredValueForKey( null, "defaultConfigSettings" );
        defaultConfigSettingsRawCache = null;
        defaultConfigSettingsCache = null;
    }


    //-- Local mutable cache --
    private net.sf.webcat.core.MutableDictionary globalConfigSettingsCache;
    private NSData globalConfigSettingsRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>globalConfigSettings</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.core.MutableDictionary globalConfigSettings()
    {
        NSData dbValue =
            (NSData)storedValueForKey( "globalConfigSettings" );
        if ( globalConfigSettingsRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( globalConfigSettingsRawCache ) )
            {
                // They are still equal, so just update the raw cache
                globalConfigSettingsRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                globalConfigSettingsRawCache = dbValue;
                net.sf.webcat.core.MutableDictionary newValue =
                    net.sf.webcat.core.MutableDictionary
                    .objectWithArchiveData( dbValue );
                if ( globalConfigSettingsCache != null )
                {
                    globalConfigSettingsCache.copyFrom( newValue );
                }
                else
                {
                    globalConfigSettingsCache = newValue;
                }
                globalConfigSettingsCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && globalConfigSettingsCache == null )
        {
            globalConfigSettingsCache =
                net.sf.webcat.core.MutableDictionary
                .objectWithArchiveData( dbValue );
             globalConfigSettingsCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return globalConfigSettingsCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>globalConfigSettings</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setGlobalConfigSettings( net.sf.webcat.core.MutableDictionary value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGlobalConfigSettings("
                + value + ")" );
        }
        if ( globalConfigSettingsCache == null )
        {
            globalConfigSettingsCache = value;
            value.setHasChanged( false );
            globalConfigSettingsRawCache = value.archiveData();
            takeStoredValueForKey( globalConfigSettingsRawCache, "globalConfigSettings" );
        }
        else if ( globalConfigSettingsCache != value )  // ( globalConfigSettingsCache != null )
        {
            globalConfigSettingsCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( globalConfigSettingsCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>globalConfigSettings</code>
     * property.
     */
    public void clearGlobalConfigSettings()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "clearGlobalConfigSettings()" );
        }
        takeStoredValueForKey( null, "globalConfigSettings" );
        globalConfigSettingsRawCache = null;
        globalConfigSettingsCache = null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isConfigFile</code> value.
     * @return the value of the attribute
     */
    public boolean isConfigFile()
    {
        Integer result =
            (Integer)storedValueForKey( "isConfigFile" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isConfigFile</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsConfigFile( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsConfigFile("
                + value + "): was " + isConfigFile() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsConfigFileRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isConfigFile</code> value.
     * @return the value of the attribute
     */
    public Integer isConfigFileRaw()
    {
        return (Integer)storedValueForKey( "isConfigFile" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isConfigFile</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsConfigFileRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsConfigFileRaw("
                + value + "): was " + isConfigFileRaw() );
        }
        takeStoredValueForKey( value, "isConfigFile" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isPublished</code> value.
     * @return the value of the attribute
     */
    public boolean isPublished()
    {
        Integer result =
            (Integer)storedValueForKey( "isPublished" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isPublished</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsPublished( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsPublished("
                + value + "): was " + isPublished() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsPublishedRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isPublished</code> value.
     * @return the value of the attribute
     */
    public Integer isPublishedRaw()
    {
        return (Integer)storedValueForKey( "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isPublished</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsPublishedRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsPublishedRaw("
                + value + "): was " + isPublishedRaw() );
        }
        takeStoredValueForKey( value, "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>lastModified</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp lastModified()
    {
        return (NSTimestamp)storedValueForKey( "lastModified" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>lastModified</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLastModified( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLastModified("
                + value + "): was " + lastModified() );
        }
        takeStoredValueForKey( value, "lastModified" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>mainFileName</code> value.
     * @return the value of the attribute
     */
    public String mainFileName()
    {
        return (String)storedValueForKey( "mainFileName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>mainFileName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMainFileName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMainFileName("
                + value + "): was " + mainFileName() );
        }
        takeStoredValueForKey( value, "mainFileName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>name</code> value.
     * @return the value of the attribute
     */
    public String name()
    {
        return (String)storedValueForKey( "name" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>name</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setName("
                + value + "): was " + name() );
        }
        takeStoredValueForKey( value, "name" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>subdirName</code> value.
     * @return the value of the attribute
     */
    public String subdirName()
    {
        return (String)storedValueForKey( "subdirName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>subdirName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setSubdirName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSubdirName("
                + value + "): was " + subdirName() );
        }
        takeStoredValueForKey( value, "subdirName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public boolean updateMutableFields()
    {
        Integer result =
            (Integer)storedValueForKey( "updateMutableFields" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFields( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFields("
                + value + "): was " + updateMutableFields() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setUpdateMutableFieldsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public Integer updateMutableFieldsRaw()
    {
        return (Integer)storedValueForKey( "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFieldsRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFieldsRaw("
                + value + "): was " + updateMutableFieldsRaw() );
        }
        takeStoredValueForKey( value, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>uploadedFileName</code> value.
     * @return the value of the attribute
     */
    public String uploadedFileName()
    {
        return (String)storedValueForKey( "uploadedFileName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>uploadedFileName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUploadedFileName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUploadedFileName("
                + value + "): was " + uploadedFileName() );
        }
        takeStoredValueForKey( value, "uploadedFileName" );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void saveMutables()
    {
        log.debug("saveMutables()");
        if ( configDescriptionCache != null
            && configDescriptionCache.hasChanged() )
        {
            configDescriptionRawCache = configDescriptionCache.archiveData();
            takeStoredValueForKey( configDescriptionRawCache, "configDescription" );
            configDescriptionCache.setHasChanged( false );
        }
        if ( defaultConfigSettingsCache != null
            && defaultConfigSettingsCache.hasChanged() )
        {
            defaultConfigSettingsRawCache = defaultConfigSettingsCache.archiveData();
            takeStoredValueForKey( defaultConfigSettingsRawCache, "defaultConfigSettings" );
            defaultConfigSettingsCache.setHasChanged( false );
        }
        if ( globalConfigSettingsCache != null
            && globalConfigSettingsCache.hasChanged() )
        {
            globalConfigSettingsRawCache = globalConfigSettingsCache.archiveData();
            takeStoredValueForKey( globalConfigSettingsRawCache, "globalConfigSettings" );
            globalConfigSettingsCache.setHasChanged( false );
        }

        setUpdateMutableFields( false );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void willUpdate()
    {
        log.debug("willUpdate()");
        saveMutables();
        super.willUpdate();
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is inserted into the database.
     */
    public void willInsert()
    {
        log.debug("willInsert()");
        saveMutables();
        super.willInsert();
    }


    // ----------------------------------------------------------
    /**
     * Called when the object is invalidated.
     */
    public void flushCaches()
    {
        log.debug("flushCaches()");
        configDescriptionCache = null;
        configDescriptionRawCache  = null;
        defaultConfigSettingsCache = null;
        defaultConfigSettingsRawCache  = null;
        globalConfigSettingsCache = null;
        globalConfigSettingsRawCache  = null;
        super.flushCaches();
    }


    // ----------------------------------------------------------
    /**
     * Called when an owned mutable container object is changed.
     */
    public void mutableContainerHasChanged()
    {
        setUpdateMutableFields( true );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>author</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User author()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "author" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>author</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAuthorRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setAuthor( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAuthor("
                + value + "): was " + author() );
        }
        takeStoredValueForKey( value, "author" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>author</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setAuthorRelationship(
        net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAuthorRelationship("
                + value + "): was " + author() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.User object = author();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "author" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "author" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>language</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.Language language()
    {
        return (net.sf.webcat.core.Language)storedValueForKey( "language" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>language</code>
     * relationship (DO NOT USE--instead, use
     * <code>setLanguageRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setLanguage( net.sf.webcat.core.Language value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLanguage("
                + value + "): was " + language() );
        }
        takeStoredValueForKey( value, "language" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>language</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setLanguageRelationship(
        net.sf.webcat.core.Language value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLanguageRelationship("
                + value + "): was " + language() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.Language object = language();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "language" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "language" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>courseOfferings</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.CourseOffering> courseOfferings()
    {
        return (NSArray)storedValueForKey( "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>courseOfferings</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setCourseOfferings( NSMutableArray<net.sf.webcat.core.CourseOffering>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCourseOfferings("
                + value + "): was " + courseOfferings() );
        }
        takeStoredValueForKey( value, "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>courseOfferings</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToCourseOfferingsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToCourseOfferings( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCourseOfferings("
                + value + "): was " + courseOfferings() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)courseOfferings();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>courseOfferings</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromCourseOfferingsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCourseOfferings( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromCourseOfferings("
                + value + "): was " + courseOfferings() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)courseOfferings();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>courseOfferings</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToCourseOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCourseOfferingsRelationship("
                + value + "): was " + courseOfferings() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>courseOfferings</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCourseOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromCourseOfferingsRelationship("
                + value + "): was " + courseOfferings() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>courseOfferings</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.CourseOffering createCourseOfferingsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createCourseOfferingsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CourseOffering" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "courseOfferings" );
        return (net.sf.webcat.core.CourseOffering)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>courseOfferings</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteCourseOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteCourseOfferingsRelationship("
                + value + "): was " + courseOfferings() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "courseOfferings" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>courseOfferings</code> relationship.
     */
    public void deleteAllCourseOfferingsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllCourseOfferingsRelationships(): was "
                + courseOfferings() );
        }
        Enumeration objects = courseOfferings().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteCourseOfferingsRelationship(
                (net.sf.webcat.core.CourseOffering)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>steps</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.grader.Step> steps()
    {
        return (NSArray)storedValueForKey( "steps" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>steps</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setSteps( NSMutableArray<net.sf.webcat.grader.Step>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSteps("
                + value + "): was " + steps() );
        }
        takeStoredValueForKey( value, "steps" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>steps</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToStepsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToSteps( net.sf.webcat.grader.Step value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToSteps("
                + value + "): was " + steps() );
        }
        NSMutableArray<net.sf.webcat.grader.Step> array =
            (NSMutableArray<net.sf.webcat.grader.Step>)steps();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>steps</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromStepsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSteps( net.sf.webcat.grader.Step value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromSteps("
                + value + "): was " + steps() );
        }
        NSMutableArray<net.sf.webcat.grader.Step> array =
            (NSMutableArray<net.sf.webcat.grader.Step>)steps();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>steps</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToStepsRelationship( net.sf.webcat.grader.Step value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToStepsRelationship("
                + value + "): was " + steps() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "steps" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>steps</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromStepsRelationship( net.sf.webcat.grader.Step value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromStepsRelationship("
                + value + "): was " + steps() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "steps" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>steps</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.Step createStepsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createStepsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "Step" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "steps" );
        return (net.sf.webcat.grader.Step)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>steps</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteStepsRelationship( net.sf.webcat.grader.Step value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteStepsRelationship("
                + value + "): was " + steps() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "steps" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>steps</code> relationship.
     */
    public void deleteAllStepsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllStepsRelationships(): was "
                + steps() );
        }
        Enumeration objects = steps().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteStepsRelationship(
                (net.sf.webcat.grader.Step)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>AvailableToUser</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param authorBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<ScriptFile> objectsForAvailableToUser(
            EOEditingContext context,
            net.sf.webcat.core.User authorBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "availableToUser", "ScriptFile" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( authorBinding != null )
        {
            bindings.setObjectForKey( authorBinding,
                                      "author" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForAvailableToUser(ec"
                + ", " + authorBinding
                + "): " + result );
        }
        return result;
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( ScriptFile.class );
}
