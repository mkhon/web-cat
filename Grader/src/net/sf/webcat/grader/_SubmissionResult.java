/*==========================================================================*\
 |  _SubmissionResult.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to SubmissionResult.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2009 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.grader;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * SubmissionResult.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _SubmissionResult
    extends er.extensions.eof.ERXGenericRecord
    implements net.sf.webcat.core.MigratoryAttributeOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _SubmissionResult object.
     */
    public _SubmissionResult()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _SubmissionResult object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @return The newly created object
     */
    public static SubmissionResult create(
        EOEditingContext editingContext
        )
    {
        SubmissionResult eoObject = (SubmissionResult)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _SubmissionResult.ENTITY_NAME);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static SubmissionResult localInstance(
        EOEditingContext editingContext, SubmissionResult eo)
    {
        return (eo == null)
            ? null
            : (SubmissionResult)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static SubmissionResult forId(
        EOEditingContext ec, int id )
    {
        SubmissionResult obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (SubmissionResult)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static SubmissionResult forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.foundation.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String COMMENT_FORMAT_KEY = "commentFormat";
    public static final String COMMENTS_KEY = "comments";
    public static final String CORRECTNESS_SCORE_KEY = "correctnessScore";
    public static final String IS_MOST_RECENT_KEY = "isMostRecent";
    public static final String STAT_ELEMENTS_LABEL_KEY = "statElementsLabel";
    public static final String STATUS_KEY = "status";
    public static final String TA_SCORE_KEY = "taScore";
    public static final String TOOL_SCORE_KEY = "toolScore";
    // To-one relationships ---
    // To-many relationships ---
    public static final String RESULT_FILES_KEY = "resultFiles";
    public static final String RESULT_OUTCOMES_KEY = "resultOutcomes";
    public static final String SUBMISSION_FILE_STATS_KEY = "submissionFileStats";
    public static final String SUBMISSIONS_KEY = "submissions";
    // Fetch specifications ---
    public static final String MOST_RECENT_BY_DATE_FSPEC = "mostRecentByDate";
    public static final String MOST_RECENT_SUBMISSION_FSPEC = "mostRecentSubmission";
    public static final String MOST_RECENT_SUBMISSIONS_FSPEC = "mostRecentSubmissions";
    public static final String MOST_RECENT_SUBMISSIONS_BY_NUMBER_FSPEC = "mostRecentSubmissionsByNumber";
    public static final String USER_FSPEC = "user";
    public static final String ENTITY_NAME = "SubmissionResult";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public SubmissionResult localInstance(EOEditingContext editingContext)
    {
        return (SubmissionResult)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>commentFormat</code> value.
     * @return the value of the attribute
     */
    public byte commentFormat()
    {
        Integer result =
            (Integer)storedValueForKey( "commentFormat" );
        return ( result == null )
            ? 0
            : result.byteValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>commentFormat</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setCommentFormat( byte value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCommentFormat("
                + value + "): was " + commentFormat() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setCommentFormatRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>commentFormat</code> value.
     * @return the value of the attribute
     */
    public Integer commentFormatRaw()
    {
        return (Integer)storedValueForKey( "commentFormat" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>commentFormat</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setCommentFormatRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCommentFormatRaw("
                + value + "): was " + commentFormatRaw() );
        }
        takeStoredValueForKey( value, "commentFormat" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>comments</code> value.
     * @return the value of the attribute
     */
    public String comments()
    {
        return (String)storedValueForKey( "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>comments</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setComments( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setComments("
                + value + "): was " + comments() );
        }
        takeStoredValueForKey( value, "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>correctnessScore</code> value.
     * @return the value of the attribute
     */
    public double correctnessScore()
    {
        Double result =
            (Double)storedValueForKey( "correctnessScore" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>correctnessScore</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setCorrectnessScore( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCorrectnessScore("
                + value + "): was " + correctnessScore() );
        }
        Double actual =
            new Double( value );
            setCorrectnessScoreRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>correctnessScore</code> value.
     * @return the value of the attribute
     */
    public Double correctnessScoreRaw()
    {
        return (Double)storedValueForKey( "correctnessScore" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>correctnessScore</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setCorrectnessScoreRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCorrectnessScoreRaw("
                + value + "): was " + correctnessScoreRaw() );
        }
        takeStoredValueForKey( value, "correctnessScore" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isMostRecent</code> value.
     * @return the value of the attribute
     */
    public boolean isMostRecent()
    {
        Integer result =
            (Integer)storedValueForKey( "isMostRecent" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isMostRecent</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsMostRecent( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsMostRecent("
                + value + "): was " + isMostRecent() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsMostRecentRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isMostRecent</code> value.
     * @return the value of the attribute
     */
    public Integer isMostRecentRaw()
    {
        return (Integer)storedValueForKey( "isMostRecent" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isMostRecent</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsMostRecentRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsMostRecentRaw("
                + value + "): was " + isMostRecentRaw() );
        }
        takeStoredValueForKey( value, "isMostRecent" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>statElementsLabel</code> value.
     * @return the value of the attribute
     */
    public String statElementsLabel()
    {
        return (String)storedValueForKey( "statElementsLabel" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>statElementsLabel</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatElementsLabel( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatElementsLabel("
                + value + "): was " + statElementsLabel() );
        }
        takeStoredValueForKey( value, "statElementsLabel" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>status</code> value.
     * @return the value of the attribute
     */
    public byte status()
    {
        Integer result =
            (Integer)storedValueForKey( "status" );
        return ( result == null )
            ? net.sf.webcat.core.Status.TO_DO
            : result.byteValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>status</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatus( byte value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatus("
                + value + "): was " + status() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setStatusRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>status</code> value.
     * @return the value of the attribute
     */
    public Integer statusRaw()
    {
        return (Integer)storedValueForKey( "status" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>status</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatusRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatusRaw("
                + value + "): was " + statusRaw() );
        }
        takeStoredValueForKey( value, "status" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>taScore</code> value.
     * @return the value of the attribute
     */
    public double taScore()
    {
        Double result =
            (Double)storedValueForKey( "taScore" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>taScore</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setTaScore( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTaScore("
                + value + "): was " + taScore() );
        }
        Double actual =
            new Double( value );
            setTaScoreRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>taScore</code> value.
     * @return the value of the attribute
     */
    public Double taScoreRaw()
    {
        return (Double)storedValueForKey( "taScore" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>taScore</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setTaScoreRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTaScoreRaw("
                + value + "): was " + taScoreRaw() );
        }
        takeStoredValueForKey( value, "taScore" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>toolScore</code> value.
     * @return the value of the attribute
     */
    public double toolScore()
    {
        Double result =
            (Double)storedValueForKey( "toolScore" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>toolScore</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setToolScore( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setToolScore("
                + value + "): was " + toolScore() );
        }
        Double actual =
            new Double( value );
            setToolScoreRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>toolScore</code> value.
     * @return the value of the attribute
     */
    public Double toolScoreRaw()
    {
        return (Double)storedValueForKey( "toolScore" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>toolScore</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setToolScoreRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setToolScoreRaw("
                + value + "): was " + toolScoreRaw() );
        }
        takeStoredValueForKey( value, "toolScore" );
    }


    // ----------------------------------------------------------
    @Override
    public void awakeFromFetch(EOEditingContext ec)
    {
        super.awakeFromFetch(ec);

        // Only try to migrate if the EC isn't a migrating context. If it is,
        // we're already trying to migrate and this "awake" is coming from the
        // child migration context.

        if (!(ec instanceof net.sf.webcat.core.MigratingEditingContext))
        {
            migrateAttributeValuesIfNeeded();
        }
    }


    // ----------------------------------------------------------
    /**
     * Called by {@link #awake} to migrate attribute values if needed when the
     * object is retrieved.
     */
    public void migrateAttributeValuesIfNeeded()
    {
        log.debug("migrateAttributeValuesIfNeeded()");

        if ( isMostRecentRaw() == null )
        {
            net.sf.webcat.core.MigratingEditingContext mec =
                net.sf.webcat.core.Application.newMigratingEditingContext();
            SubmissionResult migratingObject = localInstance(mec);

            if ( migratingObject.isMostRecentRaw() == null )
            {
                migratingObject.isMostRecent();
            }

            mec.saveChanges();
            net.sf.webcat.core.Application.releaseMigratingEditingContext(mec);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>resultFiles</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.grader.ResultFile> resultFiles()
    {
        return (NSArray)storedValueForKey( "resultFiles" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>resultFiles</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setResultFiles( NSMutableArray<net.sf.webcat.grader.ResultFile>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setResultFiles("
                + value + "): was " + resultFiles() );
        }
        takeStoredValueForKey( value, "resultFiles" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>resultFiles</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToResultFilesRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToResultFiles( net.sf.webcat.grader.ResultFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToResultFiles("
                + value + "): was " + resultFiles() );
        }
        NSMutableArray<net.sf.webcat.grader.ResultFile> array =
            (NSMutableArray<net.sf.webcat.grader.ResultFile>)resultFiles();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>resultFiles</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromResultFilesRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromResultFiles( net.sf.webcat.grader.ResultFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromResultFiles("
                + value + "): was " + resultFiles() );
        }
        NSMutableArray<net.sf.webcat.grader.ResultFile> array =
            (NSMutableArray<net.sf.webcat.grader.ResultFile>)resultFiles();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>resultFiles</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToResultFilesRelationship( net.sf.webcat.grader.ResultFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToResultFilesRelationship("
                + value + "): was " + resultFiles() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "resultFiles" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>resultFiles</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromResultFilesRelationship( net.sf.webcat.grader.ResultFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromResultFilesRelationship("
                + value + "): was " + resultFiles() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "resultFiles" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>resultFiles</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.ResultFile createResultFilesRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createResultFilesRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "ResultFile" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "resultFiles" );
        return (net.sf.webcat.grader.ResultFile)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity that is a member of the
     * <code>resultFiles</code> relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void deleteResultFilesRelationship( net.sf.webcat.grader.ResultFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteResultFilesRelationship("
                + value + "): was " + resultFiles() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "resultFiles" );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>resultFiles</code> relationship.
     */
    public void deleteAllResultFilesRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllResultFilesRelationships(): was "
                + resultFiles() );
        }
        Enumeration objects = resultFiles().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteResultFilesRelationship(
                (net.sf.webcat.grader.ResultFile)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>resultOutcomes</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.grader.ResultOutcome> resultOutcomes()
    {
        return (NSArray)storedValueForKey( "resultOutcomes" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>resultOutcomes</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setResultOutcomes( NSMutableArray<net.sf.webcat.grader.ResultOutcome>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setResultOutcomes("
                + value + "): was " + resultOutcomes() );
        }
        takeStoredValueForKey( value, "resultOutcomes" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>resultOutcomes</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToResultOutcomesRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToResultOutcomes( net.sf.webcat.grader.ResultOutcome value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToResultOutcomes("
                + value + "): was " + resultOutcomes() );
        }
        NSMutableArray<net.sf.webcat.grader.ResultOutcome> array =
            (NSMutableArray<net.sf.webcat.grader.ResultOutcome>)resultOutcomes();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>resultOutcomes</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromResultOutcomesRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromResultOutcomes( net.sf.webcat.grader.ResultOutcome value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromResultOutcomes("
                + value + "): was " + resultOutcomes() );
        }
        NSMutableArray<net.sf.webcat.grader.ResultOutcome> array =
            (NSMutableArray<net.sf.webcat.grader.ResultOutcome>)resultOutcomes();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>resultOutcomes</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToResultOutcomesRelationship( net.sf.webcat.grader.ResultOutcome value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToResultOutcomesRelationship("
                + value + "): was " + resultOutcomes() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "resultOutcomes" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>resultOutcomes</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromResultOutcomesRelationship( net.sf.webcat.grader.ResultOutcome value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromResultOutcomesRelationship("
                + value + "): was " + resultOutcomes() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "resultOutcomes" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>resultOutcomes</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.ResultOutcome createResultOutcomesRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createResultOutcomesRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "ResultOutcome" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "resultOutcomes" );
        return (net.sf.webcat.grader.ResultOutcome)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity that is a member of the
     * <code>resultOutcomes</code> relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void deleteResultOutcomesRelationship( net.sf.webcat.grader.ResultOutcome value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteResultOutcomesRelationship("
                + value + "): was " + resultOutcomes() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "resultOutcomes" );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>resultOutcomes</code> relationship.
     */
    public void deleteAllResultOutcomesRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllResultOutcomesRelationships(): was "
                + resultOutcomes() );
        }
        Enumeration objects = resultOutcomes().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteResultOutcomesRelationship(
                (net.sf.webcat.grader.ResultOutcome)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>submissionFileStats</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.grader.SubmissionFileStats> submissionFileStats()
    {
        return (NSArray)storedValueForKey( "submissionFileStats" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>submissionFileStats</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setSubmissionFileStats( NSMutableArray<net.sf.webcat.grader.SubmissionFileStats>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSubmissionFileStats("
                + value + "): was " + submissionFileStats() );
        }
        takeStoredValueForKey( value, "submissionFileStats" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>submissionFileStats</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToSubmissionFileStatsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToSubmissionFileStats( net.sf.webcat.grader.SubmissionFileStats value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToSubmissionFileStats("
                + value + "): was " + submissionFileStats() );
        }
        NSMutableArray<net.sf.webcat.grader.SubmissionFileStats> array =
            (NSMutableArray<net.sf.webcat.grader.SubmissionFileStats>)submissionFileStats();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>submissionFileStats</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromSubmissionFileStatsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSubmissionFileStats( net.sf.webcat.grader.SubmissionFileStats value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromSubmissionFileStats("
                + value + "): was " + submissionFileStats() );
        }
        NSMutableArray<net.sf.webcat.grader.SubmissionFileStats> array =
            (NSMutableArray<net.sf.webcat.grader.SubmissionFileStats>)submissionFileStats();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>submissionFileStats</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToSubmissionFileStatsRelationship( net.sf.webcat.grader.SubmissionFileStats value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToSubmissionFileStatsRelationship("
                + value + "): was " + submissionFileStats() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "submissionFileStats" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>submissionFileStats</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSubmissionFileStatsRelationship( net.sf.webcat.grader.SubmissionFileStats value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromSubmissionFileStatsRelationship("
                + value + "): was " + submissionFileStats() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "submissionFileStats" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>submissionFileStats</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.SubmissionFileStats createSubmissionFileStatsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createSubmissionFileStatsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "SubmissionFileStats" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "submissionFileStats" );
        return (net.sf.webcat.grader.SubmissionFileStats)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity that is a member of the
     * <code>submissionFileStats</code> relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void deleteSubmissionFileStatsRelationship( net.sf.webcat.grader.SubmissionFileStats value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteSubmissionFileStatsRelationship("
                + value + "): was " + submissionFileStats() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "submissionFileStats" );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>submissionFileStats</code> relationship.
     */
    public void deleteAllSubmissionFileStatsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllSubmissionFileStatsRelationships(): was "
                + submissionFileStats() );
        }
        Enumeration objects = submissionFileStats().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteSubmissionFileStatsRelationship(
                (net.sf.webcat.grader.SubmissionFileStats)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>submissions</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.grader.Submission> submissions()
    {
        return (NSArray)storedValueForKey( "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>submissions</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setSubmissions( NSMutableArray<net.sf.webcat.grader.Submission>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSubmissions("
                + value + "): was " + submissions() );
        }
        takeStoredValueForKey( value, "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>submissions</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToSubmissionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToSubmissions( net.sf.webcat.grader.Submission value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToSubmissions("
                + value + "): was " + submissions() );
        }
        NSMutableArray<net.sf.webcat.grader.Submission> array =
            (NSMutableArray<net.sf.webcat.grader.Submission>)submissions();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>submissions</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromSubmissionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSubmissions( net.sf.webcat.grader.Submission value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromSubmissions("
                + value + "): was " + submissions() );
        }
        NSMutableArray<net.sf.webcat.grader.Submission> array =
            (NSMutableArray<net.sf.webcat.grader.Submission>)submissions();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>submissions</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToSubmissionsRelationship( net.sf.webcat.grader.Submission value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToSubmissionsRelationship("
                + value + "): was " + submissions() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>submissions</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSubmissionsRelationship( net.sf.webcat.grader.Submission value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromSubmissionsRelationship("
                + value + "): was " + submissions() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>submissions</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.Submission createSubmissionsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createSubmissionsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "Submission" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "submissions" );
        return (net.sf.webcat.grader.Submission)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>submissions</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteSubmissionsRelationship( net.sf.webcat.grader.Submission value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteSubmissionsRelationship("
                + value + "): was " + submissions() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "submissions" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>submissions</code> relationship.
     */
    public void deleteAllSubmissionsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllSubmissionsRelationships(): was "
                + submissions() );
        }
        Enumeration objects = submissions().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteSubmissionsRelationship(
                (net.sf.webcat.grader.Submission)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a fetch specification.
     *
     * @param context The editing context to use
     * @param fspec The fetch specification to use
     */
    @SuppressWarnings("unchecked")
    public static NSArray<SubmissionResult> objectsWithFetchSpecification(
        EOEditingContext context,
        EOFetchSpecification fspec)
    {
        return context.objectsWithFetchSpecification(fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>MostRecentByDate</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param assignmentOfferingBinding fetch spec parameter
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SubmissionResult> objectsForMostRecentByDate(
            EOEditingContext context,
            net.sf.webcat.grader.AssignmentOffering assignmentOfferingBinding,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "mostRecentByDate", "SubmissionResult" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( assignmentOfferingBinding != null )
        {
            bindings.setObjectForKey( assignmentOfferingBinding,
                                      "assignmentOffering" );
        }
        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<SubmissionResult> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForMostRecentByDate(ec"
                + ", " + assignmentOfferingBinding
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>MostRecentSubmission</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param assignmentOfferingBinding fetch spec parameter
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SubmissionResult> objectsForMostRecentSubmission(
            EOEditingContext context,
            net.sf.webcat.grader.AssignmentOffering assignmentOfferingBinding,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "mostRecentSubmission", "SubmissionResult" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( assignmentOfferingBinding != null )
        {
            bindings.setObjectForKey( assignmentOfferingBinding,
                                      "assignmentOffering" );
        }
        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<SubmissionResult> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForMostRecentSubmission(ec"
                + ", " + assignmentOfferingBinding
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>MostRecentSubmissions</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param assignmentOfferingBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SubmissionResult> objectsForMostRecentSubmissions(
            EOEditingContext context,
            net.sf.webcat.grader.AssignmentOffering assignmentOfferingBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "mostRecentSubmissions", "SubmissionResult" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( assignmentOfferingBinding != null )
        {
            bindings.setObjectForKey( assignmentOfferingBinding,
                                      "assignmentOffering" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<SubmissionResult> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForMostRecentSubmissions(ec"
                + ", " + assignmentOfferingBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>MostRecentSubmissionsByNumber</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param assignmentOfferingBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SubmissionResult> objectsForMostRecentSubmissionsByNumber(
            EOEditingContext context,
            net.sf.webcat.grader.AssignmentOffering assignmentOfferingBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "mostRecentSubmissionsByNumber", "SubmissionResult" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( assignmentOfferingBinding != null )
        {
            bindings.setObjectForKey( assignmentOfferingBinding,
                                      "assignmentOffering" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<SubmissionResult> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForMostRecentSubmissionsByNumber(ec"
                + ", " + assignmentOfferingBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>User</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param assignmentOfferingBinding fetch spec parameter
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SubmissionResult> objectsForUser(
            EOEditingContext context,
            net.sf.webcat.grader.AssignmentOffering assignmentOfferingBinding,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "user", "SubmissionResult" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( assignmentOfferingBinding != null )
        {
            bindings.setObjectForKey( assignmentOfferingBinding,
                                      "assignmentOffering" );
        }
        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<SubmissionResult> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForUser(ec"
                + ", " + assignmentOfferingBinding
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Produce a string representation of this object.  This implementation
     * calls UserPresentableDescription(), which uses WebObjects' internal
     * mechanism to print out the visible fields of this object.  Normally,
     * subclasses would override userPresentableDescription() to change
     * the way the object is printed.
     *
     * @return A string representation of the object's value
     */
    public String toString()
    {
        return userPresentableDescription();
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( SubmissionResult.class );
}
