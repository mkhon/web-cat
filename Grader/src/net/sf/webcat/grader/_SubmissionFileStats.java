/*==========================================================================*\
 |  _SubmissionFileStats.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to SubmissionFileStats.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2008 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.grader;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * SubmissionFileStats.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _SubmissionFileStats
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _SubmissionFileStats object.
     */
    public _SubmissionFileStats()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _SubmissionFileStats object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @return The newly created object
     */
    public static SubmissionFileStats create(
        EOEditingContext editingContext
        )
    {
        SubmissionFileStats eoObject = (SubmissionFileStats)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _SubmissionFileStats.ENTITY_NAME);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static SubmissionFileStats localInstance(
        EOEditingContext editingContext, SubmissionFileStats eo)
    {
        return (eo == null)
            ? null
            : (SubmissionFileStats)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static SubmissionFileStats forId(
        EOEditingContext ec, int id )
    {
        SubmissionFileStats obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (SubmissionFileStats)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static SubmissionFileStats forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String CLASS_NAME_KEY = "className";
    public static final String CONDITIONALS_KEY = "conditionals";
    public static final String CONDITIONALS_COVERED_KEY = "conditionalsCovered";
    public static final String DEDUCTIONS_KEY = "deductions";
    public static final String ELEMENTS_KEY = "elements";
    public static final String ELEMENTS_COVERED_KEY = "elementsCovered";
    public static final String LOC_KEY = "loc";
    public static final String MARKUP_FILE_NAME_RAW_KEY = "markupFileNameRaw";
    public static final String METHODS_KEY = "methods";
    public static final String METHODS_COVERED_KEY = "methodsCovered";
    public static final String NCLOC_KEY = "ncloc";
    public static final String PKG_NAME_KEY = "pkgName";
    public static final String REMARKS_KEY = "remarks";
    public static final String SOURCE_FILE_NAME_RAW_KEY = "sourceFileNameRaw";
    public static final String STATEMENTS_KEY = "statements";
    public static final String STATEMENTS_COVERED_KEY = "statementsCovered";
    public static final String STATUS_KEY = "status";
    // To-one relationships ---
    public static final String SUBMISSION_RESULT_KEY = "submissionResult";
    // To-many relationships ---
    public static final String COMMENTS_KEY = "comments";
    public static final String GRADER_PREFS_KEY = "graderPrefs";
    // Fetch specifications ---
    public static final String ENTITY_NAME = "SubmissionFileStats";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public SubmissionFileStats localInstance(EOEditingContext editingContext)
    {
        return (SubmissionFileStats)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>className</code> value.
     * @return the value of the attribute
     */
    public String className()
    {
        return (String)storedValueForKey( "className" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>className</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setClassName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setClassName("
                + value + "): was " + className() );
        }
        takeStoredValueForKey( value, "className" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>conditionals</code> value.
     * @return the value of the attribute
     */
    public int conditionals()
    {
        Number result =
            (Number)storedValueForKey( "conditionals" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>conditionals</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConditionals( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConditionals("
                + value + "): was " + conditionals() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setConditionalsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>conditionals</code> value.
     * @return the value of the attribute
     */
    public Number conditionalsRaw()
    {
        return (Number)storedValueForKey( "conditionals" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>conditionals</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConditionalsRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConditionalsRaw("
                + value + "): was " + conditionalsRaw() );
        }
        takeStoredValueForKey( value, "conditionals" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>conditionalsCovered</code> value.
     * @return the value of the attribute
     */
    public int conditionalsCovered()
    {
        Number result =
            (Number)storedValueForKey( "conditionalsCovered" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>conditionalsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConditionalsCovered( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConditionalsCovered("
                + value + "): was " + conditionalsCovered() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setConditionalsCoveredRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>conditionalsCovered</code> value.
     * @return the value of the attribute
     */
    public Number conditionalsCoveredRaw()
    {
        return (Number)storedValueForKey( "conditionalsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>conditionalsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConditionalsCoveredRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConditionalsCoveredRaw("
                + value + "): was " + conditionalsCoveredRaw() );
        }
        takeStoredValueForKey( value, "conditionalsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>deductions</code> value.
     * @return the value of the attribute
     */
    public double deductions()
    {
        Number result =
            (Number)storedValueForKey( "deductions" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>deductions</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDeductions( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setDeductions("
                + value + "): was " + deductions() );
        }
        Number actual =
            new Double( value );
        setDeductionsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>deductions</code> value.
     * @return the value of the attribute
     */
    public Number deductionsRaw()
    {
        return (Number)storedValueForKey( "deductions" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>deductions</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDeductionsRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setDeductionsRaw("
                + value + "): was " + deductionsRaw() );
        }
        takeStoredValueForKey( value, "deductions" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>elements</code> value.
     * @return the value of the attribute
     */
    public int elements()
    {
        Number result =
            (Number)storedValueForKey( "elements" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>elements</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setElements( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setElements("
                + value + "): was " + elements() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setElementsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>elements</code> value.
     * @return the value of the attribute
     */
    public Number elementsRaw()
    {
        return (Number)storedValueForKey( "elements" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>elements</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setElementsRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setElementsRaw("
                + value + "): was " + elementsRaw() );
        }
        takeStoredValueForKey( value, "elements" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>elementsCovered</code> value.
     * @return the value of the attribute
     */
    public int elementsCovered()
    {
        Number result =
            (Number)storedValueForKey( "elementsCovered" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>elementsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setElementsCovered( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setElementsCovered("
                + value + "): was " + elementsCovered() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setElementsCoveredRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>elementsCovered</code> value.
     * @return the value of the attribute
     */
    public Number elementsCoveredRaw()
    {
        return (Number)storedValueForKey( "elementsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>elementsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setElementsCoveredRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setElementsCoveredRaw("
                + value + "): was " + elementsCoveredRaw() );
        }
        takeStoredValueForKey( value, "elementsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>loc</code> value.
     * @return the value of the attribute
     */
    public int loc()
    {
        Number result =
            (Number)storedValueForKey( "loc" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>loc</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLoc( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLoc("
                + value + "): was " + loc() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setLocRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>loc</code> value.
     * @return the value of the attribute
     */
    public Number locRaw()
    {
        return (Number)storedValueForKey( "loc" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>loc</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLocRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLocRaw("
                + value + "): was " + locRaw() );
        }
        takeStoredValueForKey( value, "loc" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>markupFileNameRaw</code> value.
     * @return the value of the attribute
     */
    public String markupFileNameRaw()
    {
        return (String)storedValueForKey( "markupFileNameRaw" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>markupFileNameRaw</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMarkupFileNameRaw( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMarkupFileNameRaw("
                + value + "): was " + markupFileNameRaw() );
        }
        takeStoredValueForKey( value, "markupFileNameRaw" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>methods</code> value.
     * @return the value of the attribute
     */
    public int methods()
    {
        Number result =
            (Number)storedValueForKey( "methods" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>methods</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMethods( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMethods("
                + value + "): was " + methods() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setMethodsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>methods</code> value.
     * @return the value of the attribute
     */
    public Number methodsRaw()
    {
        return (Number)storedValueForKey( "methods" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>methods</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMethodsRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMethodsRaw("
                + value + "): was " + methodsRaw() );
        }
        takeStoredValueForKey( value, "methods" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>methodsCovered</code> value.
     * @return the value of the attribute
     */
    public int methodsCovered()
    {
        Number result =
            (Number)storedValueForKey( "methodsCovered" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>methodsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMethodsCovered( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMethodsCovered("
                + value + "): was " + methodsCovered() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setMethodsCoveredRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>methodsCovered</code> value.
     * @return the value of the attribute
     */
    public Number methodsCoveredRaw()
    {
        return (Number)storedValueForKey( "methodsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>methodsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMethodsCoveredRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMethodsCoveredRaw("
                + value + "): was " + methodsCoveredRaw() );
        }
        takeStoredValueForKey( value, "methodsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>ncloc</code> value.
     * @return the value of the attribute
     */
    public int ncloc()
    {
        Number result =
            (Number)storedValueForKey( "ncloc" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>ncloc</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNcloc( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNcloc("
                + value + "): was " + ncloc() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setNclocRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>ncloc</code> value.
     * @return the value of the attribute
     */
    public Number nclocRaw()
    {
        return (Number)storedValueForKey( "ncloc" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>ncloc</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNclocRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNclocRaw("
                + value + "): was " + nclocRaw() );
        }
        takeStoredValueForKey( value, "ncloc" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>pkgName</code> value.
     * @return the value of the attribute
     */
    public String pkgName()
    {
        return (String)storedValueForKey( "pkgName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>pkgName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPkgName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPkgName("
                + value + "): was " + pkgName() );
        }
        takeStoredValueForKey( value, "pkgName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>remarks</code> value.
     * @return the value of the attribute
     */
    public int remarks()
    {
        Number result =
            (Number)storedValueForKey( "remarks" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>remarks</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setRemarks( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setRemarks("
                + value + "): was " + remarks() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setRemarksRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>remarks</code> value.
     * @return the value of the attribute
     */
    public Number remarksRaw()
    {
        return (Number)storedValueForKey( "remarks" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>remarks</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setRemarksRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setRemarksRaw("
                + value + "): was " + remarksRaw() );
        }
        takeStoredValueForKey( value, "remarks" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>sourceFileNameRaw</code> value.
     * @return the value of the attribute
     */
    public String sourceFileNameRaw()
    {
        return (String)storedValueForKey( "sourceFileNameRaw" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>sourceFileNameRaw</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setSourceFileNameRaw( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSourceFileNameRaw("
                + value + "): was " + sourceFileNameRaw() );
        }
        takeStoredValueForKey( value, "sourceFileNameRaw" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>statements</code> value.
     * @return the value of the attribute
     */
    public int statements()
    {
        Number result =
            (Number)storedValueForKey( "statements" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>statements</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatements( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatements("
                + value + "): was " + statements() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setStatementsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>statements</code> value.
     * @return the value of the attribute
     */
    public Number statementsRaw()
    {
        return (Number)storedValueForKey( "statements" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>statements</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatementsRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatementsRaw("
                + value + "): was " + statementsRaw() );
        }
        takeStoredValueForKey( value, "statements" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>statementsCovered</code> value.
     * @return the value of the attribute
     */
    public int statementsCovered()
    {
        Number result =
            (Number)storedValueForKey( "statementsCovered" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>statementsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatementsCovered( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatementsCovered("
                + value + "): was " + statementsCovered() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setStatementsCoveredRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>statementsCovered</code> value.
     * @return the value of the attribute
     */
    public Number statementsCoveredRaw()
    {
        return (Number)storedValueForKey( "statementsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>statementsCovered</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatementsCoveredRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatementsCoveredRaw("
                + value + "): was " + statementsCoveredRaw() );
        }
        takeStoredValueForKey( value, "statementsCovered" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>status</code> value.
     * @return the value of the attribute
     */
    public byte status()
    {
        Number result =
            (Number)storedValueForKey( "status" );
        return ( result == null )
            ? net.sf.webcat.core.Status.TO_DO
            : result.byteValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>status</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatus( byte value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatus("
                + value + "): was " + status() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setStatusRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>status</code> value.
     * @return the value of the attribute
     */
    public Number statusRaw()
    {
        return (Number)storedValueForKey( "status" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>status</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setStatusRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStatusRaw("
                + value + "): was " + statusRaw() );
        }
        takeStoredValueForKey( value, "status" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>submissionResult</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.grader.SubmissionResult submissionResult()
    {
        return (net.sf.webcat.grader.SubmissionResult)storedValueForKey( "submissionResult" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>submissionResult</code>
     * relationship (DO NOT USE--instead, use
     * <code>setSubmissionResultRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setSubmissionResult( net.sf.webcat.grader.SubmissionResult value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSubmissionResult("
                + value + "): was " + submissionResult() );
        }
        takeStoredValueForKey( value, "submissionResult" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>submissionResult</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setSubmissionResultRelationship(
        net.sf.webcat.grader.SubmissionResult value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSubmissionResultRelationship("
                + value + "): was " + submissionResult() );
        }
        if ( value == null )
        {
            net.sf.webcat.grader.SubmissionResult object = submissionResult();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "submissionResult" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "submissionResult" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>comments</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray comments()
    {
        return (NSArray)storedValueForKey( "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>comments</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setComments( NSMutableArray value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setComments("
                + value + "): was " + comments() );
        }
        takeStoredValueForKey( value, "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>comments</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToCommentsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToComments( net.sf.webcat.grader.SubmissionFileComment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToComments("
                + value + "): was " + comments() );
        }
        NSMutableArray array = (NSMutableArray)comments();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>comments</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromCommentsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromComments( net.sf.webcat.grader.SubmissionFileComment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromComments("
                + value + "): was " + comments() );
        }
        NSMutableArray array = (NSMutableArray)comments();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>comments</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToCommentsRelationship( net.sf.webcat.grader.SubmissionFileComment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCommentsRelationship("
                + value + "): was " + comments() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>comments</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCommentsRelationship( net.sf.webcat.grader.SubmissionFileComment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromCommentsRelationship("
                + value + "): was " + comments() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>comments</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.SubmissionFileComment createCommentsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createCommentsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "SubmissionFileComment" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "comments" );
        return (net.sf.webcat.grader.SubmissionFileComment)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity that is a member of the
     * <code>comments</code> relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void deleteCommentsRelationship( net.sf.webcat.grader.SubmissionFileComment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteCommentsRelationship("
                + value + "): was " + comments() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "comments" );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>comments</code> relationship.
     */
    public void deleteAllCommentsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllCommentsRelationships(): was "
                + comments() );
        }
        Enumeration objects = comments().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteCommentsRelationship(
                (net.sf.webcat.grader.SubmissionFileComment)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>graderPrefs</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray graderPrefs()
    {
        return (NSArray)storedValueForKey( "graderPrefs" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>graderPrefs</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setGraderPrefs( NSMutableArray value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGraderPrefs("
                + value + "): was " + graderPrefs() );
        }
        takeStoredValueForKey( value, "graderPrefs" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graderPrefs</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToGraderPrefsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToGraderPrefs( net.sf.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraderPrefs("
                + value + "): was " + graderPrefs() );
        }
        NSMutableArray array = (NSMutableArray)graderPrefs();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graderPrefs</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromGraderPrefsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraderPrefs( net.sf.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromGraderPrefs("
                + value + "): was " + graderPrefs() );
        }
        NSMutableArray array = (NSMutableArray)graderPrefs();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graderPrefs</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToGraderPrefsRelationship( net.sf.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraderPrefsRelationship("
                + value + "): was " + graderPrefs() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "graderPrefs" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graderPrefs</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraderPrefsRelationship( net.sf.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromGraderPrefsRelationship("
                + value + "): was " + graderPrefs() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graderPrefs" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>graderPrefs</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.GraderPrefs createGraderPrefsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createGraderPrefsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "GraderPrefs" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "graderPrefs" );
        return (net.sf.webcat.grader.GraderPrefs)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>graderPrefs</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteGraderPrefsRelationship( net.sf.webcat.grader.GraderPrefs value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteGraderPrefsRelationship("
                + value + "): was " + graderPrefs() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graderPrefs" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>graderPrefs</code> relationship.
     */
    public void deleteAllGraderPrefsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllGraderPrefsRelationships(): was "
                + graderPrefs() );
        }
        Enumeration objects = graderPrefs().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteGraderPrefsRelationship(
                (net.sf.webcat.grader.GraderPrefs)objects.nextElement() );
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( SubmissionFileStats.class );
}
