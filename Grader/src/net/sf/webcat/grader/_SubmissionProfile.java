/*==========================================================================*\
 |  _SubmissionProfile.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to SubmissionProfile.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.grader;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.Enumeration;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * SubmissionProfile.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _SubmissionProfile
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _SubmissionProfile object.
     */
    public _SubmissionProfile()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String AVAILABLE_POINTS_KEY = "availablePoints";
    public static final String AVAILABLE_TIME_DELTA_KEY = "availableTimeDelta";
    public static final String AWARD_EARLY_BONUS_KEY = "awardEarlyBonus";
    public static final String DEAD_TIME_DELTA_KEY = "deadTimeDelta";
    public static final String DEDUCT_LATE_PENALTY_KEY = "deductLatePenalty";
    public static final String EARLY_BONUS_MAX_PTS_KEY = "earlyBonusMaxPts";
    public static final String EARLY_BONUS_UNIT_PTS_KEY = "earlyBonusUnitPts";
    public static final String EARLY_BONUS_UNIT_TIME_KEY = "earlyBonusUnitTime";
    public static final String EXCLUDED_FILE_PATTERNS_KEY = "excludedFilePatterns";
    public static final String INCLUDED_FILE_PATTERNS_KEY = "includedFilePatterns";
    public static final String LATE_PENALTY_MAX_PTS_KEY = "latePenaltyMaxPts";
    public static final String LATE_PENALTY_UNIT_PTS_KEY = "latePenaltyUnitPts";
    public static final String LATE_PENALTY_UNIT_TIME_KEY = "latePenaltyUnitTime";
    public static final String MAX_FILE_UPLOAD_SIZE_KEY = "maxFileUploadSize";
    public static final String MAX_SUBMISSIONS_KEY = "maxSubmissions";
    public static final String NAME_KEY = "name";
    public static final String REQUIRED_FILE_PATTERNS_KEY = "requiredFilePatterns";
    public static final String SCORE_FORMAT_KEY = "scoreFormat";
    public static final String SUBMISSION_METHOD_KEY = "submissionMethod";
    public static final String TA_POINTS_KEY = "taPoints";
    public static final String TOOL_POINTS_KEY = "toolPoints";
    // To-one relationships ---
    public static final String AUTHOR_KEY = "author";
    // To-many relationships ---
    public static final String ASSIGNMENT_KEY = "assignment";
    public static final String COURSE_OFFERINGS_KEY = "courseOfferings";
    public static final String ENTITY_NAME = "SubmissionProfile";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>availablePoints</code> value.
     * @return the value of the attribute
     */
    public double availablePoints()
    {
        Number result =
            (Number)storedValueForKey( "availablePoints" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>availablePoints</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setAvailablePoints( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "availablePoints" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>availablePoints</code> value.
     * @return the value of the attribute
     */
    public Number availablePointsRaw()
    {
        return (Number)storedValueForKey( "availablePoints" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>availablePoints</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setAvailablePointsRaw( Number value )
    {
        takeStoredValueForKey( value, "availablePoints" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>availableTimeDelta</code> value.
     * @return the value of the attribute
     */
    public long availableTimeDelta()
    {
        Number result =
            (Number)storedValueForKey( "availableTimeDelta" );
        return ( result == null )
            ? 0L
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>availableTimeDelta</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setAvailableTimeDelta( long value )
    {
        Number actual =
            new Long( value );
        takeStoredValueForKey( actual, "availableTimeDelta" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>availableTimeDelta</code> value.
     * @return the value of the attribute
     */
    public Number availableTimeDeltaRaw()
    {
        return (Number)storedValueForKey( "availableTimeDelta" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>availableTimeDelta</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setAvailableTimeDeltaRaw( Number value )
    {
        takeStoredValueForKey( value, "availableTimeDelta" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>awardEarlyBonus</code> value.
     * @return the value of the attribute
     */
    public boolean awardEarlyBonus()
    {
        Number result =
            (Number)storedValueForKey( "awardEarlyBonus" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>awardEarlyBonus</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setAwardEarlyBonus( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "awardEarlyBonus" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>awardEarlyBonus</code> value.
     * @return the value of the attribute
     */
    public Number awardEarlyBonusRaw()
    {
        return (Number)storedValueForKey( "awardEarlyBonus" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>awardEarlyBonus</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setAwardEarlyBonusRaw( Number value )
    {
        takeStoredValueForKey( value, "awardEarlyBonus" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>deadTimeDelta</code> value.
     * @return the value of the attribute
     */
    public long deadTimeDelta()
    {
        Number result =
            (Number)storedValueForKey( "deadTimeDelta" );
        return ( result == null )
            ? 0L
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>deadTimeDelta</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDeadTimeDelta( long value )
    {
        Number actual =
            new Long( value );
        takeStoredValueForKey( actual, "deadTimeDelta" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>deadTimeDelta</code> value.
     * @return the value of the attribute
     */
    public Number deadTimeDeltaRaw()
    {
        return (Number)storedValueForKey( "deadTimeDelta" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>deadTimeDelta</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDeadTimeDeltaRaw( Number value )
    {
        takeStoredValueForKey( value, "deadTimeDelta" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>deductLatePenalty</code> value.
     * @return the value of the attribute
     */
    public boolean deductLatePenalty()
    {
        Number result =
            (Number)storedValueForKey( "deductLatePenalty" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>deductLatePenalty</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDeductLatePenalty( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "deductLatePenalty" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>deductLatePenalty</code> value.
     * @return the value of the attribute
     */
    public Number deductLatePenaltyRaw()
    {
        return (Number)storedValueForKey( "deductLatePenalty" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>deductLatePenalty</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDeductLatePenaltyRaw( Number value )
    {
        takeStoredValueForKey( value, "deductLatePenalty" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>earlyBonusMaxPts</code> value.
     * @return the value of the attribute
     */
    public double earlyBonusMaxPts()
    {
        Number result =
            (Number)storedValueForKey( "earlyBonusMaxPts" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>earlyBonusMaxPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setEarlyBonusMaxPts( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "earlyBonusMaxPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>earlyBonusMaxPts</code> value.
     * @return the value of the attribute
     */
    public Number earlyBonusMaxPtsRaw()
    {
        return (Number)storedValueForKey( "earlyBonusMaxPts" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>earlyBonusMaxPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setEarlyBonusMaxPtsRaw( Number value )
    {
        takeStoredValueForKey( value, "earlyBonusMaxPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>earlyBonusUnitPts</code> value.
     * @return the value of the attribute
     */
    public double earlyBonusUnitPts()
    {
        Number result =
            (Number)storedValueForKey( "earlyBonusUnitPts" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>earlyBonusUnitPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setEarlyBonusUnitPts( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "earlyBonusUnitPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>earlyBonusUnitPts</code> value.
     * @return the value of the attribute
     */
    public Number earlyBonusUnitPtsRaw()
    {
        return (Number)storedValueForKey( "earlyBonusUnitPts" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>earlyBonusUnitPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setEarlyBonusUnitPtsRaw( Number value )
    {
        takeStoredValueForKey( value, "earlyBonusUnitPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>earlyBonusUnitTime</code> value.
     * @return the value of the attribute
     */
    public long earlyBonusUnitTime()
    {
        Number result =
            (Number)storedValueForKey( "earlyBonusUnitTime" );
        return ( result == null )
            ? 0L
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>earlyBonusUnitTime</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setEarlyBonusUnitTime( long value )
    {
        Number actual =
            new Long( value );
        takeStoredValueForKey( actual, "earlyBonusUnitTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>earlyBonusUnitTime</code> value.
     * @return the value of the attribute
     */
    public Number earlyBonusUnitTimeRaw()
    {
        return (Number)storedValueForKey( "earlyBonusUnitTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>earlyBonusUnitTime</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setEarlyBonusUnitTimeRaw( Number value )
    {
        takeStoredValueForKey( value, "earlyBonusUnitTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>excludedFilePatterns</code> value.
     * @return the value of the attribute
     */
    public String excludedFilePatterns()
    {
        return (String)storedValueForKey( "excludedFilePatterns" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>excludedFilePatterns</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setExcludedFilePatterns( String value )
    {
        takeStoredValueForKey( value, "excludedFilePatterns" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>includedFilePatterns</code> value.
     * @return the value of the attribute
     */
    public String includedFilePatterns()
    {
        return (String)storedValueForKey( "includedFilePatterns" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>includedFilePatterns</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setIncludedFilePatterns( String value )
    {
        takeStoredValueForKey( value, "includedFilePatterns" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>latePenaltyMaxPts</code> value.
     * @return the value of the attribute
     */
    public double latePenaltyMaxPts()
    {
        Number result =
            (Number)storedValueForKey( "latePenaltyMaxPts" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>latePenaltyMaxPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setLatePenaltyMaxPts( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "latePenaltyMaxPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>latePenaltyMaxPts</code> value.
     * @return the value of the attribute
     */
    public Number latePenaltyMaxPtsRaw()
    {
        return (Number)storedValueForKey( "latePenaltyMaxPts" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>latePenaltyMaxPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setLatePenaltyMaxPtsRaw( Number value )
    {
        takeStoredValueForKey( value, "latePenaltyMaxPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>latePenaltyUnitPts</code> value.
     * @return the value of the attribute
     */
    public double latePenaltyUnitPts()
    {
        Number result =
            (Number)storedValueForKey( "latePenaltyUnitPts" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>latePenaltyUnitPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setLatePenaltyUnitPts( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "latePenaltyUnitPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>latePenaltyUnitPts</code> value.
     * @return the value of the attribute
     */
    public Number latePenaltyUnitPtsRaw()
    {
        return (Number)storedValueForKey( "latePenaltyUnitPts" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>latePenaltyUnitPts</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setLatePenaltyUnitPtsRaw( Number value )
    {
        takeStoredValueForKey( value, "latePenaltyUnitPts" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>latePenaltyUnitTime</code> value.
     * @return the value of the attribute
     */
    public long latePenaltyUnitTime()
    {
        Number result =
            (Number)storedValueForKey( "latePenaltyUnitTime" );
        return ( result == null )
            ? 0L
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>latePenaltyUnitTime</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setLatePenaltyUnitTime( long value )
    {
        Number actual =
            new Long( value );
        takeStoredValueForKey( actual, "latePenaltyUnitTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>latePenaltyUnitTime</code> value.
     * @return the value of the attribute
     */
    public Number latePenaltyUnitTimeRaw()
    {
        return (Number)storedValueForKey( "latePenaltyUnitTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>latePenaltyUnitTime</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setLatePenaltyUnitTimeRaw( Number value )
    {
        takeStoredValueForKey( value, "latePenaltyUnitTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>maxFileUploadSize</code> value.
     * @return the value of the attribute
     */
    public long maxFileUploadSize()
    {
        Number result =
            (Number)storedValueForKey( "maxFileUploadSize" );
        return ( result == null )
            ? 0L
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>maxFileUploadSize</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setMaxFileUploadSize( long value )
    {
        Number actual =
            new Long( value );
        takeStoredValueForKey( actual, "maxFileUploadSize" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>maxFileUploadSize</code> value.
     * @return the value of the attribute
     */
    public Number maxFileUploadSizeRaw()
    {
        return (Number)storedValueForKey( "maxFileUploadSize" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>maxFileUploadSize</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setMaxFileUploadSizeRaw( Number value )
    {
        takeStoredValueForKey( value, "maxFileUploadSize" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>maxSubmissions</code> value.
     * @return the value of the attribute
     */
    public int maxSubmissions()
    {
        Number result =
            (Number)storedValueForKey( "maxSubmissions" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>maxSubmissions</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setMaxSubmissions( int value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        takeStoredValueForKey( actual, "maxSubmissions" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>maxSubmissions</code> value.
     * @return the value of the attribute
     */
    public Number maxSubmissionsRaw()
    {
        return (Number)storedValueForKey( "maxSubmissions" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>maxSubmissions</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setMaxSubmissionsRaw( Number value )
    {
        takeStoredValueForKey( value, "maxSubmissions" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>name</code> value.
     * @return the value of the attribute
     */
    public String name()
    {
        return (String)storedValueForKey( "name" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>name</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setName( String value )
    {
        takeStoredValueForKey( value, "name" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>requiredFilePatterns</code> value.
     * @return the value of the attribute
     */
    public String requiredFilePatterns()
    {
        return (String)storedValueForKey( "requiredFilePatterns" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>requiredFilePatterns</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setRequiredFilePatterns( String value )
    {
        takeStoredValueForKey( value, "requiredFilePatterns" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>scoreFormat</code> value.
     * @return the value of the attribute
     */
    public String scoreFormat()
    {
        return (String)storedValueForKey( "scoreFormat" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>scoreFormat</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setScoreFormat( String value )
    {
        takeStoredValueForKey( value, "scoreFormat" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>submissionMethod</code> value.
     * @return the value of the attribute
     */
    public byte submissionMethod()
    {
        Number result =
            (Number)storedValueForKey( "submissionMethod" );
        return ( result == null )
            ? 0
            : result.byteValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>submissionMethod</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setSubmissionMethod( byte value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        takeStoredValueForKey( actual, "submissionMethod" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>submissionMethod</code> value.
     * @return the value of the attribute
     */
    public Number submissionMethodRaw()
    {
        return (Number)storedValueForKey( "submissionMethod" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>submissionMethod</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setSubmissionMethodRaw( Number value )
    {
        takeStoredValueForKey( value, "submissionMethod" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>taPoints</code> value.
     * @return the value of the attribute
     */
    public double taPoints()
    {
        Number result =
            (Number)storedValueForKey( "taPoints" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>taPoints</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setTaPoints( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "taPoints" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>taPoints</code> value.
     * @return the value of the attribute
     */
    public Number taPointsRaw()
    {
        return (Number)storedValueForKey( "taPoints" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>taPoints</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setTaPointsRaw( Number value )
    {
        takeStoredValueForKey( value, "taPoints" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>toolPoints</code> value.
     * @return the value of the attribute
     */
    public double toolPoints()
    {
        Number result =
            (Number)storedValueForKey( "toolPoints" );
        return ( result == null )
            ? 0.0
            : result.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>toolPoints</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setToolPoints( double value )
    {
        Number actual =
            new Double( value );
        takeStoredValueForKey( actual, "toolPoints" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>toolPoints</code> value.
     * @return the value of the attribute
     */
    public Number toolPointsRaw()
    {
        return (Number)storedValueForKey( "toolPoints" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>toolPoints</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setToolPointsRaw( Number value )
    {
        takeStoredValueForKey( value, "toolPoints" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>Course</code>
     * fetch specification.
     * 
     * @param context The editing context to use
     * @param courseBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForCourse(
            EOEditingContext context,
            net.sf.webcat.core.Course courseBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "course", "SubmissionProfile" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( courseBinding != null )
            bindings.setObjectForKey( courseBinding,
                                      "course" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>User</code>
     * fetch specification.
     * 
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForUser(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "user", "SubmissionProfile" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( userBinding != null )
            bindings.setObjectForKey( userBinding,
                                      "user" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>author</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User author()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "author" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAuthorRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void setAuthor( net.sf.webcat.core.User value )
    {
        takeStoredValueForKey( value, "author" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     * 
     * @param value The new entity to relate to
     */
    public void setAuthorRelationship(
        net.sf.webcat.core.User value )
    {
        if ( value == null )
        {
            net.sf.webcat.core.User object = author();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "author" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "author" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>assignment</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray assignment()
    {
        return (NSArray)storedValueForKey( "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>assignment</code> relationship.
     * 
     * @param value The new set of entities to relate to
     */
    public void setAssignment( NSMutableArray value )
    {
        takeStoredValueForKey( value, "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>assignment</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToAssignmentRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void addToAssignment( net.sf.webcat.grader.Assignment value )
    {
        NSMutableArray array = (NSMutableArray)assignment();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>assignment</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromAssignmentRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The entity to remove from the relationship
     */
    public void removeFromAssignment( net.sf.webcat.grader.Assignment value )
    {
        NSMutableArray array = (NSMutableArray)assignment();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>assignment</code>
     * relationship.
     * 
     * @param value The new entity to relate to
     */
    public void addToAssignmentRelationship( net.sf.webcat.grader.Assignment value )
    {
        addObjectToBothSidesOfRelationshipWithKey(
            value, "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>assignment</code>
     * relationship.
     * 
     * @param value The entity to remove from the relationship
     */
    public void removeFromAssignmentRelationship( net.sf.webcat.grader.Assignment value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>assignment</code> relationship.
     * 
     * @return The new entity
     */
    public net.sf.webcat.grader.Assignment createAssignmentRelationship()
    {
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "Assignment" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "assignment" );
        return (net.sf.webcat.grader.Assignment)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>assignment</code> relationship.
     * 
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteAssignmentRelationship( net.sf.webcat.grader.Assignment value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "assignment" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>assignment</code> relationship.
     */
    public void deleteAllAssignmentRelationships()
    {
        Enumeration objects = assignment().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteAssignmentRelationship(
                (net.sf.webcat.grader.Assignment)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>courseOfferings</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray courseOfferings()
    {
        return (NSArray)storedValueForKey( "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>courseOfferings</code> relationship.
     * 
     * @param value The new set of entities to relate to
     */
    public void setCourseOfferings( NSMutableArray value )
    {
        takeStoredValueForKey( value, "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>courseOfferings</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToCourseOfferingsRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void addToCourseOfferings( net.sf.webcat.core.CourseOffering value )
    {
        NSMutableArray array = (NSMutableArray)courseOfferings();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>courseOfferings</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromCourseOfferingsRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The entity to remove from the relationship
     */
    public void removeFromCourseOfferings( net.sf.webcat.core.CourseOffering value )
    {
        NSMutableArray array = (NSMutableArray)courseOfferings();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>courseOfferings</code>
     * relationship.
     * 
     * @param value The new entity to relate to
     */
    public void addToCourseOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        addObjectToBothSidesOfRelationshipWithKey(
            value, "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>courseOfferings</code>
     * relationship.
     * 
     * @param value The entity to remove from the relationship
     */
    public void removeFromCourseOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "courseOfferings" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>courseOfferings</code> relationship.
     * 
     * @return The new entity
     */
    public net.sf.webcat.core.CourseOffering createCourseOfferingsRelationship()
    {
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CourseOffering" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "courseOfferings" );
        return (net.sf.webcat.core.CourseOffering)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>courseOfferings</code> relationship.
     * 
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteCourseOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "courseOfferings" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>courseOfferings</code> relationship.
     */
    public void deleteAllCourseOfferingsRelationships()
    {
        Enumeration objects = courseOfferings().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteCourseOfferingsRelationship(
                (net.sf.webcat.core.CourseOffering)objects.nextElement() );
    }


}
