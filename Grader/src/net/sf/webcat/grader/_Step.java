/*==========================================================================*\
 |  _Step.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to Step.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.grader;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * Step.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _Step
    extends er.extensions.ERXGenericRecord
    implements net.sf.webcat.core.MutableContainer.MutableContainerOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _Step object.
     */
    public _Step()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _Step object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param updateMutableFields
     * @return The newly created object
     */
    public static Step create(
        EOEditingContext editingContext,
        boolean updateMutableFields
        )
    {
        Step eoObject = (Step)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _Step.ENTITY_NAME);
        eoObject.setUpdateMutableFields(updateMutableFields);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static Step localInstance(
        EOEditingContext editingContext, Step eo)
    {
        return (eo == null)
            ? null
            : (Step)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Step forId(
        EOEditingContext ec, int id )
    {
        Step obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (Step)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Step forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String CONFIG_SETTINGS_KEY = "configSettings";
    public static final String ORDER_KEY = "order";
    public static final String TIMEOUT_KEY = "timeout";
    public static final String UPDATE_MUTABLE_FIELDS_KEY = "updateMutableFields";
    // To-one relationships ---
    public static final String ASSIGNMENT_KEY = "assignment";
    public static final String CONFIG_KEY = "config";
    public static final String SCRIPT_KEY = "script";
    // To-many relationships ---
    // Fetch specifications ---
    public static final String ENTITY_NAME = "Step";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public Step localInstance(EOEditingContext editingContext)
    {
        return (Step)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.ERXConstant.ZeroInteger;
        }
    }

    //-- Local mutable cache --
    private net.sf.webcat.core.MutableDictionary configSettingsCache;
    private NSData configSettingsRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>configSettings</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.core.MutableDictionary configSettings()
    {
    	NSData dbValue =
            (NSData)storedValueForKey( "configSettings" );
        if ( configSettingsRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( configSettingsRawCache ) )
            {
                // They are still equal, so just update the raw cache
                configSettingsRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                configSettingsRawCache = dbValue;
                net.sf.webcat.core.MutableDictionary newValue =
                    net.sf.webcat.core.MutableDictionary
                    .objectWithArchiveData( dbValue );
                if ( configSettingsCache != null )
                {
                    configSettingsCache.copyFrom( newValue );
                }
                else
                {
                    configSettingsCache = newValue;
                }
                configSettingsCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && configSettingsCache == null )
        {
            configSettingsCache =
                net.sf.webcat.core.MutableDictionary
                .objectWithArchiveData( dbValue );
             configSettingsCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return configSettingsCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>configSettings</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setConfigSettings( net.sf.webcat.core.MutableDictionary value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConfigSettings("
                + value + ")" );
        }
        if ( configSettingsCache == null )
        {
            configSettingsCache = value;
            value.setHasChanged( false );
            configSettingsRawCache = value.archiveData();
            takeStoredValueForKey( configSettingsRawCache, "configSettings" );
        }
        else if ( configSettingsCache != value )  // ( configSettingsCache != null )
        {
            configSettingsCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( configSettingsCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>configSettings</code>
     * property.
     */
    public void clearConfigSettings()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "clearConfigSettings()" );
        }
        takeStoredValueForKey( null, "configSettings" );
        configSettingsRawCache = null;
        configSettingsCache = null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>order</code> value.
     * @return the value of the attribute
     */
    public int order()
    {
        Number result =
            (Number)storedValueForKey( "order" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>order</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setOrder( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setOrder("
                + value + "): was " + order() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setOrderRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>order</code> value.
     * @return the value of the attribute
     */
    public Number orderRaw()
    {
        return (Number)storedValueForKey( "order" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>order</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setOrderRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setOrderRaw("
                + value + "): was " + orderRaw() );
        }
        takeStoredValueForKey( value, "order" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>timeout</code> value.
     * @return the value of the attribute
     */
    public int timeout()
    {
        Number result =
            (Number)storedValueForKey( "timeout" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>timeout</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setTimeout( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTimeout("
                + value + "): was " + timeout() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        setTimeoutRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>timeout</code> value.
     * @return the value of the attribute
     */
    public Number timeoutRaw()
    {
        return (Number)storedValueForKey( "timeout" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>timeout</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setTimeoutRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTimeoutRaw("
                + value + "): was " + timeoutRaw() );
        }
        takeStoredValueForKey( value, "timeout" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public boolean updateMutableFields()
    {
        Number result =
            (Number)storedValueForKey( "updateMutableFields" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFields( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFields("
                + value + "): was " + updateMutableFields() );
        }
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        setUpdateMutableFieldsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public Number updateMutableFieldsRaw()
    {
        return (Number)storedValueForKey( "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFieldsRaw( Number value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFieldsRaw("
                + value + "): was " + updateMutableFieldsRaw() );
        }
        takeStoredValueForKey( value, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void saveMutables()
    {
        log.debug("saveMutables()");
        if ( configSettingsCache != null
            && configSettingsCache.hasChanged() )
        {
            configSettingsRawCache = configSettingsCache.archiveData();
            takeStoredValueForKey( configSettingsRawCache, "configSettings" );
            configSettingsCache.setHasChanged( false );
        }

        setUpdateMutableFields( false );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void willUpdate()
    {
        log.debug("willUpdate()");
        saveMutables();
        super.willUpdate();
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is inserted into the database.
     */
    public void willInsert()
    {
        log.debug("willInsert()");
        saveMutables();
        super.willInsert();
    }


    // ----------------------------------------------------------
    /**
     * Called when the object is invalidated.
     */
    public void flushCaches()
    {
        log.debug("flushCaches()");
        configSettingsCache = null;
        configSettingsRawCache  = null;
        setUpdateMutableFields( false );
        super.flushCaches();
    }


    // ----------------------------------------------------------
    /**
     * Called when an owned mutable container object is changed.
     */
    public void mutableContainerHasChanged()
    {
        setUpdateMutableFields( true );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>assignment</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.grader.Assignment assignment()
    {
        return (net.sf.webcat.grader.Assignment)storedValueForKey( "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>assignment</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAssignmentRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setAssignment( net.sf.webcat.grader.Assignment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAssignment("
                + value + "): was " + assignment() );
        }
        takeStoredValueForKey( value, "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>assignment</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setAssignmentRelationship(
        net.sf.webcat.grader.Assignment value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAssignmentRelationship("
                + value + "): was " + assignment() );
        }
        if ( value == null )
        {
            net.sf.webcat.grader.Assignment object = assignment();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "assignment" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "assignment" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>config</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.grader.StepConfig config()
    {
        return (net.sf.webcat.grader.StepConfig)storedValueForKey( "config" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>config</code>
     * relationship (DO NOT USE--instead, use
     * <code>setConfigRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setConfig( net.sf.webcat.grader.StepConfig value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConfig("
                + value + "): was " + config() );
        }
        takeStoredValueForKey( value, "config" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>config</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setConfigRelationship(
        net.sf.webcat.grader.StepConfig value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setConfigRelationship("
                + value + "): was " + config() );
        }
        if ( value == null )
        {
            net.sf.webcat.grader.StepConfig object = config();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "config" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "config" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>script</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.grader.ScriptFile script()
    {
        return (net.sf.webcat.grader.ScriptFile)storedValueForKey( "script" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>script</code>
     * relationship (DO NOT USE--instead, use
     * <code>setScriptRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setScript( net.sf.webcat.grader.ScriptFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setScript("
                + value + "): was " + script() );
        }
        takeStoredValueForKey( value, "script" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>script</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setScriptRelationship(
        net.sf.webcat.grader.ScriptFile value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setScriptRelationship("
                + value + "): was " + script() );
        }
        if ( value == null )
        {
            net.sf.webcat.grader.ScriptFile object = script();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "script" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "script" );
        }
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( Step.class );
}
