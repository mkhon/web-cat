/*==========================================================================*\
 |  _AssignmentOffering.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to AssignmentOffering.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.grader;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.Enumeration;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * AssignmentOffering.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _AssignmentOffering
    extends er.extensions.ERXGenericRecord
    implements net.sf.webcat.core.MutableContainer.MutableContainerOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _AssignmentOffering object.
     */
    public _AssignmentOffering()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String DUE_DATE_KEY = "dueDate";
    public static final String GRADING_SUSPENDED_KEY = "gradingSuspended";
    public static final String GRAPH_SUMMARY_KEY = "graphSummary";
    public static final String MOODLE_ID_KEY = "moodleId";
    public static final String PUBLISH_KEY = "publish";
    public static final String UPDATE_MUTABLE_FIELDS_KEY = "updateMutableFields";
    // To-one relationships ---
    public static final String ASSIGNMENT_KEY = "assignment";
    public static final String COURSE_OFFERING_KEY = "courseOffering";
    // To-many relationships ---
    public static final String SUBMISSIONS_KEY = "submissions";
    // Fetch specifications ---
    public static final String ALL_OFFERINGS_FSPEC = "allOfferings";
    public static final String COURSE_OFFERING_FSPEC = "courseOffering";
    public static final String STAFF_FSPEC = "staff";
    public static final String STUDENT_FSPEC = "student";
    public static final String SUBMITTER_ENGINE_BASE_FSPEC = "submitterEngineBase";
    public static final String ENTITY_NAME = "AssignmentOffering";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>dueDate</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp dueDate()
    {
        return (NSTimestamp)storedValueForKey( "dueDate" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>dueDate</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDueDate( NSTimestamp value )
    {
        takeStoredValueForKey( value, "dueDate" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>gradingSuspended</code> value.
     * @return the value of the attribute
     */
    public boolean gradingSuspended()
    {
        Number result =
            (Number)storedValueForKey( "gradingSuspended" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>gradingSuspended</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setGradingSuspended( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "gradingSuspended" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>gradingSuspended</code> value.
     * @return the value of the attribute
     */
    public Number gradingSuspendedRaw()
    {
        return (Number)storedValueForKey( "gradingSuspended" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>gradingSuspended</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setGradingSuspendedRaw( Number value )
    {
        takeStoredValueForKey( value, "gradingSuspended" );
    }


    //-- Local mutable cache --
    private net.sf.webcat.grader.graphs.AssignmentSummary graphSummaryCache;
    private NSData graphSummaryRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>graphSummary</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.grader.graphs.AssignmentSummary graphSummary()
    {
    	NSData dbValue =
            (NSData)storedValueForKey( "graphSummary" );
        if ( graphSummaryRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( graphSummaryRawCache ) )
            {
                // They are still equal, so just update the raw cache
                graphSummaryRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                graphSummaryRawCache = dbValue;
                net.sf.webcat.grader.graphs.AssignmentSummary newValue =
                    net.sf.webcat.grader.graphs.AssignmentSummary
                    .objectWithArchiveData( dbValue );
                if ( graphSummaryCache != null )
                {
                    graphSummaryCache.copyFrom( newValue );
                }
                else
                {
                    graphSummaryCache = newValue;
                }
                graphSummaryCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && graphSummaryCache == null )
        {
            graphSummaryCache =
                net.sf.webcat.grader.graphs.AssignmentSummary
                .objectWithArchiveData( dbValue );
             graphSummaryCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return graphSummaryCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>graphSummary</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setGraphSummary( net.sf.webcat.grader.graphs.AssignmentSummary value )
    {
        if ( graphSummaryCache == null )
        {
            graphSummaryCache = value;
            value.setHasChanged( false );
            graphSummaryRawCache = value.archiveData();
            takeStoredValueForKey( graphSummaryRawCache, "graphSummary" );
        }
        else if ( graphSummaryCache != value )  // ( graphSummaryCache != null )
        {
            graphSummaryCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( graphSummaryCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>graphSummary</code>
     * property.
     */
    public void clearGraphSummary()
    {
        takeStoredValueForKey( null, "graphSummary" );
        graphSummaryRawCache = null;
        graphSummaryCache = null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>moodleId</code> value.
     * @return the value of the attribute
     */
    public Number moodleId()
    {
        return (Number)storedValueForKey( "moodleId" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>moodleId</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMoodleId( Number value )
    {
        takeStoredValueForKey( value, "moodleId" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>publish</code> value.
     * @return the value of the attribute
     */
    public boolean publish()
    {
        Number result =
            (Number)storedValueForKey( "publish" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>publish</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPublish( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "publish" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>publish</code> value.
     * @return the value of the attribute
     */
    public Number publishRaw()
    {
        return (Number)storedValueForKey( "publish" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>publish</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPublishRaw( Number value )
    {
        takeStoredValueForKey( value, "publish" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public boolean updateMutableFields()
    {
        Number result =
            (Number)storedValueForKey( "updateMutableFields" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFields( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public Number updateMutableFieldsRaw()
    {
        return (Number)storedValueForKey( "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFieldsRaw( Number value )
    {
        takeStoredValueForKey( value, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void saveMutables()
    {
        if ( graphSummaryCache != null
            && graphSummaryCache.hasChanged() )
        {
            graphSummaryRawCache = graphSummaryCache.archiveData();
            takeStoredValueForKey( graphSummaryRawCache, "graphSummary" );
            graphSummaryCache.setHasChanged( false );
        }

        setUpdateMutableFields( false );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void willUpdate()
    {
        saveMutables();
        super.willUpdate();
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is inserted into the database.
     */
    public void willInsert()
    {
        saveMutables();
        super.willInsert();
    }


    // ----------------------------------------------------------
    /**
     * Called when the object is invalidated.
     */
    public void flushCaches()
    {
        graphSummaryCache = null;
        graphSummaryRawCache  = null;
        setUpdateMutableFields( false );
        super.flushCaches();
    }


    // ----------------------------------------------------------
    /**
     * Called when an owned mutable container object is changed.
     */
    public void mutableContainerHasChanged()
    {
        setUpdateMutableFields( true );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>AllOfferings</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForAllOfferings(
            EOEditingContext context
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "allOfferings", "AssignmentOffering" );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>CourseOffering</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param courseOfferingBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForCourseOffering(
            EOEditingContext context,
            net.sf.webcat.core.CourseOffering courseOfferingBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "courseOffering", "AssignmentOffering" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( courseOfferingBinding != null )
            bindings.setObjectForKey( courseOfferingBinding,
                                      "courseOffering" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>Staff</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForStaff(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "staff", "AssignmentOffering" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( userBinding != null )
            bindings.setObjectForKey( userBinding,
                                      "user" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>Student</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForStudent(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "student", "AssignmentOffering" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( userBinding != null )
            bindings.setObjectForKey( userBinding,
                                      "user" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>SubmitterEngineBase</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForSubmitterEngineBase(
            EOEditingContext context
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "submitterEngineBase", "AssignmentOffering" );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>assignment</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.grader.Assignment assignment()
    {
        return (net.sf.webcat.grader.Assignment)storedValueForKey( "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAssignmentRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setAssignment( net.sf.webcat.grader.Assignment value )
    {
        takeStoredValueForKey( value, "assignment" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setAssignmentRelationship(
        net.sf.webcat.grader.Assignment value )
    {
        if ( value == null )
        {
            net.sf.webcat.grader.Assignment object = assignment();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "assignment" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "assignment" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>courseOffering</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.CourseOffering courseOffering()
    {
        return (net.sf.webcat.core.CourseOffering)storedValueForKey( "courseOffering" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setCourseOfferingRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setCourseOffering( net.sf.webcat.core.CourseOffering value )
    {
        takeStoredValueForKey( value, "courseOffering" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setCourseOfferingRelationship(
        net.sf.webcat.core.CourseOffering value )
    {
        if ( value == null )
        {
            net.sf.webcat.core.CourseOffering object = courseOffering();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "courseOffering" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "courseOffering" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>submissions</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray submissions()
    {
        return (NSArray)storedValueForKey( "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>submissions</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setSubmissions( NSMutableArray value )
    {
        takeStoredValueForKey( value, "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>submissions</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToSubmissionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToSubmissions( net.sf.webcat.grader.Submission value )
    {
        NSMutableArray array = (NSMutableArray)submissions();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>submissions</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromSubmissionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSubmissions( net.sf.webcat.grader.Submission value )
    {
        NSMutableArray array = (NSMutableArray)submissions();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>submissions</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToSubmissionsRelationship( net.sf.webcat.grader.Submission value )
    {
        addObjectToBothSidesOfRelationshipWithKey(
            value, "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>submissions</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromSubmissionsRelationship( net.sf.webcat.grader.Submission value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "submissions" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>submissions</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.grader.Submission createSubmissionsRelationship()
    {
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "Submission" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "submissions" );
        return (net.sf.webcat.grader.Submission)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>submissions</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteSubmissionsRelationship( net.sf.webcat.grader.Submission value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "submissions" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>submissions</code> relationship.
     */
    public void deleteAllSubmissionsRelationships()
    {
        Enumeration objects = submissions().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteSubmissionsRelationship(
                (net.sf.webcat.grader.Submission)objects.nextElement() );
    }


}
