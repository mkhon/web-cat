/*==========================================================================*\
 |  _CourseOffering.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to CourseOffering.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2008 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.core;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * CourseOffering.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _CourseOffering
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _CourseOffering object.
     */
    public _CourseOffering()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _CourseOffering object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @return The newly created object
     */
    public static CourseOffering create(
        EOEditingContext editingContext
        )
    {
        CourseOffering eoObject = (CourseOffering)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _CourseOffering.ENTITY_NAME);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static CourseOffering localInstance(
        EOEditingContext editingContext, CourseOffering eo)
    {
        return (eo == null)
            ? null
            : (CourseOffering)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static CourseOffering forId(
        EOEditingContext ec, int id )
    {
        CourseOffering obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (CourseOffering)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static CourseOffering forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String CRN_KEY = "crn";
    public static final String LABEL_KEY = "label";
    public static final String MOODLE_GROUP_ID_KEY = "moodleGroupId";
    public static final String MOODLE_ID_KEY = "moodleId";
    public static final String URL_KEY = "url";
    // To-one relationships ---
    public static final String COURSE_KEY = "course";
    public static final String SEMESTER_KEY = "semester";
    // To-many relationships ---
    public static final String CORE_SELECTIONS_KEY = "coreSelections";
    public static final String GRADERS_KEY = "graders";
    public static final String INSTRUCTORS_KEY = "instructors";
    public static final String STUDENTS_KEY = "students";
    // Fetch specifications ---
    public static final String FOR_SEMESTER_FSPEC = "forSemester";
    public static final String WITHOUT_ANY_RELATIONSHIP_TO_USER_FSPEC = "withoutAnyRelationshipToUser";
    public static final String WITHOUT_STUDENT_FSPEC = "withoutStudent";
    public static final String WITHOUT_STUDENT_OR_GRADER_FSPEC = "withoutStudentOrGrader";
    public static final String WITHOUT_USER_AS_STAFF_FSPEC = "withoutUserAsStaff";
    public static final String ENTITY_NAME = "CourseOffering";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public CourseOffering localInstance(EOEditingContext editingContext)
    {
        return (CourseOffering)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>crn</code> value.
     * @return the value of the attribute
     */
    public String crn()
    {
        return (String)storedValueForKey( "crn" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>crn</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setCrn( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCrn("
                + value + "): was " + crn() );
        }
        takeStoredValueForKey( value, "crn" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>label</code> value.
     * @return the value of the attribute
     */
    public String label()
    {
        return (String)storedValueForKey( "label" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>label</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLabel( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLabel("
                + value + "): was " + label() );
        }
        takeStoredValueForKey( value, "label" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>moodleGroupId</code> value.
     * @return the value of the attribute
     */
    public Long moodleGroupId()
    {
        return (Long)storedValueForKey( "moodleGroupId" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>moodleGroupId</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMoodleGroupId( Long value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMoodleGroupId("
                + value + "): was " + moodleGroupId() );
        }
        takeStoredValueForKey( value, "moodleGroupId" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>moodleId</code> value.
     * @return the value of the attribute
     */
    public Long moodleId()
    {
        return (Long)storedValueForKey( "moodleId" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>moodleId</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setMoodleId( Long value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setMoodleId("
                + value + "): was " + moodleId() );
        }
        takeStoredValueForKey( value, "moodleId" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>url</code> value.
     * @return the value of the attribute
     */
    public String url()
    {
        return (String)storedValueForKey( "url" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>url</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUrl( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUrl("
                + value + "): was " + url() );
        }
        takeStoredValueForKey( value, "url" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>course</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.Course course()
    {
        return (net.sf.webcat.core.Course)storedValueForKey( "course" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>course</code>
     * relationship (DO NOT USE--instead, use
     * <code>setCourseRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setCourse( net.sf.webcat.core.Course value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCourse("
                + value + "): was " + course() );
        }
        takeStoredValueForKey( value, "course" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>course</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setCourseRelationship(
        net.sf.webcat.core.Course value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCourseRelationship("
                + value + "): was " + course() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.Course object = course();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "course" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "course" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>semester</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.Semester semester()
    {
        return (net.sf.webcat.core.Semester)storedValueForKey( "semester" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>semester</code>
     * relationship (DO NOT USE--instead, use
     * <code>setSemesterRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setSemester( net.sf.webcat.core.Semester value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSemester("
                + value + "): was " + semester() );
        }
        takeStoredValueForKey( value, "semester" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>semester</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setSemesterRelationship(
        net.sf.webcat.core.Semester value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSemesterRelationship("
                + value + "): was " + semester() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.Semester object = semester();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "semester" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "semester" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>coreSelections</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.CoreSelections> coreSelections()
    {
        return (NSArray)storedValueForKey( "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>coreSelections</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setCoreSelections( NSMutableArray<net.sf.webcat.core.CoreSelections>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCoreSelections("
                + value + "): was " + coreSelections() );
        }
        takeStoredValueForKey( value, "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>coreSelections</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToCoreSelectionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToCoreSelections( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCoreSelections("
                + value + "): was " + coreSelections() );
        }
        NSMutableArray<net.sf.webcat.core.CoreSelections> array =
            (NSMutableArray<net.sf.webcat.core.CoreSelections>)coreSelections();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>coreSelections</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromCoreSelectionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCoreSelections( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromCoreSelections("
                + value + "): was " + coreSelections() );
        }
        NSMutableArray<net.sf.webcat.core.CoreSelections> array =
            (NSMutableArray<net.sf.webcat.core.CoreSelections>)coreSelections();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>coreSelections</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToCoreSelectionsRelationship( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCoreSelectionsRelationship("
                + value + "): was " + coreSelections() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>coreSelections</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCoreSelectionsRelationship( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromCoreSelectionsRelationship("
                + value + "): was " + coreSelections() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>coreSelections</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.CoreSelections createCoreSelectionsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createCoreSelectionsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CoreSelections" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "coreSelections" );
        return (net.sf.webcat.core.CoreSelections)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>coreSelections</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteCoreSelectionsRelationship( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteCoreSelectionsRelationship("
                + value + "): was " + coreSelections() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "coreSelections" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>coreSelections</code> relationship.
     */
    public void deleteAllCoreSelectionsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllCoreSelectionsRelationships(): was "
                + coreSelections() );
        }
        Enumeration objects = coreSelections().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteCoreSelectionsRelationship(
                (net.sf.webcat.core.CoreSelections)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>graders</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.User> graders()
    {
        return (NSArray)storedValueForKey( "graders" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>graders</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setGraders( NSMutableArray<net.sf.webcat.core.User>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGraders("
                + value + "): was " + graders() );
        }
        takeStoredValueForKey( value, "graders" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graders</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToGradersRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToGraders( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraders("
                + value + "): was " + graders() );
        }
        NSMutableArray<net.sf.webcat.core.User> array =
            (NSMutableArray<net.sf.webcat.core.User>)graders();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graders</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromGradersRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraders( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromGraders("
                + value + "): was " + graders() );
        }
        NSMutableArray<net.sf.webcat.core.User> array =
            (NSMutableArray<net.sf.webcat.core.User>)graders();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graders</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToGradersRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGradersRelationship("
                + value + "): was " + graders() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "graders" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graders</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGradersRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromGradersRelationship("
                + value + "): was " + graders() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graders" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>graders</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.User createGradersRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createGradersRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "User" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "graders" );
        return (net.sf.webcat.core.User)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>graders</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteGradersRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteGradersRelationship("
                + value + "): was " + graders() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graders" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>graders</code> relationship.
     */
    public void deleteAllGradersRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllGradersRelationships(): was "
                + graders() );
        }
        Enumeration objects = graders().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteGradersRelationship(
                (net.sf.webcat.core.User)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>instructors</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.User> instructors()
    {
        return (NSArray)storedValueForKey( "instructors" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>instructors</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setInstructors( NSMutableArray<net.sf.webcat.core.User>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setInstructors("
                + value + "): was " + instructors() );
        }
        takeStoredValueForKey( value, "instructors" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>instructors</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToInstructorsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToInstructors( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToInstructors("
                + value + "): was " + instructors() );
        }
        NSMutableArray<net.sf.webcat.core.User> array =
            (NSMutableArray<net.sf.webcat.core.User>)instructors();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>instructors</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromInstructorsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromInstructors( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromInstructors("
                + value + "): was " + instructors() );
        }
        NSMutableArray<net.sf.webcat.core.User> array =
            (NSMutableArray<net.sf.webcat.core.User>)instructors();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>instructors</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToInstructorsRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToInstructorsRelationship("
                + value + "): was " + instructors() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "instructors" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>instructors</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromInstructorsRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromInstructorsRelationship("
                + value + "): was " + instructors() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "instructors" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>instructors</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.User createInstructorsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createInstructorsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "User" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "instructors" );
        return (net.sf.webcat.core.User)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>instructors</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteInstructorsRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteInstructorsRelationship("
                + value + "): was " + instructors() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "instructors" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>instructors</code> relationship.
     */
    public void deleteAllInstructorsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllInstructorsRelationships(): was "
                + instructors() );
        }
        Enumeration objects = instructors().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteInstructorsRelationship(
                (net.sf.webcat.core.User)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>students</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.User> students()
    {
        return (NSArray)storedValueForKey( "students" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>students</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setStudents( NSMutableArray<net.sf.webcat.core.User>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setStudents("
                + value + "): was " + students() );
        }
        takeStoredValueForKey( value, "students" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>students</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToStudentsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToStudents( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToStudents("
                + value + "): was " + students() );
        }
        NSMutableArray<net.sf.webcat.core.User> array =
            (NSMutableArray<net.sf.webcat.core.User>)students();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>students</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromStudentsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromStudents( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromStudents("
                + value + "): was " + students() );
        }
        NSMutableArray<net.sf.webcat.core.User> array =
            (NSMutableArray<net.sf.webcat.core.User>)students();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>students</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToStudentsRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToStudentsRelationship("
                + value + "): was " + students() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "students" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>students</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromStudentsRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromStudentsRelationship("
                + value + "): was " + students() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "students" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>students</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.User createStudentsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createStudentsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "User" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "students" );
        return (net.sf.webcat.core.User)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>students</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteStudentsRelationship( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteStudentsRelationship("
                + value + "): was " + students() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "students" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>students</code> relationship.
     */
    public void deleteAllStudentsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllStudentsRelationships(): was "
                + students() );
        }
        Enumeration objects = students().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteStudentsRelationship(
                (net.sf.webcat.core.User)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>ForSemester</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param semesterBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<CourseOffering> objectsForForSemester(
            EOEditingContext context,
            net.sf.webcat.core.Semester semesterBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "forSemester", "CourseOffering" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( semesterBinding != null )
        {
            bindings.setObjectForKey( semesterBinding,
                                      "semester" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForForSemester(ec"
                + ", " + semesterBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>WithoutAnyRelationshipToUser</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<CourseOffering> objectsForWithoutAnyRelationshipToUser(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "withoutAnyRelationshipToUser", "CourseOffering" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForWithoutAnyRelationshipToUser(ec"
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>WithoutStudent</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<CourseOffering> objectsForWithoutStudent(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "withoutStudent", "CourseOffering" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForWithoutStudent(ec"
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>WithoutStudentOrGrader</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<CourseOffering> objectsForWithoutStudentOrGrader(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "withoutStudentOrGrader", "CourseOffering" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForWithoutStudentOrGrader(ec"
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>WithoutUserAsStaff</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<CourseOffering> objectsForWithoutUserAsStaff(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "withoutUserAsStaff", "CourseOffering" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( userBinding != null )
        {
            bindings.setObjectForKey( userBinding,
                                      "user" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForWithoutUserAsStaff(ec"
                + ", " + userBinding
                + "): " + result );
        }
        return result;
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( CourseOffering.class );
}
