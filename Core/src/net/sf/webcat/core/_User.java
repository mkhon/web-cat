/*==========================================================================*\
 |  _User.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to User.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2009 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.core;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * User.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _User
    extends er.extensions.eof.ERXGenericRecord
    implements net.sf.webcat.core.MutableContainer.MutableContainerOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _User object.
     */
    public _User()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _User object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param accessLevel
     * @param updateMutableFields
     * @param userName
     * @param authenticationDomain
     * @return The newly created object
     */
    public static User create(
        EOEditingContext editingContext,
        byte accessLevel,
        boolean updateMutableFields,
        String userName,
        net.sf.webcat.core.AuthenticationDomain authenticationDomain
        )
    {
        User eoObject = (User)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _User.ENTITY_NAME);
        eoObject.setAccessLevel(accessLevel);
        eoObject.setUpdateMutableFields(updateMutableFields);
        eoObject.setUserName(userName);
        eoObject.setAuthenticationDomainRelationship(authenticationDomain);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static User localInstance(
        EOEditingContext editingContext, User eo)
    {
        return (eo == null)
            ? null
            : (User)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static User forId(
        EOEditingContext ec, int id )
    {
        User obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (User)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static User forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.foundation.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String ACCESS_LEVEL_KEY = "accessLevel";
    public static final String EMAIL_KEY = "email";
    public static final String FIRST_NAME_KEY = "firstName";
    public static final String LAST_NAME_KEY = "lastName";
    public static final String PASSWORD_KEY = "password";
    public static final String PREFERENCES_KEY = "preferences";
    public static final String UNIVERSITY_ID_NO_KEY = "universityIDNo";
    public static final String UPDATE_MUTABLE_FIELDS_KEY = "updateMutableFields";
    public static final String URL_KEY = "url";
    public static final String USER_NAME_KEY = "userName";
    // To-one relationships ---
    public static final String AUTHENTICATION_DOMAIN_KEY = "authenticationDomain";
    public static final String THEME_KEY = "theme";
    // To-many relationships ---
    public static final String CORE_SELECTIONS_KEY = "coreSelections";
    public static final String ENROLLED_IN_KEY = "enrolledIn";
    public static final String GRADER_FOR_KEY = "graderFor";
    public static final String PASSWORD_CHANGE_REQUEST_KEY = "passwordChangeRequest";
    public static final String TEACHING_KEY = "teaching";
    // Fetch specifications ---
    public static final String COURSE_PARTICIPANTS_FSPEC = "courseParticipants";
    public static final String DOMAIN_AND_EMAIL_FSPEC = "domainAndEmail";
    public static final String DOMAIN_AND_NAME_FSPEC = "domainAndName";
    public static final String STAFF_FOR_COURSE_FSPEC = "staffForCourse";
    public static final String STUDENTS_FOR_COURSE_FSPEC = "studentsForCourse";
    public static final String USER_WITH_NAME_FSPEC = "userWithName";
    public static final String ENTITY_NAME = "User";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public User localInstance(EOEditingContext editingContext)
    {
        return (User)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>accessLevel</code> value.
     * @return the value of the attribute
     */
    public byte accessLevel()
    {
        Integer result =
            (Integer)storedValueForKey( "accessLevel" );
        return ( result == null )
            ? 0
            : result.byteValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>accessLevel</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setAccessLevel( byte value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAccessLevel("
                + value + "): was " + accessLevel() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setAccessLevelRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>accessLevel</code> value.
     * @return the value of the attribute
     */
    public Integer accessLevelRaw()
    {
        return (Integer)storedValueForKey( "accessLevel" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>accessLevel</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setAccessLevelRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAccessLevelRaw("
                + value + "): was " + accessLevelRaw() );
        }
        takeStoredValueForKey( value, "accessLevel" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>email</code> value.
     * @return the value of the attribute
     */
    public String email()
    {
        return (String)storedValueForKey( "email" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>email</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setEmail( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setEmail("
                + value + "): was " + email() );
        }
        takeStoredValueForKey( value, "email" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>firstName</code> value.
     * @return the value of the attribute
     */
    public String firstName()
    {
        return (String)storedValueForKey( "firstName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>firstName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setFirstName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setFirstName("
                + value + "): was " + firstName() );
        }
        takeStoredValueForKey( value, "firstName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>lastName</code> value.
     * @return the value of the attribute
     */
    public String lastName()
    {
        return (String)storedValueForKey( "lastName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>lastName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLastName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLastName("
                + value + "): was " + lastName() );
        }
        takeStoredValueForKey( value, "lastName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>password</code> value.
     * @return the value of the attribute
     */
    public String password()
    {
        return (String)storedValueForKey( "password" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>password</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPassword( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPassword("
                + value + "): was " + password() );
        }
        takeStoredValueForKey( value, "password" );
    }


    //-- Local mutable cache --
    private net.sf.webcat.core.MutableDictionary preferencesCache;
    private NSData preferencesRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>preferences</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.core.MutableDictionary preferences()
    {
        NSData dbValue =
            (NSData)storedValueForKey( "preferences" );
        if ( preferencesRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( preferencesRawCache ) )
            {
                // They are still equal, so just update the raw cache
                preferencesRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                preferencesRawCache = dbValue;
                net.sf.webcat.core.MutableDictionary newValue =
                    net.sf.webcat.core.MutableDictionary
                    .objectWithArchiveData( dbValue );
                if ( preferencesCache != null )
                {
                    preferencesCache.copyFrom( newValue );
                }
                else
                {
                    preferencesCache = newValue;
                }
                preferencesCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && preferencesCache == null )
        {
            preferencesCache =
                net.sf.webcat.core.MutableDictionary
                .objectWithArchiveData( dbValue );
             preferencesCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return preferencesCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>preferences</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreferences( net.sf.webcat.core.MutableDictionary value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreferences("
                + value + ")" );
        }
        if ( preferencesCache == null )
        {
            preferencesCache = value;
            value.setHasChanged( false );
            preferencesRawCache = value.archiveData();
            takeStoredValueForKey( preferencesRawCache, "preferences" );
        }
        else if ( preferencesCache != value )  // ( preferencesCache != null )
        {
            preferencesCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( preferencesCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>preferences</code>
     * property.
     */
    public void clearPreferences()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "clearPreferences()" );
        }
        takeStoredValueForKey( null, "preferences" );
        preferencesRawCache = null;
        preferencesCache = null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>universityIDNo</code> value.
     * @return the value of the attribute
     */
    public String universityIDNo()
    {
        return (String)storedValueForKey( "universityIDNo" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>universityIDNo</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUniversityIDNo( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUniversityIDNo("
                + value + "): was " + universityIDNo() );
        }
        takeStoredValueForKey( value, "universityIDNo" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public boolean updateMutableFields()
    {
        Integer result =
            (Integer)storedValueForKey( "updateMutableFields" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFields( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFields("
                + value + "): was " + updateMutableFields() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setUpdateMutableFieldsRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public Integer updateMutableFieldsRaw()
    {
        return (Integer)storedValueForKey( "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUpdateMutableFieldsRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUpdateMutableFieldsRaw("
                + value + "): was " + updateMutableFieldsRaw() );
        }
        takeStoredValueForKey( value, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>url</code> value.
     * @return the value of the attribute
     */
    public String url()
    {
        return (String)storedValueForKey( "url" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>url</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUrl( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUrl("
                + value + "): was " + url() );
        }
        takeStoredValueForKey( value, "url" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>userName</code> value.
     * @return the value of the attribute
     */
    public String userName()
    {
        return (String)storedValueForKey( "userName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>userName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUserName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUserName("
                + value + "): was " + userName() );
        }
        takeStoredValueForKey( value, "userName" );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void saveMutables()
    {
        log.debug("saveMutables()");
        if ( preferencesCache != null
            && preferencesCache.hasChanged() )
        {
            preferencesRawCache = preferencesCache.archiveData();
            takeStoredValueForKey( preferencesRawCache, "preferences" );
            preferencesCache.setHasChanged( false );
        }

        setUpdateMutableFields( false );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void willUpdate()
    {
        log.debug("willUpdate()");
        saveMutables();
        super.willUpdate();
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is inserted into the database.
     */
    public void willInsert()
    {
        log.debug("willInsert()");
        saveMutables();
        super.willInsert();
    }


    // ----------------------------------------------------------
    /**
     * Called when the object is invalidated.
     */
    public void flushCaches()
    {
        log.debug("flushCaches()");
        preferencesCache = null;
        preferencesRawCache  = null;
        super.flushCaches();
    }


    // ----------------------------------------------------------
    /**
     * Called when an owned mutable container object is changed.
     */
    public void mutableContainerHasChanged()
    {
        setUpdateMutableFields( true );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>authenticationDomain</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.AuthenticationDomain authenticationDomain()
    {
        return (net.sf.webcat.core.AuthenticationDomain)storedValueForKey( "authenticationDomain" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAuthenticationDomainRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setAuthenticationDomain( net.sf.webcat.core.AuthenticationDomain value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAuthenticationDomain("
                + value + "): was " + authenticationDomain() );
        }
        takeStoredValueForKey( value, "authenticationDomain" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setAuthenticationDomainRelationship(
        net.sf.webcat.core.AuthenticationDomain value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAuthenticationDomainRelationship("
                + value + "): was " + authenticationDomain() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.AuthenticationDomain object = authenticationDomain();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "authenticationDomain" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "authenticationDomain" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>theme</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.Theme theme()
    {
        return (net.sf.webcat.core.Theme)storedValueForKey( "theme" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>theme</code>
     * relationship (DO NOT USE--instead, use
     * <code>setThemeRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setTheme( net.sf.webcat.core.Theme value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTheme("
                + value + "): was " + theme() );
        }
        takeStoredValueForKey( value, "theme" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>theme</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setThemeRelationship(
        net.sf.webcat.core.Theme value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setThemeRelationship("
                + value + "): was " + theme() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.Theme object = theme();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "theme" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "theme" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>coreSelections</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.CoreSelections> coreSelections()
    {
        return (NSArray)storedValueForKey( "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>coreSelections</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setCoreSelections( NSMutableArray<net.sf.webcat.core.CoreSelections>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setCoreSelections("
                + value + "): was " + coreSelections() );
        }
        takeStoredValueForKey( value, "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>coreSelections</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToCoreSelectionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToCoreSelections( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCoreSelections("
                + value + "): was " + coreSelections() );
        }
        NSMutableArray<net.sf.webcat.core.CoreSelections> array =
            (NSMutableArray<net.sf.webcat.core.CoreSelections>)coreSelections();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>coreSelections</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromCoreSelectionsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCoreSelections( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromCoreSelections("
                + value + "): was " + coreSelections() );
        }
        NSMutableArray<net.sf.webcat.core.CoreSelections> array =
            (NSMutableArray<net.sf.webcat.core.CoreSelections>)coreSelections();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>coreSelections</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToCoreSelectionsRelationship( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToCoreSelectionsRelationship("
                + value + "): was " + coreSelections() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>coreSelections</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromCoreSelectionsRelationship( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromCoreSelectionsRelationship("
                + value + "): was " + coreSelections() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "coreSelections" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>coreSelections</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.CoreSelections createCoreSelectionsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createCoreSelectionsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CoreSelections" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "coreSelections" );
        return (net.sf.webcat.core.CoreSelections)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>coreSelections</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteCoreSelectionsRelationship( net.sf.webcat.core.CoreSelections value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteCoreSelectionsRelationship("
                + value + "): was " + coreSelections() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "coreSelections" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>coreSelections</code> relationship.
     */
    public void deleteAllCoreSelectionsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllCoreSelectionsRelationships(): was "
                + coreSelections() );
        }
        Enumeration objects = coreSelections().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteCoreSelectionsRelationship(
                (net.sf.webcat.core.CoreSelections)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>enrolledIn</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.CourseOffering> enrolledIn()
    {
        return (NSArray)storedValueForKey( "enrolledIn" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>enrolledIn</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setEnrolledIn( NSMutableArray<net.sf.webcat.core.CourseOffering>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setEnrolledIn("
                + value + "): was " + enrolledIn() );
        }
        takeStoredValueForKey( value, "enrolledIn" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>enrolledIn</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToEnrolledInRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToEnrolledIn( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToEnrolledIn("
                + value + "): was " + enrolledIn() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)enrolledIn();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>enrolledIn</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromEnrolledInRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromEnrolledIn( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromEnrolledIn("
                + value + "): was " + enrolledIn() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)enrolledIn();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>enrolledIn</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToEnrolledInRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToEnrolledInRelationship("
                + value + "): was " + enrolledIn() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "enrolledIn" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>enrolledIn</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromEnrolledInRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromEnrolledInRelationship("
                + value + "): was " + enrolledIn() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "enrolledIn" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>enrolledIn</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.CourseOffering createEnrolledInRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createEnrolledInRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CourseOffering" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "enrolledIn" );
        return (net.sf.webcat.core.CourseOffering)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>enrolledIn</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteEnrolledInRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteEnrolledInRelationship("
                + value + "): was " + enrolledIn() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "enrolledIn" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>enrolledIn</code> relationship.
     */
    public void deleteAllEnrolledInRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllEnrolledInRelationships(): was "
                + enrolledIn() );
        }
        Enumeration objects = enrolledIn().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteEnrolledInRelationship(
                (net.sf.webcat.core.CourseOffering)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>graderFor</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.CourseOffering> graderFor()
    {
        return (NSArray)storedValueForKey( "graderFor" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>graderFor</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setGraderFor( NSMutableArray<net.sf.webcat.core.CourseOffering>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGraderFor("
                + value + "): was " + graderFor() );
        }
        takeStoredValueForKey( value, "graderFor" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graderFor</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToGraderForRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToGraderFor( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraderFor("
                + value + "): was " + graderFor() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)graderFor();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graderFor</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromGraderForRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraderFor( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromGraderFor("
                + value + "): was " + graderFor() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)graderFor();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>graderFor</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToGraderForRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToGraderForRelationship("
                + value + "): was " + graderFor() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "graderFor" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>graderFor</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromGraderForRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromGraderForRelationship("
                + value + "): was " + graderFor() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graderFor" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>graderFor</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.CourseOffering createGraderForRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createGraderForRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CourseOffering" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "graderFor" );
        return (net.sf.webcat.core.CourseOffering)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>graderFor</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteGraderForRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteGraderForRelationship("
                + value + "): was " + graderFor() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "graderFor" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>graderFor</code> relationship.
     */
    public void deleteAllGraderForRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllGraderForRelationships(): was "
                + graderFor() );
        }
        Enumeration objects = graderFor().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteGraderForRelationship(
                (net.sf.webcat.core.CourseOffering)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>passwordChangeRequest</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.PasswordChangeRequest> passwordChangeRequest()
    {
        return (NSArray)storedValueForKey( "passwordChangeRequest" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>passwordChangeRequest</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setPasswordChangeRequest( NSMutableArray<net.sf.webcat.core.PasswordChangeRequest>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPasswordChangeRequest("
                + value + "): was " + passwordChangeRequest() );
        }
        takeStoredValueForKey( value, "passwordChangeRequest" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>passwordChangeRequest</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToPasswordChangeRequestRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToPasswordChangeRequest( net.sf.webcat.core.PasswordChangeRequest value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToPasswordChangeRequest("
                + value + "): was " + passwordChangeRequest() );
        }
        NSMutableArray<net.sf.webcat.core.PasswordChangeRequest> array =
            (NSMutableArray<net.sf.webcat.core.PasswordChangeRequest>)passwordChangeRequest();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>passwordChangeRequest</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromPasswordChangeRequestRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromPasswordChangeRequest( net.sf.webcat.core.PasswordChangeRequest value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromPasswordChangeRequest("
                + value + "): was " + passwordChangeRequest() );
        }
        NSMutableArray<net.sf.webcat.core.PasswordChangeRequest> array =
            (NSMutableArray<net.sf.webcat.core.PasswordChangeRequest>)passwordChangeRequest();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>passwordChangeRequest</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToPasswordChangeRequestRelationship( net.sf.webcat.core.PasswordChangeRequest value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToPasswordChangeRequestRelationship("
                + value + "): was " + passwordChangeRequest() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "passwordChangeRequest" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>passwordChangeRequest</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromPasswordChangeRequestRelationship( net.sf.webcat.core.PasswordChangeRequest value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromPasswordChangeRequestRelationship("
                + value + "): was " + passwordChangeRequest() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "passwordChangeRequest" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>passwordChangeRequest</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.PasswordChangeRequest createPasswordChangeRequestRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createPasswordChangeRequestRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "PasswordChangeRequest" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "passwordChangeRequest" );
        return (net.sf.webcat.core.PasswordChangeRequest)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>passwordChangeRequest</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deletePasswordChangeRequestRelationship( net.sf.webcat.core.PasswordChangeRequest value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deletePasswordChangeRequestRelationship("
                + value + "): was " + passwordChangeRequest() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "passwordChangeRequest" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>passwordChangeRequest</code> relationship.
     */
    public void deleteAllPasswordChangeRequestRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllPasswordChangeRequestRelationships(): was "
                + passwordChangeRequest() );
        }
        Enumeration objects = passwordChangeRequest().objectEnumerator();
        while ( objects.hasMoreElements() )
            deletePasswordChangeRequestRelationship(
                (net.sf.webcat.core.PasswordChangeRequest)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>teaching</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.core.CourseOffering> teaching()
    {
        return (NSArray)storedValueForKey( "teaching" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>teaching</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setTeaching( NSMutableArray<net.sf.webcat.core.CourseOffering>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setTeaching("
                + value + "): was " + teaching() );
        }
        takeStoredValueForKey( value, "teaching" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>teaching</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToTeachingRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToTeaching( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToTeaching("
                + value + "): was " + teaching() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)teaching();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>teaching</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromTeachingRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromTeaching( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromTeaching("
                + value + "): was " + teaching() );
        }
        NSMutableArray<net.sf.webcat.core.CourseOffering> array =
            (NSMutableArray<net.sf.webcat.core.CourseOffering>)teaching();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>teaching</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToTeachingRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToTeachingRelationship("
                + value + "): was " + teaching() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "teaching" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>teaching</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromTeachingRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromTeachingRelationship("
                + value + "): was " + teaching() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "teaching" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>teaching</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.core.CourseOffering createTeachingRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createTeachingRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CourseOffering" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "teaching" );
        return (net.sf.webcat.core.CourseOffering)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>teaching</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteTeachingRelationship( net.sf.webcat.core.CourseOffering value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteTeachingRelationship("
                + value + "): was " + teaching() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "teaching" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>teaching</code> relationship.
     */
    public void deleteAllTeachingRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllTeachingRelationships(): was "
                + teaching() );
        }
        Enumeration objects = teaching().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteTeachingRelationship(
                (net.sf.webcat.core.CourseOffering)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a fetch specification.
     *
     * @param context The editing context to use
     * @param fspec The fetch specification to use
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<User> objectsWithFetchSpecification(
        EOEditingContext context,
        EOFetchSpecification fspec)
    {
        return context.objectsWithFetchSpecification(fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve all objects of this type.
     *
     * @param context The editing context to use
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<User> allObjects(
        EOEditingContext context)
    {
        return objectsMatchingQualifier(context, null, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a qualifier.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<User> objectsMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier)
    {
        return objectsMatchingQualifier(context, qualifier, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a qualifier and sort orderings.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     * @param sortOrderings The sort orderings to use
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<User> objectsMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier,
        NSArray<EOSortOrdering> sortOrderings)
    {
        EOFetchSpecification fspec = new EOFetchSpecification(
            ENTITY_NAME, qualifier, sortOrderings);

        return objectsWithFetchSpecification(context, fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<User> objectsMatchingValues(
        EOEditingContext context,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value " +
                "corresponding to every key that was passed.");
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (!(key instanceof String))
            {
                throw new IllegalArgumentException("Keys should be strings.");
            }

            valueDictionary.setObjectForKey(value, key);
        }

        return objectsMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a dictionary of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<User> objectsMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
    {
        return EOUtilities.objectsMatchingValues(context, ENTITY_NAME,
            keysAndValues);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve a single object using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the single entity that was retrieved
     *
     * @throws EOObjectNotAvailableException
     *     if there is no matching object
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    @SuppressWarnings("unchecked")
    public static User objectMatchingValues(
        EOEditingContext context,
        Object... keysAndValues) throws EOObjectNotAvailableException,
                                        EOUtilities.MoreThanOneException
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value " +
                "corresponding to every key that was passed.");
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (!(key instanceof String))
            {
                throw new IllegalArgumentException("Keys should be strings.");
            }

            valueDictionary.setObjectForKey(value, key);
        }

        return objectMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve an object using a dictionary of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the single entity that was retrieved
     *
     * @throws EOObjectNotAvailableException
     *     if there is no matching object
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    @SuppressWarnings("unchecked")
    public static User objectMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
        throws EOObjectNotAvailableException,
               EOUtilities.MoreThanOneException
    {
        return (User) EOUtilities.objectMatchingValues(
            context, ENTITY_NAME, keysAndValues);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>CourseParticipants</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param accessLevelBinding fetch spec parameter
     * @param courseOfferingBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<User> objectsForCourseParticipants(
            EOEditingContext context,
            Integer accessLevelBinding,
            net.sf.webcat.core.CourseOffering courseOfferingBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "courseParticipants", "User" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( accessLevelBinding != null )
        {
            bindings.setObjectForKey( accessLevelBinding,
                                      "accessLevel" );
        }
        if ( courseOfferingBinding != null )
        {
            bindings.setObjectForKey( courseOfferingBinding,
                                      "courseOffering" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<User> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForCourseParticipants(ec"
                + ", " + accessLevelBinding
                + ", " + courseOfferingBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>DomainAndEmail</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param domainBinding fetch spec parameter
     * @param emailBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<User> objectsForDomainAndEmail(
            EOEditingContext context,
            net.sf.webcat.core.AuthenticationDomain domainBinding,
            String emailBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "domainAndEmail", "User" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( domainBinding != null )
        {
            bindings.setObjectForKey( domainBinding,
                                      "domain" );
        }
        if ( emailBinding != null )
        {
            bindings.setObjectForKey( emailBinding,
                                      "email" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<User> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForDomainAndEmail(ec"
                + ", " + domainBinding
                + ", " + emailBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>DomainAndName</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param domainBinding fetch spec parameter
     * @param userNameBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<User> objectsForDomainAndName(
            EOEditingContext context,
            net.sf.webcat.core.AuthenticationDomain domainBinding,
            String userNameBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "domainAndName", "User" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( domainBinding != null )
        {
            bindings.setObjectForKey( domainBinding,
                                      "domain" );
        }
        if ( userNameBinding != null )
        {
            bindings.setObjectForKey( userNameBinding,
                                      "userName" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<User> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForDomainAndName(ec"
                + ", " + domainBinding
                + ", " + userNameBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>StaffForCourse</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param courseOfferingBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<User> objectsForStaffForCourse(
            EOEditingContext context,
            net.sf.webcat.core.CourseOffering courseOfferingBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "staffForCourse", "User" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( courseOfferingBinding != null )
        {
            bindings.setObjectForKey( courseOfferingBinding,
                                      "courseOffering" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<User> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForStaffForCourse(ec"
                + ", " + courseOfferingBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>StudentsForCourse</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param courseOfferingBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<User> objectsForStudentsForCourse(
            EOEditingContext context,
            net.sf.webcat.core.CourseOffering courseOfferingBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "studentsForCourse", "User" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( courseOfferingBinding != null )
        {
            bindings.setObjectForKey( courseOfferingBinding,
                                      "courseOffering" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<User> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForStudentsForCourse(ec"
                + ", " + courseOfferingBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>UserWithName</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param nameBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<User> objectsForUserWithName(
            EOEditingContext context,
            String nameBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "userWithName", "User" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( nameBinding != null )
        {
            bindings.setObjectForKey( nameBinding,
                                      "name" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray<User> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForUserWithName(ec"
                + ", " + nameBinding
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Produce a string representation of this object.  This implementation
     * calls UserPresentableDescription(), which uses WebObjects' internal
     * mechanism to print out the visible fields of this object.  Normally,
     * subclasses would override userPresentableDescription() to change
     * the way the object is printed.
     *
     * @return A string representation of the object's value
     */
    public String toString()
    {
        return userPresentableDescription();
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( User.class );
}
