/*==========================================================================*\
 |  _Department.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to Department.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.core;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * Department.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _Department
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _Department object.
     */
    public _Department()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _Department object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param abbreviation
     * @return The newly created object
     */
    public static Department createDepartment(
        EOEditingContext editingContext,
        String abbreviation
        )
    {
        Department eoObject = (Department)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _Department.ENTITY_NAME);
        eoObject.setAbbreviation(abbreviation);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static Department localInstance(
        EOEditingContext editingContext, Department eo)
    {
        return (eo == null)
            ? null
            : (Department)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Department forId(
        EOEditingContext ec, int id )
    {
        Department obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (Department)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Department forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String ABBREVIATION_KEY = "abbreviation";
    public static final String NAME_KEY = "name";
    // To-one relationships ---
    public static final String INSTITUTION_KEY = "institution";
    // To-many relationships ---
    // Fetch specifications ---
    public static final String ENTITY_NAME = "Department";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public Department localInstance(EOEditingContext editingContext)
    {
        return (Department)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>abbreviation</code> value.
     * @return the value of the attribute
     */
    public String abbreviation()
    {
        return (String)storedValueForKey( "abbreviation" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>abbreviation</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setAbbreviation( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setAbbreviation("
                + value + "): was " + abbreviation() );
        }
        takeStoredValueForKey( value, "abbreviation" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>name</code> value.
     * @return the value of the attribute
     */
    public String name()
    {
        return (String)storedValueForKey( "name" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>name</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setName("
                + value + "): was " + name() );
        }
        takeStoredValueForKey( value, "name" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>institution</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.AuthenticationDomain institution()
    {
        return (net.sf.webcat.core.AuthenticationDomain)storedValueForKey( "institution" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>institution</code>
     * relationship (DO NOT USE--instead, use
     * <code>setInstitutionRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setInstitution( net.sf.webcat.core.AuthenticationDomain value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setInstitution("
                + value + "): was " + institution() );
        }
        takeStoredValueForKey( value, "institution" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>institution</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setInstitutionRelationship(
        net.sf.webcat.core.AuthenticationDomain value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setInstitutionRelationship("
                + value + "): was " + institution() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.AuthenticationDomain object = institution();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "institution" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "institution" );
        }
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( Department.class );
}
