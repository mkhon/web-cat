/*==========================================================================*\
 |  _Semester.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to Semester.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2009 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.core;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * Semester.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _Semester
    extends er.extensions.eof.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _Semester object.
     */
    public _Semester()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _Semester object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param year
     * @return The newly created object
     */
    public static Semester create(
        EOEditingContext editingContext,
        int year
        )
    {
        Semester eoObject = (Semester)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _Semester.ENTITY_NAME);
        eoObject.setYear(year);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static Semester localInstance(
        EOEditingContext editingContext, Semester eo)
    {
        return (eo == null)
            ? null
            : (Semester)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Semester forId(
        EOEditingContext ec, int id )
    {
        Semester obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (Semester)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static Semester forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.foundation.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String SEASON_KEY = "season";
    public static final String SEMESTER_END_DATE_KEY = "semesterEndDate";
    public static final String SEMESTER_START_DATE_KEY = "semesterStartDate";
    public static final String YEAR_KEY = "year";
    // To-one relationships ---
    // To-many relationships ---
    // Fetch specifications ---
    public static final String FETCH_ALL_FSPEC = "FetchAll";
    public static final String ENTITY_NAME = "Semester";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public Semester localInstance(EOEditingContext editingContext)
    {
        return (Semester)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>season</code> value.
     * @return the value of the attribute
     */
    public Integer season()
    {
        return (Integer)storedValueForKey( "season" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>season</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setSeason( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSeason("
                + value + "): was " + season() );
        }
        takeStoredValueForKey( value, "season" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>semesterEndDate</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp semesterEndDate()
    {
        return (NSTimestamp)storedValueForKey( "semesterEndDate" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>semesterEndDate</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setSemesterEndDate( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSemesterEndDate("
                + value + "): was " + semesterEndDate() );
        }
        takeStoredValueForKey( value, "semesterEndDate" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>semesterStartDate</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp semesterStartDate()
    {
        return (NSTimestamp)storedValueForKey( "semesterStartDate" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>semesterStartDate</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setSemesterStartDate( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setSemesterStartDate("
                + value + "): was " + semesterStartDate() );
        }
        takeStoredValueForKey( value, "semesterStartDate" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>year</code> value.
     * @return the value of the attribute
     */
    public int year()
    {
        Integer result =
            (Integer)storedValueForKey( "year" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>year</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setYear( int value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setYear("
                + value + "): was " + year() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setYearRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>year</code> value.
     * @return the value of the attribute
     */
    public Integer yearRaw()
    {
        return (Integer)storedValueForKey( "year" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>year</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setYearRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setYearRaw("
                + value + "): was " + yearRaw() );
        }
        takeStoredValueForKey( value, "year" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a fetch specification.
     *
     * @param context The editing context to use
     * @param fspec The fetch specification to use
     */
    @SuppressWarnings("unchecked")
    public static NSArray<Semester> objectsWithFetchSpecification(
        EOEditingContext context,
        EOFetchSpecification fspec)
    {
        return context.objectsWithFetchSpecification(fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>FetchAll</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<Semester> objectsForFetchAll(
            EOEditingContext context
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "FetchAll", "Semester" );

        NSArray<Semester> result = objectsWithFetchSpecification( context, spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForFetchAll(ec"
                + "): " + result );
        }
        return result;
    }


    // ----------------------------------------------------------
    /**
     * Produce a string representation of this object.  This implementation
     * calls UserPresentableDescription(), which uses WebObjects' internal
     * mechanism to print out the visible fields of this object.  Normally,
     * subclasses would override userPresentableDescription() to change
     * the way the object is printed.
     *
     * @return A string representation of the object's value
     */
    public String toString()
    {
        return userPresentableDescription();
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( Semester.class );
}
