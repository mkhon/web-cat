/*==========================================================================*\
 |  _Course.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to Course.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.core;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.Enumeration;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * Course.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _Course
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _Course object.
     */
    public _Course()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String DEPARTMENT_ID_KEY = "departmentId";
    public static final String NAME_KEY = "name";
    public static final String NUMBER_KEY = "number";
    // To-one relationships ---
    public static final String DEPARTMENT_KEY = "department";
    // To-many relationships ---
    public static final String OFFERINGS_KEY = "offerings";
    public static final String ENTITY_NAME = "Course";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>departmentId</code> value.
     * @return the value of the attribute
     */
    public Number departmentId()
    {
        return (Number)storedValueForKey( "departmentId" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>departmentId</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDepartmentId( Number value )
    {
        takeStoredValueForKey( value, "departmentId" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>name</code> value.
     * @return the value of the attribute
     */
    public String name()
    {
        return (String)storedValueForKey( "name" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>name</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setName( String value )
    {
        takeStoredValueForKey( value, "name" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>number</code> value.
     * @return the value of the attribute
     */
    public int number()
    {
        Number result =
            (Number)storedValueForKey( "number" );
        return ( result == null )
            ? 0
            : result.intValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>number</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setNumber( int value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value );
        takeStoredValueForKey( actual, "number" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>number</code> value.
     * @return the value of the attribute
     */
    public Number numberRaw()
    {
        return (Number)storedValueForKey( "number" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>number</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setNumberRaw( Number value )
    {
        takeStoredValueForKey( value, "number" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>department</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.Department department()
    {
        return (net.sf.webcat.core.Department)storedValueForKey( "department" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setDepartmentRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void setDepartment( net.sf.webcat.core.Department value )
    {
        takeStoredValueForKey( value, "department" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     * 
     * @param value The new entity to relate to
     */
    public void setDepartmentRelationship(
        net.sf.webcat.core.Department value )
    {
        if ( value == null )
        {
            net.sf.webcat.core.Department object = department();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "department" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "department" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>offerings</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray offerings()
    {
        return (NSArray)storedValueForKey( "offerings" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>offerings</code> relationship.
     * 
     * @param value The new set of entities to relate to
     */
    public void setOfferings( NSMutableArray value )
    {
        takeStoredValueForKey( value, "offerings" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>offerings</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToOfferingsRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void addToOfferings( net.sf.webcat.core.CourseOffering value )
    {
        NSMutableArray array = (NSMutableArray)offerings();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>offerings</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromOfferingsRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The entity to remove from the relationship
     */
    public void removeFromOfferings( net.sf.webcat.core.CourseOffering value )
    {
        NSMutableArray array = (NSMutableArray)offerings();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>offerings</code>
     * relationship.
     * 
     * @param value The new entity to relate to
     */
    public void addToOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        addObjectToBothSidesOfRelationshipWithKey(
            value, "offerings" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>offerings</code>
     * relationship.
     * 
     * @param value The entity to remove from the relationship
     */
    public void removeFromOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "offerings" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>offerings</code> relationship.
     * 
     * @return The new entity
     */
    public net.sf.webcat.core.CourseOffering createOfferingsRelationship()
    {
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "CourseOffering" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "offerings" );
        return (net.sf.webcat.core.CourseOffering)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>offerings</code> relationship.
     * 
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteOfferingsRelationship( net.sf.webcat.core.CourseOffering value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "offerings" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>offerings</code> relationship.
     */
    public void deleteAllOfferingsRelationships()
    {
        Enumeration objects = offerings().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteOfferingsRelationship(
                (net.sf.webcat.core.CourseOffering)objects.nextElement() );
    }


}
