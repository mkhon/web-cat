/*==========================================================================*\
 |  $Id: WCForm.java,v 1.4 2009/12/15 19:45:55 aallowat Exp $
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2008 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.ui;

import java.util.Stack;
import org.apache.log4j.Logger;
import com.webobjects.appserver.WOAssociation;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOElement;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSDictionary;
import er.extensions.appserver.ERXBrowser;
import er.extensions.appserver.ERXBrowserFactory;
import er.extensions.appserver.ERXWOContext;
import er.extensions.components._private.ERXWOForm;

//--------------------------------------------------------------------------
/**
 * Provides a static helper method to generate the call to a JavaScript
 * function that will submit this form, and permits nesting of forms. This is
 * necessary when generating a form inside, for example, a dialog box, in which
 * case the form element isn't _really_ nested because the dialog is moved
 * outside of its container, but WebObjects thinks that it is nested due to the
 * way component content is generated by linearly processing the template.
 *
 * @author Tony Allevato
 * @version $Id: WCForm.java,v 1.4 2009/12/15 19:45:55 aallowat Exp $
 */
public class WCForm extends ERXWOForm
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    public WCForm(String name,
            NSDictionary<String, WOAssociation> associations,
            WOElement element)
    {
        super(name, associations, element);
    }


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    public static String scriptToPerformFakeFullSubmit(WOContext context,
            String fieldName)
    {
        String formName = formName(context, null);
        if (formName == null)
        {
            log.warn("An element that uses a faked full form submit must be "
                    + "contained within a form.");
        }

        return "webcat.fakeFullSubmit('" + formName + "', '"
            + fieldName + "');";
    }


    // ----------------------------------------------------------
    protected boolean _shouldAppendFormTags(WOContext context, boolean wasInForm)
    {
        boolean shouldAppendFormTags = !_disabled(context);
        return shouldAppendFormTags;
    }


    // ----------------------------------------------------------
    protected void _setFormName(WOContext context, boolean wasInForm)
    {
        if (_shouldAppendFormTags(context, wasInForm))
        {
            String formName = _formName(context);

            if (formName != null)
            {
                formNames.push(formName);
                ERXWOContext.contextDictionary().setObjectForKey(
                        formName, "formName");
            }
        }
    }


    // ----------------------------------------------------------
    protected void _clearFormName(WOContext context, boolean wasInForm)
    {
        if (_shouldAppendFormTags(context, wasInForm))
        {
            String formName = _formName(context);

            if (formName != null)
            {
                if (!formNames.empty())
                {
                    formNames.pop();
                }

                if (formNames.empty())
                {
                    ERXWOContext.contextDictionary().removeObjectForKey(
                            "formName");
                }
                else
                {
                    ERXWOContext.contextDictionary().setObjectForKey(
                            formNames.peek(), "formName");
                }
            }
        }
    }


    //~ Static/instance variables .............................................

    private static Stack<String> formNames = new Stack<String>();

    private static Logger log = Logger.getLogger(WCForm.class);
}
