{
    attributes = (
    	{
    		columnName = CTEMPLATEID;
    		name = templateId;
    		prototypeName = foreignId;
    	},
        {
            columnName = CBINDING; 
            name = binding; 
            prototypeName = tinyText;
        }, 
        {
            columnName = CPARAMETERTYPE; 
            name = type;
            prototypeName = tinyText;
        },
        {
        	columnName = CDISPLAYNAME;
        	name = displayName;
        	prototypeName = tinyText;
        },
        {
            columnName = CPARAMETERDESCRIPTION; 
            name = description;
            prototypeName = mediumText;
        },
        { name = id; prototypeName = id; },
        {
            columnName = COPTIONS; 
            name = options; 
            prototypeName = mutableDictionary; 
            userInfo = {
                adaptorValueConversionMethodName = archiveData; 
                valueFactoryMethodName = objectWithArchiveData; 
                isMutable = true; 
                valueClassName = net.sf.webcat.core.MutableDictionary; 
            };
        },
        {
            name = updateMutableFields; 
            prototypeName = updateMutableFields; 
            userInfo = {
                isScalar = true;
                scalarDefault = false;
                type = boolean; 
            }; 
        }
    ); 
    attributesUsedForLocking = (
    	templateId,
    	binding,
    	type,
    	displayName,
    	description,
    	updateMutableFields
    );
    className = net.sf.webcat.reporter.ReportParameter;
    classProperties = (
    	binding,
    	type,
    	displayName,
    	description,
    	reportTemplate,
    	dependsOn,
    	neededBy,
    	options,
    	updateMutableFields
    );
    externalName = TREPORTPARAMETER;
    name = ReportParameter; 
    primaryKeyAttributes = (id);
    relationships = (
        {
            destination = ReportTemplate;
            isToMany = N;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id; sourceAttribute = templateId; });
            name = reportTemplate;
        },
        {
            deleteRule = EODeleteRuleCascade; 
            destination = ReportParameterDependencies; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = id; }); 
            name = parameterDependencies1;
            propagatesPrimaryKey = Y; 
        },
        {
            definition = parameterDependencies1.dependsOn; 
            joinSemantic = EOInnerJoin; 
            name = dependsOn; 
            numberOfToManyFaultsToBatchFetch = 10; 
        },
        {
            deleteRule = EODeleteRuleCascade; 
            destination = ReportParameterDependencies; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = dependsOnId; sourceAttribute = id; }); 
            name = parameterDependencies2;
            propagatesPrimaryKey = Y; 
        },
        {
            definition = parameterDependencies2.needyParameter; 
            joinSemantic = EOInnerJoin; 
            name = neededBy; 
            numberOfToManyFaultsToBatchFetch = 10; 
        },
        {
            destination = ReportParameterValue; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = reportParameterId; sourceAttribute = id; });
            name = parameterValues;
        }
    );
}
