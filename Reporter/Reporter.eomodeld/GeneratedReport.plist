{
    attributes = (
        { name = id; prototypeName = id; },
        {
            columnName = CUSERID; 
            name = userId; 
            prototypeName = foreignId;
        },
        {
            columnName = CDESCRIPTION; 
            name = description;
            prototypeName = mediumText;
        },
        {
            columnName = CREPORTTEMPLATEID; 
            name = reportTemplateId;
            prototypeName = foreignId;
        },
        {
        	columnName = CUUID;
        	name = uuid;
        	prototypeName = tinyText;
        },
        {
            columnName = CGENERATEDTIME; 
            name = generatedTime; 
            prototypeName = dateTime; 
        },
        {
            columnName = CERRORS; 
            name = errors; 
            prototypeName = mutableArray; 
            userInfo = {
                adaptorValueConversionMethodName = archiveData; 
                valueFactoryMethodName = objectWithArchiveData; 
                isMutable = true; 
                valueClassName = net.sf.webcat.core.MutableArray; 
            };
        },
        {
            name = updateMutableFields; 
            prototypeName = updateMutableFields; 
            userInfo = {
                isScalar = true;
                scalarDefault = false;
                type = boolean; 
            }; 
        }
    ); 
    attributesUsedForLocking = (
    	userId,
    	reportTemplateId,
    	description,
    	uuid,
    	updateMutableFields,
    );
    className = net.sf.webcat.reporter.GeneratedReport;
    classProperties = (
    	description,
    	user,
    	reportTemplate,
    	generatedTime,
    	uuid,
    	errors,
    	updateMutableFields,
    	dataSetQueries
    );
    externalName = TGENERATEDREPORT;
    name = GeneratedReport;
    primaryKeyAttributes = (id);
    relationships = (
        {
            destination = User;
            isToMany = N;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id; sourceAttribute = userId; });
            name = user;
        },
        {
            destination = ReportTemplate;
            isToMany = N;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = id; sourceAttribute = reportTemplateId; });
            name = reportTemplate;
        },
        {
        	deleteRule = EODeleteRuleCascade;
            destination = ReportDataSetQuery;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = generatedReportId; sourceAttribute = id; });
            name = dataSetQueries;
        },
    );
}
