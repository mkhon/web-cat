{
    attributes = (
        { name = id; prototypeName = id; }, 
        {
            columnName = CUSERID; 
            name = userId; 
            prototypeName = foreignId;
        },
        {
            columnName = CPAUSED; 
            name = paused; 
            prototypeName = boolean; 
            userInfo = {
                isScalar = true;
                scalarDefault = false;
                type = boolean; 
            }; 
        }, 
        {
            columnName = CDISCARDED; 
            name = discarded; 
            prototypeName = boolean; 
            userInfo = {
                isScalar = true;
                scalarDefault = false;
                type = boolean; 
            }; 
        }, 
        {
            columnName = CQUEUETIME;
            name = queueTime;
            prototypeName = dateTime;
        }, 
        {
        	columnName = CUUID;
        	name = uuid;
        	prototypeName = tinyText;
        },
        {
            columnName = CREPORTTEMPLATEID; 
            name = reportTemplateId; 
            prototypeName = foreignId; 
        },
        {
        	columnName = CDESCRIPTION;
        	name = description;
        	prototypeName = mediumText;
        },
        {
        	columnName = CRENDEREDRESOURCEACTIONURL;
        	name = renderedResourceActionUrl;
        	prototypeName = mediumText;
        },
        {
        	columnName = CRENDERINGMETHOD;
        	name = renderingMethod;
        	prototypeName = tinyText;
        }
    ); 
    attributesUsedForLocking = (
    	reportTemplateId,
    	userId,
    	paused,
    	discarded,
    	uuid,
    	renderingMethod,
    	renderedResourceActionUrl,
    	description
    ); 
    className = net.sf.webcat.reporter.EnqueuedReportJob; 
    classProperties = (
    	reportTemplate,
    	user,
    	paused,
    	discarded,
    	queueTime,
    	uuid,
    	renderingMethod,
    	renderedResourceActionUrl,
    	description,
    	dataSetQueries
    ); 
    externalName = TENQUEUEDREPORTJOB; 
    name = EnqueuedReportJob; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = ReportTemplate; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = reportTemplateId; }); 
            name = reportTemplate; 
        },
        {
            destination = User; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = userId; }); 
            name = user; 
        },
        {
            destination = ReportDataSetQuery;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = enqueuedReportJobId; sourceAttribute = id; });
            name = dataSetQueries;
        }
    ); 
}
