package net.sf.webcat.reporter;
// Generated by the WOLips Templateengine Plug-in at Jan 30, 2007 1:49:14 PM

import java.util.Iterator;

import org.apache.log4j.Logger;

import net.sf.webcat.core.User;
import net.sf.webcat.core.WCComponent;
import net.sf.webcat.grader.PluginManagerPage;
import net.sf.webcat.grader.ScriptFile;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;

import er.extensions.ERXValueUtilities;

public class TemplateLibraryPage extends WCComponent
{
    public TemplateLibraryPage(WOContext context)
    {
        super(context);
    }

    //~ KVC Attributes (must be public) .......................................

    public int               index;
    public ReportTemplate    reportTemplate;
    public WODisplayGroup    publishedTemplateGroup;
    public WODisplayGroup    unpublishedTemplateGroup;
    public WODisplayGroup    personalTemplateGroup;
    public NSData            uploadedData;
    public String            uploadedName;

    public static final String TERSE_DESCRIPTIONS_KEY =
        "terseReportTemplateDescriptions";

    // ----------------------------------------------------------
    public void appendToResponse( WOResponse response, WOContext context )
    {
        terse = null;
        publishedTemplateGroup.fetch();
        if ( user().hasAdminPrivileges() )
        {
            unpublishedTemplateGroup.fetch();
        }
        else
        {
            personalTemplateGroup.queryBindings().setObjectForKey(
                user(), "user"
            );
            personalTemplateGroup.fetch();
        }

        super.appendToResponse( response, context );
    }

    
    // ----------------------------------------------------------
    /**
     * Upload a new plug-in.
     * @return null to refresh the page
     */
    public WOComponent upload()
    {
        if ( uploadedName == null || uploadedData == null )
        {
            error( "Please select a file to upload." );
            return null;
        }
        
        int version = ReportTemplate.versionFromComponents(1, 0, 0);

        ReportTemplate uploadedTemplate =
        	ReportTemplate.createNewReportTemplate(
            localContext(), user(), uploadedName, uploadedData,
            version, messages());
        
        applyLocalChanges();
        uploadedName = null;
        uploadedData = null;
        return null;
    }


    // ----------------------------------------------------------
    /**
     * Determine whether this user has permissions to edit the current template.
     * @return true if the current template can be edited by the current user
     */
    public boolean canEditTemplate()
    {
        User user = user();
        return user.hasAdminPrivileges() || user == reportTemplate.author();
    }
    
    
    // ----------------------------------------------------------
    /**
     * Publish/unpublish a plug-in by togglinh its isPublished attribute.
     * @return null to refresh the page
     */
    public WOComponent togglePublished()
    {
        reportTemplate.setIsPublished( !reportTemplate.isPublished() );
        applyLocalChanges();
        return null;
    }
    
    
    public WOComponent deleteTemplate()
    {
    	reportTemplate.deleteTemplate(localContext());
    	applyLocalChanges();
    	return null;
    }
    

    public WOComponent editTemplate()
    {
/*    	EditTemplatePage page =
    		(EditTemplatePage)pageWithName(EditTemplatePage.class.getName());
    	page.reportTemplate = reportTemplate;
    	
    	return page;*/
    	return null;
    }
    
    
    // ----------------------------------------------------------
    /**
     * Toggle whether or not the user wants verbose descriptions of report
     * templates to be shown or hidden.  The setting is stored in the user's
     * preferences under the key specified by the TERSE_DESCRIPTIONS_KEY, and
     * will be permanently saved the next time the user's local changes are
     * saved.
     */
    public void toggleVerboseDescriptions()
    {
        boolean verboseDescriptions = ERXValueUtilities.booleanValue(
            user().preferences().objectForKey( TERSE_DESCRIPTIONS_KEY ) );
        verboseDescriptions = !verboseDescriptions;
        user().preferences().setObjectForKey(
            Boolean.valueOf( verboseDescriptions ), TERSE_DESCRIPTIONS_KEY );
        user().savePreferences();
    }


    // ----------------------------------------------------------
    /**
     * Look up the user's preferences and determine whether or not to show
     * verbose report template descriptions in this component.
     * @return true if verbose descriptions should be hidden, or false if
     * they should be shown
     */
    public Boolean terse()
    {
        if ( terse == null )
        {
            terse = ERXValueUtilities.booleanValue(
                user().preferences().objectForKey( TERSE_DESCRIPTIONS_KEY ) )
                ? Boolean.TRUE : Boolean.FALSE;
        }
        return terse;
    }


    
    //~ Instance/static variables .............................................
    private Boolean terse;
    static Logger log = Logger.getLogger( TemplateLibraryPage.class );
}