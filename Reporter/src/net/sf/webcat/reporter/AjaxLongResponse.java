package net.sf.webcat.reporter;
// Generated by the WOLips Templateengine Plug-in at Apr 10, 2007 2:05:49 PM

import org.apache.log4j.Logger;

import com.webobjects.appserver.*;

import er.extensions.ERXConstant;

public class AjaxLongResponse extends WOComponent
{
    static String WOMetaRefreshSenderId = "WOMetaRefresh";

    protected Number _refreshInterval;
    protected boolean _performingAction;
    protected boolean _doneAndRefreshed;

    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Default constructor.
     * @param context The page's context
     */
    public AjaxLongResponse(WOContext aContext)
    {
        super(aContext);

        _doneAndRefreshed = false;
        _refreshInterval = ERXConstant.ZeroInteger;
        _performingAction = false;
    }

    
    //~ KVC Attributes (must be public) .......................................

    public Object jobToken;
    public AjaxLongResponseHandler handler;
    public String cancellationMessage;
    public String workingMessage;

    // These two keys ensure that the task is only checked once, so that
    // all conditionals in the template always return consistent results,
    // even if the task finishes part-way through generation of this page
    public boolean isDone      = false;
    public boolean isCancelled = false;


    //~ Methods ...............................................................

    public int refreshInterval() {
    	if(ERXConstant.ZeroInteger.equals(_refreshInterval)) {
    		Number n = (Number)valueForBinding("refreshInterval");
    		if(n != null) {
    			_refreshInterval = n;
    		}
    	}
    	return _refreshInterval.intValue();
    }
    
    public void setRefreshInterval(int value) {
    	_refreshInterval = new Integer(value);
    }
    
    public double percentOfWorkDone()
    {
    	ProgressManager progress = ProgressManager.getInstance();

    	if(jobToken == null || !progress.jobExists(jobToken))
    	{
    		return 0;
    	}
    	else
    	{
    		return progress.percentDoneOfJob(jobToken);
    	}
    }
    
    public String taskDescription()
    {
    	ProgressManager progress = ProgressManager.getInstance();
    	
    	if(jobToken != null && progress.jobExists(jobToken))
    	{
    		return progress.descriptionOfCurrentTaskForJob(jobToken);
    	}
    	else
    	{
    		return null;
    	}
    }
    
    public void setPercentOfWorkDone(double value)
    {
    	// Keep KVC happy.
    }
    
    public void setTaskDescription(String value)
    {
    	// Keep KVC happy.
    }

    public WOActionResults cancelJob()
    {
    	handler.cancel();
    	isCancelled = true;
    	return null;
    }

    public void awake()
    {
    	ProgressManager progress = ProgressManager.getInstance();
    	
        if ( jobToken != null && progress.jobExists(jobToken))
        {
            isDone = progress.isJobDone(jobToken);

//            isCancelled =
//                ( (LongResponseTaskWithProgress)task() ).isCancelled();
        }
    }

    // ----------------------------------------------------------
    public void appendToResponse( WOResponse response, WOContext context )
    {
    	super.appendToResponse( response, context );
    }
    
    private static Logger log = Logger.getLogger(AjaxLongResponse.class);

}