/*==========================================================================*\
 |  _EnqueuedReportRenderJob.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to EnqueuedReportRenderJob.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2008 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.reporter;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * EnqueuedReportRenderJob.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _EnqueuedReportRenderJob
    extends er.extensions.eof.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _EnqueuedReportRenderJob object.
     */
    public _EnqueuedReportRenderJob()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _EnqueuedReportRenderJob object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @return The newly created object
     */
    public static EnqueuedReportRenderJob create(
        EOEditingContext editingContext
        )
    {
        EnqueuedReportRenderJob eoObject = (EnqueuedReportRenderJob)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _EnqueuedReportRenderJob.ENTITY_NAME);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static EnqueuedReportRenderJob localInstance(
        EOEditingContext editingContext, EnqueuedReportRenderJob eo)
    {
        return (eo == null)
            ? null
            : (EnqueuedReportRenderJob)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static EnqueuedReportRenderJob forId(
        EOEditingContext ec, int id )
    {
        EnqueuedReportRenderJob obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (EnqueuedReportRenderJob)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static EnqueuedReportRenderJob forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.foundation.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String QUEUE_TIME_KEY = "queueTime";
    public static final String RENDERED_RESOURCE_ACTION_URL_KEY = "renderedResourceActionUrl";
    public static final String RENDERING_METHOD_KEY = "renderingMethod";
    // To-one relationships ---
    public static final String GENERATED_REPORT_KEY = "generatedReport";
    public static final String USER_KEY = "user";
    // To-many relationships ---
    // Fetch specifications ---
    public static final String GENERATED_REPORT_FSPEC = "generatedReport";
    public static final String ENTITY_NAME = "EnqueuedReportRenderJob";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public EnqueuedReportRenderJob localInstance(EOEditingContext editingContext)
    {
        return (EnqueuedReportRenderJob)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>queueTime</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp queueTime()
    {
        return (NSTimestamp)storedValueForKey( "queueTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>queueTime</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setQueueTime( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setQueueTime("
                + value + "): was " + queueTime() );
        }
        takeStoredValueForKey( value, "queueTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>renderedResourceActionUrl</code> value.
     * @return the value of the attribute
     */
    public String renderedResourceActionUrl()
    {
        return (String)storedValueForKey( "renderedResourceActionUrl" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>renderedResourceActionUrl</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setRenderedResourceActionUrl( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setRenderedResourceActionUrl("
                + value + "): was " + renderedResourceActionUrl() );
        }
        takeStoredValueForKey( value, "renderedResourceActionUrl" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>renderingMethod</code> value.
     * @return the value of the attribute
     */
    public String renderingMethod()
    {
        return (String)storedValueForKey( "renderingMethod" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>renderingMethod</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setRenderingMethod( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setRenderingMethod("
                + value + "): was " + renderingMethod() );
        }
        takeStoredValueForKey( value, "renderingMethod" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>generatedReport</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.GeneratedReport generatedReport()
    {
        return (net.sf.webcat.reporter.GeneratedReport)storedValueForKey( "generatedReport" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>generatedReport</code>
     * relationship (DO NOT USE--instead, use
     * <code>setGeneratedReportRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setGeneratedReport( net.sf.webcat.reporter.GeneratedReport value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGeneratedReport("
                + value + "): was " + generatedReport() );
        }
        takeStoredValueForKey( value, "generatedReport" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>generatedReport</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setGeneratedReportRelationship(
        net.sf.webcat.reporter.GeneratedReport value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setGeneratedReportRelationship("
                + value + "): was " + generatedReport() );
        }
        if ( value == null )
        {
            net.sf.webcat.reporter.GeneratedReport object = generatedReport();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "generatedReport" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "generatedReport" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>user</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User user()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>user</code>
     * relationship (DO NOT USE--instead, use
     * <code>setUserRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setUser( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUser("
                + value + "): was " + user() );
        }
        takeStoredValueForKey( value, "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>user</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setUserRelationship(
        net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUserRelationship("
                + value + "): was " + user() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.User object = user();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "user" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "user" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>GeneratedReport</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @param generatedReportBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<EnqueuedReportRenderJob> objectsForGeneratedReport(
            EOEditingContext context,
            net.sf.webcat.reporter.GeneratedReport generatedReportBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "generatedReport", "EnqueuedReportRenderJob" );

        NSMutableDictionary<String, Object> bindings =
            new NSMutableDictionary<String, Object>();

        if ( generatedReportBinding != null )
        {
            bindings.setObjectForKey( generatedReportBinding,
                                      "generatedReport" );
        }
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForGeneratedReport(ec"
                + ", " + generatedReportBinding
                + "): " + result );
        }
        return result;
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( EnqueuedReportRenderJob.class );
}
