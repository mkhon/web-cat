/*==========================================================================*\
 |  _ReportDataSetQuery.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to ReportDataSetQuery.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.reporter;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.Enumeration;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * ReportDataSetQuery.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _ReportDataSetQuery
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _ReportDataSetQuery object.
     */
    public _ReportDataSetQuery()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    // To-one relationships ---
    public static final String DATA_SET_KEY = "dataSet";
    public static final String ENQUEUED_REPORT_JOB_KEY = "enqueuedReportJob";
    public static final String GENERATED_REPORT_KEY = "generatedReport";
    public static final String REPORT_QUERY_KEY = "reportQuery";
    // To-many relationships ---
    // Fetch specifications ---
    public static final String ENTITY_NAME = "ReportDataSetQuery";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>dataSet</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.ReportDataSet dataSet()
    {
        return (net.sf.webcat.reporter.ReportDataSet)storedValueForKey( "dataSet" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setDataSetRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setDataSet( net.sf.webcat.reporter.ReportDataSet value )
    {
        takeStoredValueForKey( value, "dataSet" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setDataSetRelationship(
        net.sf.webcat.reporter.ReportDataSet value )
    {
        if ( value == null )
        {
            net.sf.webcat.reporter.ReportDataSet object = dataSet();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "dataSet" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "dataSet" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>enqueuedReportJob</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.EnqueuedReportJob enqueuedReportJob()
    {
        return (net.sf.webcat.reporter.EnqueuedReportJob)storedValueForKey( "enqueuedReportJob" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setEnqueuedReportJobRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setEnqueuedReportJob( net.sf.webcat.reporter.EnqueuedReportJob value )
    {
        takeStoredValueForKey( value, "enqueuedReportJob" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setEnqueuedReportJobRelationship(
        net.sf.webcat.reporter.EnqueuedReportJob value )
    {
        if ( value == null )
        {
            net.sf.webcat.reporter.EnqueuedReportJob object = enqueuedReportJob();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "enqueuedReportJob" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "enqueuedReportJob" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>generatedReport</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.GeneratedReport generatedReport()
    {
        return (net.sf.webcat.reporter.GeneratedReport)storedValueForKey( "generatedReport" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setGeneratedReportRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setGeneratedReport( net.sf.webcat.reporter.GeneratedReport value )
    {
        takeStoredValueForKey( value, "generatedReport" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setGeneratedReportRelationship(
        net.sf.webcat.reporter.GeneratedReport value )
    {
        if ( value == null )
        {
            net.sf.webcat.reporter.GeneratedReport object = generatedReport();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "generatedReport" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "generatedReport" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>reportQuery</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.ReportQuery reportQuery()
    {
        return (net.sf.webcat.reporter.ReportQuery)storedValueForKey( "reportQuery" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setReportQueryRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setReportQuery( net.sf.webcat.reporter.ReportQuery value )
    {
        takeStoredValueForKey( value, "reportQuery" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setReportQueryRelationship(
        net.sf.webcat.reporter.ReportQuery value )
    {
        if ( value == null )
        {
            net.sf.webcat.reporter.ReportQuery object = reportQuery();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "reportQuery" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "reportQuery" );
        }
    }


}
