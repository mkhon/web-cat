package net.sf.webcat.reporter;
// Generated by the WOLips Templateengine Plug-in at Mar 11, 2007 5:40:42 PM

import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.concurrent.Semaphore;

import net.sf.webcat.core.WCComponent;
import net.sf.webcat.core.WCResourceManager;
import net.sf.webcat.reporter.controls.BrokerRegistry;
import net.sf.webcat.reporter.controls.TreeContentProvider;
import net.sf.webcat.reporter.controls.TreeDisplayProvider;
import net.sf.webcat.reporter.controls.TreeBroker;

import org.eclipse.birt.report.model.api.DesignElementHandle;
import org.eclipse.birt.report.model.api.DesignFileException;
import org.eclipse.birt.report.model.api.ElementFactory;
import org.eclipse.birt.report.model.api.ParameterHandle;
import org.eclipse.birt.report.model.api.ReportDesignHandle;
import org.eclipse.birt.report.model.api.ScalarParameterHandle;
import org.eclipse.birt.report.model.api.SessionHandle;
import org.eclipse.birt.report.model.api.activity.SemanticException;
import org.eclipse.birt.report.model.api.command.ContentException;
import org.eclipse.birt.report.model.api.command.NameException;
import org.json.JSONArray;
import org.json.JSONObject;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import er.ajax.AjaxUtils;

public class EditTemplatePage extends WCComponent
{
	public ReportTemplate reportTemplate;

	private SessionHandle designSession;
	private ReportDesignHandle reportHandle;
	private ElementFactory elementFactory;

	public ScalarParameterHandle selectedParameter;

	public BrokerRegistry brokers;
	public TreeContentProvider parameterTreeContentProvider;
	public TreeDisplayProvider parameterTreeDisplayProvider;

    public EditTemplatePage(WOContext context)
    {
        super(context);
        
        brokers = new BrokerRegistry();
        
        parameterTreeContentProvider = new ParameterTreeContentProvider();
        parameterTreeDisplayProvider = new ParameterTreeDisplayProvider();
    }
 
    private class ParameterTreeContentProvider extends TreeContentProvider
    {
		@Override
		public Object[] childrenForElement(Object element)
		{
			if(element == null)
				return reportHandle.getAllParameters().toArray();
			else
				return new Object[0];
		}

		@Override
		public boolean hasChildren(Object element)
		{
			return element == null;
		}

		@Override
		public String idForElement(Object element)
		{
			return Integer.toString(reportHandle.getParameters().findPosn(
					(ScalarParameterHandle)element));
		}

		@Override
		public Object elementWithId(String element)
		{
			try
			{
				int index = Integer.parseInt(element);
				return reportHandle.getParameters().get(index);
			}
			catch(Exception e)
			{
				return null;
			}
		}
    }
    
    private class ParameterTreeDisplayProvider extends TreeDisplayProvider
    {
    	@Override
    	public String textForElement(Object element)
    	{
    		return ((ScalarParameterHandle)element).getName();
    	}
    	
    	@Override
    	public String tipForElement(Object element)
    	{
    		return ((ScalarParameterHandle)element).getPromptText();
    	}
    }

    public void awake()
    {
    	designSession = Reporter.getInstance().newDesignSession();

    	super.awake();
    }

/*    public Object selectedParameter()
    {
    	if(selectedParameter == null)
    		return "";
    	else
    		return selectedParameter.getName();
    }
    
    public void setSelectedParameterNodeId(String value)
    {
    	selectedParameter = getParameterWithName(value);
    }
*/
    private ScalarParameterHandle getParameterWithName(String name)
    {
    	Iterator it = reportHandle.getAllParameters().iterator();
    	while(it.hasNext())
    	{
    		ScalarParameterHandle param = (ScalarParameterHandle)it.next();
    		if(param.getName().equals(name))
    			return param;
    	}
    	
    	return null;
    }

    public void appendToResponse(WOResponse response, WOContext context)
    {
    	try
    	{
			reportHandle = designSession.openDesign(reportTemplate.filePath());
			elementFactory = reportHandle.getElementFactory();
		}
    	catch (DesignFileException e)
    	{
			// TODO Display an error message on the page here.
			e.printStackTrace();
		}

    	selectedParameter = null;
   
    	super.appendToResponse(response, context);
    }
    
    public WOActionResults addParameter()
    {
    	// This block shouldn't need to be "synchronized" since the "Add"
    	// button is disabled to prevent simultaneous AJAX requests, but we
    	// do it just as a precaution.
    	synchronized(EditTemplatePage.class)
    	{
	    	try
	    	{
	        	ScalarParameterHandle param = elementFactory.newScalarParameter(
	        			null);
				reportHandle.getParameters().add(param);
				
//				selectedParameter = param;

				// The "selectedParameter" binding will be updated when the
				// broker selects the element in the tree, causing the
				// selectionChange callback to fire.
				TreeBroker broker = (TreeBroker)brokers.brokerForComponent("parameterTree");
				broker.beginTransaction();
				broker.addElement(null, param);
				broker.selectElement(param);
				return broker.endTransaction();
			}
	    	catch (Exception e)
	    	{
				// TODO Auto-generated catch block
				e.printStackTrace();
	    	}
    	}

    	return null;
    }
    
    public WOResponse deleteParameter()
    {
    	if(selectedParameter == null)
    		return null;

    	// This block shouldn't need to be "synchronized" since the "Add"
    	// button is disabled to prevent simultaneous AJAX requests, but we
    	// do it just as a precaution.
    	synchronized(EditTemplatePage.class)
    	{
	    	try
	    	{
	    		// We begin the transaction before we remove the parameter
	    		// from the model because the broker needs to access the element
	    		// through the content provider to generate the code to remove
	    		// it.
				TreeBroker broker = (TreeBroker)brokers.brokerForComponent("parameterTree");
				broker.beginTransaction();
				broker.removeElement(selectedParameter);
//				parameterTreeBroker.selectElement(param);

	    		reportHandle.getParameters().dropAndClear(selectedParameter);
				
//	    		selectedParameter = null;

				return broker.endTransaction();
	    	}
	    	catch (Exception e)
	    	{
				// TODO Auto-generated catch block
				e.printStackTrace();
	    	}
    	}

    	return null;
    }
    
    public WOComponent saveAndReturn()
    {
    	try
    	{
    		// Here's how we handle saving:
    		// 1) Save the modified report to the same directory using a
    		// temporary name.
    		// 2) Try to load the new template into the EO model.
    		// 3) If there are any errors when loading the new template, delete
    		// it, stay on the Edit Template page, and report the errors there.
    		// 4) Otherwise, if the new report is good, delete the original one,
    		// rename the new one to the filename used by the original and
    		// update the name in the EO model, and then return to the Template
    		// library page.

    		EOEditingContext ec = wcSession().localContext();
			String originalName = reportTemplate.uploadedFileName();
			String originalPath = reportTemplate.filePath();

			String prefix;
			if(originalName.endsWith(".rptdesign"))
				prefix = originalName.substring(
						0, originalName.indexOf(".rptdesign"));
			else
				prefix = originalName;
			
			File tempReportTemplate = File.createTempFile(prefix, ".rptdesign",
					new File(originalPath).getParentFile());

			reportHandle.saveAs(tempReportTemplate.getPath());

			// Add the updated template to the EO model.
			ReportTemplate newTemplate = ReportTemplate.createNewReportTemplate(
					ec, wcSession().localUser(),
					tempReportTemplate.getPath(), messages());

			if(!messages().isEmpty())
			{
				wcSession().commitLocalChanges();
				return null;
			}
			else
			{
				reportTemplate.deleteTemplate(ec);
				
				tempReportTemplate.renameTo(new File(originalPath));
				newTemplate.setUploadedFileName(originalName);
				
				wcSession().commitLocalChanges();
		    	return pageWithName(TemplateLibraryPage.class.getName());
			}
		}
    	catch (IOException e)
    	{
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
    }

/*    public String bindingForParameter()
    {
    	return parameter.getName();
    }
    
    public boolean isParameterSelected()
    {
    	return selectedParameter == parameter;
    }*/

    public boolean isSomeParameterSelected()
    {
    	return selectedParameter != null;
    }

    public String bindingForSelectedParameter()
    {
    	return selectedParameter.getName();
    }

    public void setBindingForSelectedParameter(String value)
    {
    	if(value == null)
    		return;

    	try
    	{
			selectedParameter.setName(value);
		}
    	catch(NameException e)
		{
			// TODO What's the best way to handle a duplicate/invalid name?
			e.printStackTrace();
		}
    }

    public String displayNameForSelectedParameter()
    {
    	return selectedParameter.getPromptText();
    }

    public void setDisplayNameForSelectedParameter(String value)
    {
    	try
    	{
			selectedParameter.setPromptText(value);
		}
    	catch (SemanticException e)
    	{
			// TODO Handle this error
			e.printStackTrace();
		}
    }

    public String descriptionForSelectedParameter()
    {
    	return selectedParameter.getHelpText();
    }

    public void setDescriptionForSelectedParameter(String value)
    {
    	try
    	{
			selectedParameter.setHelpText(value);
		}
    	catch (SemanticException e)
    	{
			// TODO Handle this error
			e.printStackTrace();
		}
    }

    public String detailsForSelectedParameter()
    {
    	return selectedParameter.getDefaultValue();
    }

    public void setDetailsForSelectedParameter(String value)
    {
    	try
    	{
			selectedParameter.setDefaultValue(value);
		}
    	catch (SemanticException e)
    	{
			// TODO Handle this error
			e.printStackTrace();
		}
    }
}
