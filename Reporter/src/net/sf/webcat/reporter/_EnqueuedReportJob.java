/*==========================================================================*\
 |  _EnqueuedReportJob.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to EnqueuedReportJob.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.reporter;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.Enumeration;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * EnqueuedReportJob.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _EnqueuedReportJob
    extends er.extensions.ERXGenericRecord
    implements net.sf.webcat.core.MutableContainer.MutableContainerOwner
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _EnqueuedReportJob object.
     */
    public _EnqueuedReportJob()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String DISCARDED_KEY = "discarded";
    public static final String JOB_PROGRESS_KEY = "jobProgress";
    public static final String PARAMETER_SELECTIONS_KEY = "parameterSelections";
    public static final String PAUSED_KEY = "paused";
    public static final String QUEUE_TIME_KEY = "queueTime";
    public static final String RENDERED_RESOURCE_ACTION_URL_KEY = "renderedResourceActionUrl";
    public static final String REPORT_NAME_KEY = "reportName";
    public static final String UPDATE_MUTABLE_FIELDS_KEY = "updateMutableFields";
    public static final String UUID_KEY = "uuid";
    // To-one relationships ---
    public static final String REPORT_TEMPLATE_KEY = "reportTemplate";
    public static final String USER_KEY = "user";
    // To-many relationships ---
    public static final String ENTITY_NAME = "EnqueuedReportJob";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>discarded</code> value.
     * @return the value of the attribute
     */
    public boolean discarded()
    {
        Number result =
            (Number)storedValueForKey( "discarded" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>discarded</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDiscarded( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "discarded" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>discarded</code> value.
     * @return the value of the attribute
     */
    public Number discardedRaw()
    {
        return (Number)storedValueForKey( "discarded" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>discarded</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setDiscardedRaw( Number value )
    {
        takeStoredValueForKey( value, "discarded" );
    }


    //-- Local mutable cache --
    private net.sf.webcat.reporter.JobProgressInfo jobProgressCache;
    private NSData jobProgressRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>jobProgress</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.reporter.JobProgressInfo jobProgress()
    {
    	NSData dbValue = 
            (NSData)storedValueForKey( "jobProgress" );
        if ( jobProgressRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( jobProgressRawCache ) )
            {
                // They are still equal, so just update the raw cache
                jobProgressRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                jobProgressRawCache = dbValue;
                net.sf.webcat.reporter.JobProgressInfo newValue =
                    net.sf.webcat.reporter.JobProgressInfo
                    .objectWithArchiveData( dbValue );
                if ( jobProgressCache != null )
                {
                    jobProgressCache.copyFrom( newValue );
                }
                else
                {
                    jobProgressCache = newValue;
                }
                jobProgressCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && jobProgressCache == null )
        { 
            jobProgressCache = 
                net.sf.webcat.reporter.JobProgressInfo
                .objectWithArchiveData( dbValue );
             jobProgressCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return jobProgressCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>jobProgress</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setJobProgress( net.sf.webcat.reporter.JobProgressInfo value )
    {
        if ( jobProgressCache == null )
        {
            jobProgressCache = value;
            value.setHasChanged( false );
            jobProgressRawCache = value.archiveData();
            takeStoredValueForKey( jobProgressRawCache, "jobProgress" );
        }
        else if ( jobProgressCache != value )  // ( jobProgressCache != null )
        {
            jobProgressCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( jobProgressCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>jobProgress</code>
     * property.
     */
    public void clearJobProgress()
    {
        takeStoredValueForKey( null, "jobProgress" );
        jobProgressRawCache = null;
        jobProgressCache = null;
    }


    //-- Local mutable cache --
    private net.sf.webcat.core.MutableDictionary parameterSelectionsCache;
    private NSData parameterSelectionsRawCache;

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>parameterSelections</code> value.
     * @return the value of the attribute
     */
    public net.sf.webcat.core.MutableDictionary parameterSelections()
    {
    	NSData dbValue = 
            (NSData)storedValueForKey( "parameterSelections" );
        if ( parameterSelectionsRawCache != dbValue )
        {
            if ( dbValue != null && dbValue.equals( parameterSelectionsRawCache ) )
            {
                // They are still equal, so just update the raw cache
                parameterSelectionsRawCache = dbValue;
            }
            else
            {
                // Underlying attribute may have changed because
                // of a concurrent update through another editing
                // context, so throw away current values.
                parameterSelectionsRawCache = dbValue;
                net.sf.webcat.core.MutableDictionary newValue =
                    net.sf.webcat.core.MutableDictionary
                    .objectWithArchiveData( dbValue );
                if ( parameterSelectionsCache != null )
                {
                    parameterSelectionsCache.copyFrom( newValue );
                }
                else
                {
                    parameterSelectionsCache = newValue;
                }
                parameterSelectionsCache.setOwner( this );
                setUpdateMutableFields( true );
            }
        }
        else if ( dbValue == null && parameterSelectionsCache == null )
        { 
            parameterSelectionsCache = 
                net.sf.webcat.core.MutableDictionary
                .objectWithArchiveData( dbValue );
             parameterSelectionsCache.setOwner( this );
             setUpdateMutableFields( true );
        }
        return parameterSelectionsCache;
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>parameterSelections</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setParameterSelections( net.sf.webcat.core.MutableDictionary value )
    {
        if ( parameterSelectionsCache == null )
        {
            parameterSelectionsCache = value;
            value.setHasChanged( false );
            parameterSelectionsRawCache = value.archiveData();
            takeStoredValueForKey( parameterSelectionsRawCache, "parameterSelections" );
        }
        else if ( parameterSelectionsCache != value )  // ( parameterSelectionsCache != null )
        {
            parameterSelectionsCache.copyFrom( value );
            setUpdateMutableFields( true );
        }
        else  // ( parameterSelectionsCache == non-null value )
        {
            // no nothing
        }
    }


    // ----------------------------------------------------------
    /**
     * Clear the value of this object's <code>parameterSelections</code>
     * property.
     */
    public void clearParameterSelections()
    {
        takeStoredValueForKey( null, "parameterSelections" );
        parameterSelectionsRawCache = null;
        parameterSelectionsCache = null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>paused</code> value.
     * @return the value of the attribute
     */
    public boolean paused()
    {
        Number result =
            (Number)storedValueForKey( "paused" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>paused</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setPaused( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "paused" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>paused</code> value.
     * @return the value of the attribute
     */
    public Number pausedRaw()
    {
        return (Number)storedValueForKey( "paused" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>paused</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setPausedRaw( Number value )
    {
        takeStoredValueForKey( value, "paused" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>queueTime</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp queueTime()
    {
        return (NSTimestamp)storedValueForKey( "queueTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>queueTime</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setQueueTime( NSTimestamp value )
    {
        takeStoredValueForKey( value, "queueTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>renderedResourceActionUrl</code> value.
     * @return the value of the attribute
     */
    public String renderedResourceActionUrl()
    {
        return (String)storedValueForKey( "renderedResourceActionUrl" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>renderedResourceActionUrl</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setRenderedResourceActionUrl( String value )
    {
        takeStoredValueForKey( value, "renderedResourceActionUrl" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>reportName</code> value.
     * @return the value of the attribute
     */
    public String reportName()
    {
        return (String)storedValueForKey( "reportName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>reportName</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setReportName( String value )
    {
        takeStoredValueForKey( value, "reportName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public boolean updateMutableFields()
    {
        Number result =
            (Number)storedValueForKey( "updateMutableFields" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setUpdateMutableFields( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>updateMutableFields</code> value.
     * @return the value of the attribute
     */
    public Number updateMutableFieldsRaw()
    {
        return (Number)storedValueForKey( "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>updateMutableFields</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setUpdateMutableFieldsRaw( Number value )
    {
        takeStoredValueForKey( value, "updateMutableFields" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>uuid</code> value.
     * @return the value of the attribute
     */
    public String uuid()
    {
        return (String)storedValueForKey( "uuid" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>uuid</code>
     * property.
     * 
     * @param value The new value for this property
     */
    public void setUuid( String value )
    {
        takeStoredValueForKey( value, "uuid" );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void saveMutables()
    {
        if ( jobProgressCache != null
            && jobProgressCache.hasChanged() )
        {
            jobProgressRawCache = jobProgressCache.archiveData();
            takeStoredValueForKey( jobProgressRawCache, "jobProgress" );
            jobProgressCache.setHasChanged( false );
        }
        if ( parameterSelectionsCache != null
            && parameterSelectionsCache.hasChanged() )
        {
            parameterSelectionsRawCache = parameterSelectionsCache.archiveData();
            takeStoredValueForKey( parameterSelectionsRawCache, "parameterSelections" );
            parameterSelectionsCache.setHasChanged( false );
        }

        setUpdateMutableFields( false );
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is saved to the database.
     */
    public void willUpdate()
    {
        saveMutables();
        super.willUpdate();
    }


    // ----------------------------------------------------------
    /**
     * Called just before this object is inserted into the database.
     */
    public void willInsert()
    {
        saveMutables();
        super.willInsert();
    }


    // ----------------------------------------------------------
    /**
     * Called when the object is invalidated.
     */
    public void flushCaches()
    {
        jobProgressCache = null;
        jobProgressRawCache  = null;
        parameterSelectionsCache = null;
        parameterSelectionsRawCache  = null;
        setUpdateMutableFields( false );
        super.flushCaches();
    }


    // ----------------------------------------------------------
    /**
     * Called when an owned mutable container object is changed.
     */
    public void mutableContainerHasChanged()
    {
        setUpdateMutableFields( true );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>User</code>
     * fetch specification.
     * 
     * @param context The editing context to use
     * @param userBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForUser(
            EOEditingContext context,
            net.sf.webcat.core.User userBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "user", "EnqueuedReportJob" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( userBinding != null )
            bindings.setObjectForKey( userBinding,
                                      "user" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>Uuid</code>
     * fetch specification.
     * 
     * @param context The editing context to use
     * @param uuidBinding fetch spec parameter
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForUuid(
            EOEditingContext context,
            String uuidBinding
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "uuid", "EnqueuedReportJob" );

        NSMutableDictionary bindings = new NSMutableDictionary();

        if ( uuidBinding != null )
            bindings.setObjectForKey( uuidBinding,
                                      "uuid" );
        spec = spec.fetchSpecificationWithQualifierBindings( bindings );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>reportTemplate</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.ReportTemplate reportTemplate()
    {
        return (net.sf.webcat.reporter.ReportTemplate)storedValueForKey( "reportTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setReportTemplateRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void setReportTemplate( net.sf.webcat.reporter.ReportTemplate value )
    {
        takeStoredValueForKey( value, "reportTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     * 
     * @param value The new entity to relate to
     */
    public void setReportTemplateRelationship(
        net.sf.webcat.reporter.ReportTemplate value )
    {
        if ( value == null )
        {
            net.sf.webcat.reporter.ReportTemplate object = reportTemplate();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "reportTemplate" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "reportTemplate" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>user</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User user()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setUserRelationship()</code>.
     * This method is provided for WebObjects use.
     * 
     * @param value The new entity to relate to
     */
    public void setUser( net.sf.webcat.core.User value )
    {
        takeStoredValueForKey( value, "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     * 
     * @param value The new entity to relate to
     */
    public void setUserRelationship(
        net.sf.webcat.core.User value )
    {
        if ( value == null )
        {
            net.sf.webcat.core.User object = user();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "user" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "user" );
        }
    }


}
