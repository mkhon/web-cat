package net.sf.webcat.reporter.controls;

//Generated by the WOLips Templateengine Plug-in at 27.03.2006 21:36:50

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOElement;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

import er.ajax.AjaxDynamicElement;
import er.ajax.AjaxObserveField;
import er.ajax.AjaxOption;
import er.ajax.AjaxOptions;
import er.ajax.AjaxUtils;

/**
 * observeFieldID requires ERExtensions, specifically ERXWOForm
 * 
 * @binding onRefreshComplete the script to execute at the end of refreshing the container
 * @binding action the action to call when this updateContainer refreshes
 */
public class AjaxUpdateContainer2 extends AjaxDynamicElement {
	// If you change this value, make sure to also change it in ERXApplication.invokeAction
	public static final String UPDATE_CONTAINER_ID_KEY = "__updateID";

	public AjaxUpdateContainer2(String name, NSDictionary associations, WOElement children) {
		super(name, associations, children);
	}

	/**
	 * Adds all required resources.
	 */
	protected void addRequiredWebResources(WOResponse response, WOContext context) {
		addScriptResourceInHead(context, response, "prototype.js");
		addScriptResourceInHead(context, response, "scriptaculous.js");
		addScriptResourceInHead(context, response, "wonder.js");
	}

	public NSDictionary createAjaxOptions(WOComponent component) {
		NSMutableArray ajaxOptionsArray = new NSMutableArray();
		ajaxOptionsArray.addObject(new AjaxOption("frequency", AjaxOption.NUMBER));
		ajaxOptionsArray.addObject(new AjaxOption("decay", AjaxOption.NUMBER));
		ajaxOptionsArray.addObject(new AjaxOption("onLoading", AjaxOption.SCRIPT));
		ajaxOptionsArray.addObject(new AjaxOption("onComplete", AjaxOption.SCRIPT));
		ajaxOptionsArray.addObject(new AjaxOption("onSuccess", AjaxOption.SCRIPT));
		ajaxOptionsArray.addObject(new AjaxOption("onFailure", AjaxOption.SCRIPT));
		ajaxOptionsArray.addObject(new AjaxOption("onException", AjaxOption.SCRIPT));
		ajaxOptionsArray.addObject(new AjaxOption("insertion", AjaxOption.SCRIPT));
		ajaxOptionsArray.addObject(new AjaxOption("evalScripts", AjaxOption.BOOLEAN));
		NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, component, associations());
		options.setObjectForKey("'get'", "method");
		if (options.objectForKey("evalScripts") == null) {
			options.setObjectForKey("true", "evalScripts");
		}
		return options;
	}
	
	public static NSDictionary removeDefaultOptions(NSDictionary options) {
		NSMutableDictionary mutableOptions = options.mutableClone();
		if ("'get'".equals(mutableOptions.objectForKey("method"))) {
			mutableOptions.removeObjectForKey("method");
		}
		if ("true".equals(mutableOptions.objectForKey("evalScripts"))) {
			mutableOptions.removeObjectForKey("evalScripts");
		}
		if ("true".equals(mutableOptions.objectForKey("asynchronous"))) {
			mutableOptions.removeObjectForKey("asynchronous");
		}
		return mutableOptions;
	}

	public NSMutableDictionary createObserveFieldOptions(WOComponent component) {
		NSMutableArray ajaxOptionsArray = new NSMutableArray();
		ajaxOptionsArray.addObject(new AjaxOption("observeFieldFrequency", AjaxOption.NUMBER));
		NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, component, associations());
		return options;
	}
	
	public void appendToResponse(WOResponse response, WOContext context) {
		WOComponent component = context.component();
		String elementName = (String) valueForBinding("elementName", "div", component);
		String id = _containerID(context);
		response.appendContentString("<" + elementName + " ");
		appendTagAttributeToResponse(response, "id", id);
		appendTagAttributeToResponse(response, "class", valueForBinding("class", component));
		appendTagAttributeToResponse(response, "style", valueForBinding("style", component));		
		appendTagAttributeToResponse(response, "updateUrl", AjaxUtils.ajaxComponentActionUrl(context));
		// appendTagAttributeToResponse(response, "woElementID", context.elementID());
		response.appendContentString(">");
		if (hasChildrenElements()) {
			appendChildrenToResponse(response, context);
		}
		response.appendContentString("</" + elementName + ">");

		super.appendToResponse(response, context);

		NSDictionary options = createAjaxOptions(component);

		Object frequency = valueForBinding("frequency", component);
		String observeFieldID = (String) valueForBinding("observeFieldID", component);

		boolean skipFunction = frequency == null && observeFieldID == null && booleanValueForBinding("skipFunction", false, component);
		if (!skipFunction) {
			AjaxUtils.appendScriptHeader(response);

			if (frequency != null) {
				response.appendContentString(id + "Updater = new Ajax.PeriodicalUpdater('" + id + "', $('" + id + "').getAttribute('updateUrl'), ");
				AjaxOptions.appendToResponse(options, response, context);
				response.appendContentString(");");
			}

			if (observeFieldID != null) {
				boolean fullSubmit = booleanValueForBinding("fullSubmit", false, component);
				AjaxObserveField.appendToResponse(response, context, this, observeFieldID, id, fullSubmit, createObserveFieldOptions(component));
			}

//			response.appendContentString(id + "Update = function() { new Ajax.Updater('" + id + "', $('" + id + "').getAttribute('updateUrl'), ");
//			AjaxOptions.appendToResponse(AjaxUpdateContainer.removeDefaultOptions(options), response, context);
//			response.appendContentString("); }");
			response.appendContentString("AjaxUpdateContainer.register('" + id + "'");
			NSDictionary nonDefaultOptions = AjaxUpdateContainer2.removeDefaultOptions(options);
			if (nonDefaultOptions.count()>0) {
				response.appendContentString(", ");
				AjaxOptions.appendToResponse(nonDefaultOptions, response, context);
			}
			response.appendContentString(");");

			AjaxUtils.appendScriptFooter(response);
		}
	}

	public WOActionResults handleRequest(WORequest request, WOContext context) {
		WOComponent component = context.component();
		String id = _containerID(context);
    
		if (associations().objectForKey("action") != null) {
			WOActionResults results = (WOActionResults) valueForBinding("action", component);
			// ignore results
		}

		WOResponse response = AjaxUtils.createResponse(request, context);
		AjaxUtils.setPageReplacementCacheKey(context, id);
		if (hasChildrenElements()) {
			appendChildrenToResponse(response, context);
		}
		String onRefreshComplete = (String) valueForBinding("onRefreshComplete", component);
		if (onRefreshComplete != null) {
			AjaxUtils.appendScriptHeader(response);
			response.appendContentString(onRefreshComplete);
			AjaxUtils.appendScriptFooter(response);
		}
		return null;
	}

	protected String _containerID(WOContext context) {
		String id = (String) valueForBinding("id", context.component());
		if (id == null) {
			id = AjaxUtils.toSafeElementID(context.elementID());
		}
		return id;
	}

	public static String updateContainerUrl(String actionUrl, String updateContainerID) {
		String updateContainerUrl = actionUrl;
		if (updateContainerID != null) {
			StringBuffer updateContainerUrlBuffer = new StringBuffer();
			updateContainerUrlBuffer.append(actionUrl);
			if (actionUrl.indexOf('?') == -1) {
				updateContainerUrlBuffer.append("?");
			}
			else {
				updateContainerUrlBuffer.append("&");
			}
			updateContainerUrlBuffer.append(AjaxUpdateContainer2.UPDATE_CONTAINER_ID_KEY + "=" + updateContainerID);
			updateContainerUrl = updateContainerUrlBuffer.toString();
		}
		return updateContainerUrl;
	}

	public static String updateContainerID(WORequest request) {
		return request.stringFormValueForKey(AjaxUpdateContainer2.UPDATE_CONTAINER_ID_KEY);
	}

	public static boolean hasUpdateContainerID(WORequest request) {
		return AjaxUpdateContainer2.updateContainerID(request) != null;
	}
}