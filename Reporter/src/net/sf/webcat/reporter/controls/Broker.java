package net.sf.webcat.reporter.controls;

import java.text.MessageFormat;

import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;

/**
 * A "broker" is a class that manages interaction between the JavaScript side
 * of a component and the Java code on the server side. Brokered components
 * expose a "broker" binding that is used to connect a broker object to a
 * public field in the component class that contains the control. Essentially,
 * the flow of control is as follows:
 * 
 * 1) An event on the client side invokes a component action via an
 *    Ajax.Request.
 * 2) The component action performs its necessary operations to, say, update
 *    an underlying data model, but the user interface is now out-of-sync with
 *    the model.
 * 3) The component action sets up a "transaction" with the broker to generate
 *    the necessary JavaScript code to update the user interface with the
 *    changes that were made.
 * 4) The component action returns the response generated by this transaction,
 *    which is the fragment of JavaScript code that will be executed by the
 *    client.
 * 
 * @author aallowat
 *
 */
public abstract class Broker
{
	/**
	 * The response to be generated for a transaction.
	 */
	private WOResponse transactionResponse;

	/**
	 * Begins a new transaction, if one is not already currently being
	 * generated. If there is already a transaction active, nothing happens
	 * (that is, the old transaction is not cleared).
	 */
	public void beginTransaction()
	{
		if(transactionResponse == null)
			transactionResponse = new WOResponse();
	}

	/**
	 * Completes a transaction and returns the response that it generated.
	 * 
	 * @return the WOResponse generated by the transaction
	 */
	public WOResponse endTransaction()
	{
		WOResponse response = transactionResponse;
		transactionResponse = null;
		return response;
	}
	
	/**
	 * Adds a JavaScript fragment to the current transaction.
	 * 
	 * @param script the String that contains the JavaScript fragment to add
	 *     to the transaction
	 */
	public void transact(String script)
	{
		transactionResponse.appendContentString(script);
		transactionResponse.appendContentString("\n");
	}
	
	/**
	 * Formats the specified string with a list of arguments and then adds the
	 * resulting JavaScript fragment to the current transaction.
	 * 
	 * @param script the String that contains the JavaScript fragment to add to
	 *     the transaction, along with MessageFormat-style placeholders for
	 *     arguments
	 * @param arguments the arguments used to fill in the placeholders in the
	 *     script string
	 */
	public void transact(String script, Object... arguments)
	{
		transact(MessageFormat.format(script, arguments));
	}

	/**
	 * Begins an operation in the current transaction.
	 * 
	 * Since a single transaction can perform many operations, and each
	 * operation may declare its own local variables in its JavaScript
	 * response, brokers who inherit from this class should surround each of
	 * their operation methods with calls to beginOperation/endOperation. This
	 * ensures that each operation occurs in its own nested scope to prevent
	 * local variable name collisions. 
	 */
	public void beginOperation()
	{
		transact("{");
	}

	/**
	 * Ends an operation in the current transaction.
	 */
	public void endOperation()
	{
		transact("}");
	}

	/**
	 * Handles a request from the component to which this broker is connected.
	 * 
	 * When a request is received by a brokered component, the broker receives
	 * the first opportunity to handle it and pass information back to the
	 * component. If the broker does not know how to handle the request, then
	 * it should return a null response, indicating that the component should
	 * handle it as it normally would (usually by invoking it as a component
	 * action).
	 * 
	 * @param request the WORequest object containing the request information
	 * @param context the WOContext object containing the context of the
	 *     request
	 *     
	 * @return a WOResponse object containing the response to the request, if
	 *     it was handled by the broker; null if the broker cannot handle the
	 *     request
	 */
	public abstract WOResponse handleRequest(WORequest request,
			WOContext context);
}
