package net.sf.webcat.reporter;
// Generated by the WOLips Templateengine Plug-in at Jan 30, 2007 2:46:20 PM

import java.util.Enumeration;

import net.sf.webcat.core.MutableDictionary;
import net.sf.webcat.core.WCComponent;

import com.webobjects.appserver.*;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

public class EnterReportParametersPage extends ReporterComponent
{
//	public ReportTemplate reportTemplate;

	public NSArray parameters;
	public ReportParameter parameter;
	public int index;
	
	public String reportName;
	public ReportParameter dependency;

	private NSMutableDictionary childPanels;

    public EnterReportParametersPage(WOContext context)
    {
        super(context);
        
        childPanels = new NSMutableDictionary();
    }

    public void appendToResponse(WOResponse response, WOContext context)
    {
        parameters = reportTemplateInSession().sortedParameters();
        reportName = reportTemplateInSession().name();

        super.appendToResponse(response, context);
    }

    public String componentNameForParameter()
    {
    	return ParameterUIUtils.componentNameForParameter(parameter, this,
    			wcSession().localContext());
    }
   
    public String updateContainerIdForParameter()
    {
    	return ParameterUIUtils.updateContainerIdForParameter(parameter);
    }

    public String updateContainerIdForNeededParameter()
    {
    	return ParameterUIUtils.updateContainerIdForParameter(dependency);
    }
   
    public String busyIndicatorStartForNeededParameter()
    {
    	return ParameterUIUtils.busyIndicatorStartForParameter(dependency);
    }

    public String busyIndicatorCompleteForNeededParameter()
    {
    	return ParameterUIUtils.busyIndicatorCompleteForParameter(dependency);
    }

    public String observeFieldIdForParameter()
    {
		// Since the panels are created in sorted order, any dependents
		// will already be registered by the time this method is called
		// in the repetition.
		WOComponent panel =
			(WOComponent)childPanels.objectForKey(parameter);
		
		return (String)panel.valueForKey("observeeId");
    }
    
    public NSDictionary currentSelectionsForDependents(ReportParameter param)
    {
    	NSMutableDictionary dictionary = new NSMutableDictionary();
    	
    	int startIndex = parameters.indexOfIdenticalObject(param);
    	for(int i = startIndex - 1; i >= 0; i--)
    	{
    		ReportParameter dependent =
    			(ReportParameter)parameters.objectAtIndex(i);
    		
    		if(dependent.isNeededBy(param))
    		{
    			WOComponent panel =
    				(WOComponent)childPanels.objectForKey(dependent);
    			Object selection = panel.valueForKey("currentSelection");
    			dictionary.setObjectForKey(selection, dependent.binding());
    		}
    	}

    	NSMutableDictionary root = new NSMutableDictionary();
    	root.setObjectForKey(dictionary, "selected");
    	
    	return root;
    }
    
    public void registerChildPanel(ReportParameter param, WOComponent panel)
    {
    	childPanels.setObjectForKey(panel, param);
    }
    
    public EnterReportParametersPage self()
    {
    	return this;
    }
    
    public WOComponent generateReport()
    {
    	MutableDictionary selections = new MutableDictionary();
    	
    	int startIndex = parameters.count() - 1;
    	for(int i = startIndex; i >= 0; i--)
    	{
    		ReportParameter param =
    			(ReportParameter)parameters.objectAtIndex(i);
    		
   			WOComponent panel =
   				(WOComponent)childPanels.objectForKey(param);
   			Object selection = panel.valueForKey("currentSelection");
   			selections.setObjectForKey(selection, param.binding());
    	}

    	setParameterSelectionsInSession(selections);
    	setReportNameInSession(reportName);

    	commitReportGeneration();
    	
    	return pageWithName(GeneratedReportPage.class.getName());
    }
}
