/*==========================================================================*\
 |  _ReportTemplate.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to ReportTemplate.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2008 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package net.sf.webcat.reporter;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.util.Enumeration;
import org.apache.log4j.Logger;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * ReportTemplate.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _ReportTemplate
    extends er.extensions.eof.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _ReportTemplate object.
     */
    public _ReportTemplate()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * _ReportTemplate object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param isPublished
     * @return The newly created object
     */
    public static ReportTemplate create(
        EOEditingContext editingContext,
        boolean isPublished
        )
    {
        ReportTemplate eoObject = (ReportTemplate)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _ReportTemplate.ENTITY_NAME);
        eoObject.setIsPublished(isPublished);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static ReportTemplate localInstance(
        EOEditingContext editingContext, ReportTemplate eo)
    {
        return (eo == null)
            ? null
            : (ReportTemplate)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static ReportTemplate forId(
        EOEditingContext ec, int id )
    {
        ReportTemplate obj = null;
        if (id > 0)
        {
            NSArray results = EOUtilities.objectsMatchingKeyAndValue( ec,
                ENTITY_NAME, "id", new Integer( id ) );
            if ( results != null && results.count() > 0 )
            {
                obj = (ReportTemplate)results.objectAtIndex( 0 );
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static ReportTemplate forId(
        EOEditingContext ec, String id )
    {
        return forId( ec, er.extensions.foundation.ERXValueUtilities.intValue( id ) );
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String CHANGE_HISTORY_KEY = "changeHistory";
    public static final String CHECKSUM_KEY = "checksum";
    public static final String DESCRIPTION_KEY = "description";
    public static final String DESIGN_ELEMENTS_RAW_KEY = "designElementsRaw";
    public static final String IS_PUBLISHED_KEY = "isPublished";
    public static final String LANGUAGE_KEY = "language";
    public static final String NAME_KEY = "name";
    public static final String PREFERRED_RENDERER_KEY = "preferredRenderer";
    public static final String UPLOADED_TIME_KEY = "uploadedTime";
    public static final String VERSION_KEY = "version";
    // To-one relationships ---
    public static final String BRANCHED_FROM_TEMPLATE_KEY = "branchedFromTemplate";
    public static final String PREDECESSOR_TEMPLATE_KEY = "predecessorTemplate";
    public static final String ROOT_TEMPLATE_KEY = "rootTemplate";
    public static final String USER_KEY = "user";
    // To-many relationships ---
    public static final String BRANCHED_TEMPLATES_KEY = "branchedTemplates";
    public static final String DATA_SETS_KEY = "dataSets";
    // Fetch specifications ---
    public static final String ALL_TEMPLATES_FSPEC = "allTemplates";
    public static final String ENTITY_NAME = "ReportTemplate";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public ReportTemplate localInstance(EOEditingContext editingContext)
    {
        return (ReportTemplate)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    public NSDictionary changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this) );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this ).objectForKey( "id" );
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>changeHistory</code> value.
     * @return the value of the attribute
     */
    public String changeHistory()
    {
        return (String)storedValueForKey( "changeHistory" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>changeHistory</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setChangeHistory( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setChangeHistory("
                + value + "): was " + changeHistory() );
        }
        takeStoredValueForKey( value, "changeHistory" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>checksum</code> value.
     * @return the value of the attribute
     */
    public String checksum()
    {
        return (String)storedValueForKey( "checksum" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>checksum</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setChecksum( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setChecksum("
                + value + "): was " + checksum() );
        }
        takeStoredValueForKey( value, "checksum" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>description</code> value.
     * @return the value of the attribute
     */
    public String description()
    {
        return (String)storedValueForKey( "description" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>description</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDescription( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setDescription("
                + value + "): was " + description() );
        }
        takeStoredValueForKey( value, "description" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>designElementsRaw</code> value.
     * @return the value of the attribute
     */
    public String designElementsRaw()
    {
        return (String)storedValueForKey( "designElementsRaw" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>designElementsRaw</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDesignElementsRaw( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setDesignElementsRaw("
                + value + "): was " + designElementsRaw() );
        }
        takeStoredValueForKey( value, "designElementsRaw" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isPublished</code> value.
     * @return the value of the attribute
     */
    public boolean isPublished()
    {
        Integer result =
            (Integer)storedValueForKey( "isPublished" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isPublished</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsPublished( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsPublished("
                + value + "): was " + isPublished() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsPublishedRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isPublished</code> value.
     * @return the value of the attribute
     */
    public Integer isPublishedRaw()
    {
        return (Integer)storedValueForKey( "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isPublished</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsPublishedRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsPublishedRaw("
                + value + "): was " + isPublishedRaw() );
        }
        takeStoredValueForKey( value, "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>language</code> value.
     * @return the value of the attribute
     */
    public String language()
    {
        return (String)storedValueForKey( "language" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>language</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLanguage( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setLanguage("
                + value + "): was " + language() );
        }
        takeStoredValueForKey( value, "language" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>name</code> value.
     * @return the value of the attribute
     */
    public String name()
    {
        return (String)storedValueForKey( "name" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>name</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setName( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setName("
                + value + "): was " + name() );
        }
        takeStoredValueForKey( value, "name" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>preferredRenderer</code> value.
     * @return the value of the attribute
     */
    public String preferredRenderer()
    {
        return (String)storedValueForKey( "preferredRenderer" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>preferredRenderer</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreferredRenderer( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreferredRenderer("
                + value + "): was " + preferredRenderer() );
        }
        takeStoredValueForKey( value, "preferredRenderer" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>uploadedTime</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp uploadedTime()
    {
        return (NSTimestamp)storedValueForKey( "uploadedTime" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>uploadedTime</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUploadedTime( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUploadedTime("
                + value + "): was " + uploadedTime() );
        }
        takeStoredValueForKey( value, "uploadedTime" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>version</code> value.
     * @return the value of the attribute
     */
    public String version()
    {
        return (String)storedValueForKey( "version" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>version</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setVersion( String value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setVersion("
                + value + "): was " + version() );
        }
        takeStoredValueForKey( value, "version" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>branchedFromTemplate</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.ReportTemplate branchedFromTemplate()
    {
        return (net.sf.webcat.reporter.ReportTemplate)storedValueForKey( "branchedFromTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>branchedFromTemplate</code>
     * relationship (DO NOT USE--instead, use
     * <code>setBranchedFromTemplateRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setBranchedFromTemplate( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setBranchedFromTemplate("
                + value + "): was " + branchedFromTemplate() );
        }
        takeStoredValueForKey( value, "branchedFromTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>branchedFromTemplate</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setBranchedFromTemplateRelationship(
        net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setBranchedFromTemplateRelationship("
                + value + "): was " + branchedFromTemplate() );
        }
        if ( value == null )
        {
            net.sf.webcat.reporter.ReportTemplate object = branchedFromTemplate();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "branchedFromTemplate" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "branchedFromTemplate" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>predecessorTemplate</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.ReportTemplate predecessorTemplate()
    {
        return (net.sf.webcat.reporter.ReportTemplate)storedValueForKey( "predecessorTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>predecessorTemplate</code>
     * relationship (DO NOT USE--instead, use
     * <code>setPredecessorTemplateRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setPredecessorTemplate( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPredecessorTemplate("
                + value + "): was " + predecessorTemplate() );
        }
        takeStoredValueForKey( value, "predecessorTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>predecessorTemplate</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setPredecessorTemplateRelationship(
        net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPredecessorTemplateRelationship("
                + value + "): was " + predecessorTemplate() );
        }
        if ( value == null )
        {
            net.sf.webcat.reporter.ReportTemplate object = predecessorTemplate();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "predecessorTemplate" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "predecessorTemplate" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>rootTemplate</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.reporter.ReportTemplate rootTemplate()
    {
        return (net.sf.webcat.reporter.ReportTemplate)storedValueForKey( "rootTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>rootTemplate</code>
     * relationship (DO NOT USE--instead, use
     * <code>setRootTemplateRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setRootTemplate( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setRootTemplate("
                + value + "): was " + rootTemplate() );
        }
        takeStoredValueForKey( value, "rootTemplate" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>rootTemplate</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setRootTemplateRelationship(
        net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setRootTemplateRelationship("
                + value + "): was " + rootTemplate() );
        }
        if ( value == null )
        {
            net.sf.webcat.reporter.ReportTemplate object = rootTemplate();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "rootTemplate" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "rootTemplate" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>user</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User user()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>user</code>
     * relationship (DO NOT USE--instead, use
     * <code>setUserRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setUser( net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUser("
                + value + "): was " + user() );
        }
        takeStoredValueForKey( value, "user" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>user</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setUserRelationship(
        net.sf.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setUserRelationship("
                + value + "): was " + user() );
        }
        if ( value == null )
        {
            net.sf.webcat.core.User object = user();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "user" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "user" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>branchedTemplates</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.reporter.ReportTemplate> branchedTemplates()
    {
        return (NSArray)storedValueForKey( "branchedTemplates" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>branchedTemplates</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setBranchedTemplates( NSMutableArray<net.sf.webcat.reporter.ReportTemplate>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setBranchedTemplates("
                + value + "): was " + branchedTemplates() );
        }
        takeStoredValueForKey( value, "branchedTemplates" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>branchedTemplates</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToBranchedTemplatesRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToBranchedTemplates( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToBranchedTemplates("
                + value + "): was " + branchedTemplates() );
        }
        NSMutableArray<net.sf.webcat.reporter.ReportTemplate> array =
            (NSMutableArray<net.sf.webcat.reporter.ReportTemplate>)branchedTemplates();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>branchedTemplates</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromBranchedTemplatesRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromBranchedTemplates( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromBranchedTemplates("
                + value + "): was " + branchedTemplates() );
        }
        NSMutableArray<net.sf.webcat.reporter.ReportTemplate> array =
            (NSMutableArray<net.sf.webcat.reporter.ReportTemplate>)branchedTemplates();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>branchedTemplates</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToBranchedTemplatesRelationship( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToBranchedTemplatesRelationship("
                + value + "): was " + branchedTemplates() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "branchedTemplates" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>branchedTemplates</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromBranchedTemplatesRelationship( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromBranchedTemplatesRelationship("
                + value + "): was " + branchedTemplates() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "branchedTemplates" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>branchedTemplates</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.reporter.ReportTemplate createBranchedTemplatesRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createBranchedTemplatesRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "ReportTemplate" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "branchedTemplates" );
        return (net.sf.webcat.reporter.ReportTemplate)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>branchedTemplates</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteBranchedTemplatesRelationship( net.sf.webcat.reporter.ReportTemplate value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteBranchedTemplatesRelationship("
                + value + "): was " + branchedTemplates() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "branchedTemplates" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>branchedTemplates</code> relationship.
     */
    public void deleteAllBranchedTemplatesRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllBranchedTemplatesRelationships(): was "
                + branchedTemplates() );
        }
        Enumeration objects = branchedTemplates().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteBranchedTemplatesRelationship(
                (net.sf.webcat.reporter.ReportTemplate)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>dataSets</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<net.sf.webcat.reporter.ReportDataSet> dataSets()
    {
        return (NSArray)storedValueForKey( "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>dataSets</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setDataSets( NSMutableArray<net.sf.webcat.reporter.ReportDataSet>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setDataSets("
                + value + "): was " + dataSets() );
        }
        takeStoredValueForKey( value, "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>dataSets</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToDataSetsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToDataSets( net.sf.webcat.reporter.ReportDataSet value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToDataSets("
                + value + "): was " + dataSets() );
        }
        NSMutableArray<net.sf.webcat.reporter.ReportDataSet> array =
            (NSMutableArray<net.sf.webcat.reporter.ReportDataSet>)dataSets();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>dataSets</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromDataSetsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromDataSets( net.sf.webcat.reporter.ReportDataSet value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromDataSets("
                + value + "): was " + dataSets() );
        }
        NSMutableArray<net.sf.webcat.reporter.ReportDataSet> array =
            (NSMutableArray<net.sf.webcat.reporter.ReportDataSet>)dataSets();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>dataSets</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToDataSetsRelationship( net.sf.webcat.reporter.ReportDataSet value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToDataSetsRelationship("
                + value + "): was " + dataSets() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>dataSets</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromDataSetsRelationship( net.sf.webcat.reporter.ReportDataSet value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromDataSetsRelationship("
                + value + "): was " + dataSets() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>dataSets</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.reporter.ReportDataSet createDataSetsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createDataSetsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "ReportDataSet" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "dataSets" );
        return (net.sf.webcat.reporter.ReportDataSet)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>dataSets</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteDataSetsRelationship( net.sf.webcat.reporter.ReportDataSet value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteDataSetsRelationship("
                + value + "): was " + dataSets() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "dataSets" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>dataSets</code> relationship.
     */
    public void deleteAllDataSetsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllDataSetsRelationships(): was "
                + dataSets() );
        }
        Enumeration objects = dataSets().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteDataSetsRelationship(
                (net.sf.webcat.reporter.ReportDataSet)objects.nextElement() );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>AllTemplates</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<ReportTemplate> objectsForAllTemplates(
            EOEditingContext context
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "allTemplates", "ReportTemplate" );

        NSArray result = context.objectsWithFetchSpecification( spec );
        if (log.isDebugEnabled())
        {
            log.debug( "objectsForAllTemplates(ec"
                + "): " + result );
        }
        return result;
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger( ReportTemplate.class );
}
