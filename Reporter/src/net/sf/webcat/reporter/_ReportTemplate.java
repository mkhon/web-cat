/*==========================================================================*\
 |  _ReportTemplate.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to ReportTemplate.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU General Public License as published by
 |  the Free Software Foundation; either version 2 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU General Public License
 |  along with Web-CAT; if not, write to the Free Software
 |  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 |
 |  Project manager: Stephen Edwards <edwards@cs.vt.edu>
 |  Virginia Tech CS Dept, 660 McBryde Hall (0106), Blacksburg, VA 24061 USA
 \*==========================================================================*/

package net.sf.webcat.reporter;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.Enumeration;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * ReportTemplate.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _ReportTemplate
    extends er.extensions.ERXGenericRecord
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _ReportTemplate object.
     */
    public _ReportTemplate()
    {
        super();
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String DESCRIPTION_KEY = "description";
    public static final String IS_PUBLISHED_KEY = "isPublished";
    public static final String LAST_MODIFIED_KEY = "lastModified";
    public static final String NAME_KEY = "name";
    public static final String UPLOADED_FILE_NAME_KEY = "uploadedFileName";
    // To-one relationships ---
    public static final String AUTHOR_KEY = "author";
    // To-many relationships ---
    public static final String DATA_SETS_KEY = "dataSets";
    // Fetch specifications ---
    public static final String ALL_TEMPLATES_FSPEC = "allTemplates";
    public static final String ENTITY_NAME = "ReportTemplate";


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>description</code> value.
     * @return the value of the attribute
     */
    public String description()
    {
        return (String)storedValueForKey( "description" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>description</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setDescription( String value )
    {
        takeStoredValueForKey( value, "description" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isPublished</code> value.
     * @return the value of the attribute
     */
    public boolean isPublished()
    {
        Number result =
            (Number)storedValueForKey( "isPublished" );
        return ( result == null )
            ? false
            : ( result.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isPublished</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsPublished( boolean value )
    {
        Number actual =
            er.extensions.ERXConstant.integerForInt( value ? 1 : 0 );
        takeStoredValueForKey( actual, "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isPublished</code> value.
     * @return the value of the attribute
     */
    public Number isPublishedRaw()
    {
        return (Number)storedValueForKey( "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isPublished</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsPublishedRaw( Number value )
    {
        takeStoredValueForKey( value, "isPublished" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>lastModified</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp lastModified()
    {
        return (NSTimestamp)storedValueForKey( "lastModified" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>lastModified</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setLastModified( NSTimestamp value )
    {
        takeStoredValueForKey( value, "lastModified" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>name</code> value.
     * @return the value of the attribute
     */
    public String name()
    {
        return (String)storedValueForKey( "name" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>name</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setName( String value )
    {
        takeStoredValueForKey( value, "name" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>uploadedFileName</code> value.
     * @return the value of the attribute
     */
    public String uploadedFileName()
    {
        return (String)storedValueForKey( "uploadedFileName" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>uploadedFileName</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setUploadedFileName( String value )
    {
        takeStoredValueForKey( value, "uploadedFileName" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve object according to the <code>AllTemplates</code>
     * fetch specification.
     *
     * @param context The editing context to use
     * @return an NSArray of the entities retrieved
     */
    public static NSArray objectsForAllTemplates(
            EOEditingContext context
        )
    {
        EOFetchSpecification spec = EOFetchSpecification
            .fetchSpecificationNamed( "allTemplates", "ReportTemplate" );

        return context.objectsWithFetchSpecification( spec );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>author</code>
     * relationship.
     * @return the entity in the relationship
     */
    public net.sf.webcat.core.User author()
    {
        return (net.sf.webcat.core.User)storedValueForKey( "author" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship (DO NOT USE--instead, use
     * <code>setAuthorRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setAuthor( net.sf.webcat.core.User value )
    {
        takeStoredValueForKey( value, "author" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>authenticationDomain</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setAuthorRelationship(
        net.sf.webcat.core.User value )
    {
        if ( value == null )
        {
            net.sf.webcat.core.User object = author();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "author" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "author" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>dataSets</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    public NSArray dataSets()
    {
        return (NSArray)storedValueForKey( "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>dataSets</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setDataSets( NSMutableArray value )
    {
        takeStoredValueForKey( value, "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>dataSets</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToDataSetsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToDataSets( net.sf.webcat.reporter.ReportDataSet value )
    {
        NSMutableArray array = (NSMutableArray)dataSets();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>dataSets</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromDataSetsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromDataSets( net.sf.webcat.reporter.ReportDataSet value )
    {
        NSMutableArray array = (NSMutableArray)dataSets();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>dataSets</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToDataSetsRelationship( net.sf.webcat.reporter.ReportDataSet value )
    {
        addObjectToBothSidesOfRelationshipWithKey(
            value, "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>dataSets</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromDataSetsRelationship( net.sf.webcat.reporter.ReportDataSet value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "dataSets" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>dataSets</code> relationship.
     *
     * @return The new entity
     */
    public net.sf.webcat.reporter.ReportDataSet createDataSetsRelationship()
    {
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "ReportDataSet" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "dataSets" );
        return (net.sf.webcat.reporter.ReportDataSet)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>dataSets</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteDataSetsRelationship( net.sf.webcat.reporter.ReportDataSet value )
    {
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "dataSets" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>dataSets</code> relationship.
     */
    public void deleteAllDataSetsRelationships()
    {
        Enumeration objects = dataSets().objectEnumerator();
        while ( objects.hasMoreElements() )
            deleteDataSetsRelationship(
                (net.sf.webcat.reporter.ReportDataSet)objects.nextElement() );
    }


}
