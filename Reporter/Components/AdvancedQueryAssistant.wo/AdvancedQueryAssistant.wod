RPC : WCJSONRPC {
    name = idFor.JSONRPC;
    proxyName = "page";
}

ContentAssistDataStore : WCDiv {
    dojoType = "webcat.reporter.ContentAssistDataStore";
    jsId = idFor.contentAssistDataStore;
    url = contentAssistActionURL;
}

CriteriaContainer : WCContentPane {
    id = idFor.criteriaContainer;
}

RowBusyIndicator : WOImage {
    filename = "images/busy.gif";
    id = "~idFor.busy + '_' + index";
    style = "vertical-align: middle; visibility: hidden";
}

KeyPath : WCComboBox {
    id = "~idFor.keyPath + '_' + index";
    ignoreCase = false;
    store = idFor.contentAssistDataStore;
    query = "~'{rootType:\'' + dataSet.wcEntityName + '\'}'";
    labelAttr = "label";
    autoComplete = false;
    value = currentKeyPath;
}

KeyPathChangeUpdater : WCRemoteFunction {
    jsId = "~idFor.updateRowAfterKeyPath + '_' + index";
    remote.refreshPanes = "~idFor.castTypeContainer + '_' + index";
}

CastTypeContainer : WCContentSpan {
    id = "~idFor.castTypeContainer + '_' + index";
}

CastType : WCFilteringSelect {
    id = "~idFor.castType + '_' + index";
    list = castTypes;
    item = castType;
    selection = currentCastType;
    displayString = displayStringForCastType;
}

CastTypeUpdater : WCRemoteFunction {
    jsId = "~idFor.updateRowAfterCastType + '_' + index";
    remote.refreshPanes = "~idFor.comparisonContainer + '_' + index";
}

ComparisonContainer : WCContentSpan {
    id = "~idFor.comparisonContainer + '_' + index";
}

Comparison : WCFilteringSelect {
    id = "~idFor.comparison + '_' + index";
    list = comparisonsForCurrentKeyPath;
    selection = currentComparison;
}

ComparisonUpdater : WCRemoteFunction {
    jsId = "~idFor.updateRowAfterComparison + '_' + index";
    remote.refreshPanes = "~idFor.comparandTypeContainer + '_' + index";
}

ComparandTypeContainer : WCContentSpan {
    id = "~idFor.comparandTypeContainer + '_' + index";
}

ComparandType : WCFilteringSelect {
    id = "~idFor.comparandType + '_' + index";
    list = validComparandTypesForCurrentComparison;
    item = comparandType;
    displayString = displayStringForComparandType;
    selection = currentComparandType;
}

ComparandTypeUpdater : WCRemoteFunction {
    jsId = "~idFor.updateRowAfterComparandType + '_' + index";
    remote.refreshPanes = "~idFor.valueContainer + '_' + index";
}

ValueContainer : WCContentSpan {
    id = "~idFor.valueContainer + '_' + index";
}

OtherKeyPath : WCTextBox {
    id = "~idFor.otherKeyPath + '_' + index";
    value = currentRepresentedValue;
}

Value : net.sf.webcat.reporter.queryassistants.AdvancedQueryValueComponent {
    multipleSelect = doesCurrentComparisonSupportMultipleValues;
    valueType = typeOfCurrentKeyPath;
    representedValue = currentRepresentedValue;
}

MinimumValue : net.sf.webcat.reporter.queryassistants.AdvancedQueryValueComponent {
    multipleSelect = false;
    valueType = typeOfCurrentKeyPath;
    representedValue = minimumValueOfCurrentRepresentedValue;
}

MaximumValue : net.sf.webcat.reporter.queryassistants.AdvancedQueryValueComponent {
    multipleSelect = false;
    valueType = typeOfCurrentKeyPath;
    representedValue = maximumValueOfCurrentRepresentedValue;
}

AddCriterion: WCButton {
    action = addCriterion;
    remote.refreshPanes = idFor.criteriaContainer;
}

RemoveCriterion: WCButton {
    action = removeCriterion;
    remote.refreshPanes = idFor.criteriaContainer;
}
