<project name="ExternalJars" default="install" basedir=".">

    <!-- ==============================================================  -->
    <!-- main targets                                                    -->
    <!-- ==============================================================  -->

    <!-- install ......................................................
         Build the framework (using the build target) and then install
         the result to the desired location (usually WOLOCALROOT).  Also
         builds a jar suitable for updating a Web-CAT server, and installs
         it in a specified pending updates dir, if desired."
    -->
    <target name="install"
        depends="setProps, init.install, build.woframework, export.jar,
                 install.pending.updates"
        description="Build and install the framework, then export a jar."/>


    <!-- ...............................................................
         Build a local copy of the framework.  Note that this step does not
         yet include compiling the Java source, which is done automatically
         by Eclipse.  It just combines all the necessary elements into a
         complete framework stored locally inside the workspace."
    -->
    <target name="build"
        depends="setProps, init.build, build.woframework"
        description="Build an uninstalled copy of the framework."/>


    <!-- ...............................................................
         Compile and build a local copy of the framework.  This is exactly
         the same as "build", but with the compile directive added.
    -->
    <target name="compileAndBuild"
        depends="setProps,init.build,compile,build.woframework"
        description="Compile and build an uninstalled copy of the framework."/>


    <!-- ............................................................... -->
    <target name="clean"
        depends="setProps"
        description="Delete the framework built by build or install.">
        <delete dir="${framework.name}.framework"/>
    </target>


    <!-- ==============================================================  -->
    <!-- initialization/setup targets                                    -->
    <!-- ==============================================================  -->

    <!-- property determination ........................................ -->
    <target name="setProps">
        <property file="${user.home}${file.separator}build.properties"/>
        <property file="build.properties"/>
        <property file="${user.home}${file.separator}Library${file.separator}wobuild.properties"/>
        <condition property="wo.properties.check.failed">
            <not><and>
                <isset property="wo.wosystemroot"/>
                <isset property="wo.wolocalroot"/>
            </and></not>
        </condition>
        <fail
        message="Could not find ${user.home}${file.separator}Library${file.separator}wobuild.properties."
            if="wo.properties.check.failed"/>
        <property name="install.dir"
            value="${wo.wolocalroot}/Library/Frameworks"/>
    </target>


    <!-- basic initializations  ........................................ -->
    <target name="init.install" depends="setProps">
        <tstamp/>
        <property name="dest.dir" value="${install.dir}"/>
        <copy file="Properties.master" tofile="Properties"/>
        <propertyfile file="Properties"
            comment="This file is automatically rewritten by ANT, so all formatting will be trashed.">
            <entry key="${framework.name}.version.date" value="${DSTAMP}"/>
        </propertyfile>
    </target>


    <!-- basic initializations  ........................................ -->
    <target name="init.build" depends="setProps">
        <tstamp/>
        <property name="dest.dir" value="."/>
    </target>


    <!-- ==============================================================  -->
    <!-- Lower-level targets                                             -->
    <!-- ==============================================================  -->

    <!-- ............................................................... -->
    <target name="build.woframework">
        <fail unless="dest.dir"/>

        <taskdef name="woframework"
            classname="org.objectstyle.woproject.ant.WOFramework"/>

        <woframework name="${framework.name}"
            destDir="${dest.dir}"
            customInfoPListContent="${customInfoPListContent}"
            principalClass="${principalClass}"
            eoAdaptorClassName="${eoAdaptorClassName}">
            <classes dir="${classes.dir}">
                <patternset>
                    <includesfile name="woproject/classes.include.patternset"/>
                    <excludesfile name="woproject/classes.exclude.patternset"/>
                </patternset>
            </classes>
            <wsresources dir=".">
                <patternset>
                <includesfile name="woproject/wsresources.include.patternset"/>
                <excludesfile name="woproject/wsresources.exclude.patternset"/>
                </patternset>
            </wsresources>
            <resources dir=".">
                <patternset>
                  <includesfile name="woproject/resources.include.patternset"/>
                  <excludesfile name="woproject/resources.exclude.patternset"/>
                </patternset>
            </resources>
            <lib dir="jars">
                <include name="*.jar"/>
                <exclude name="**/*.framework/**"/>
            </lib>
        </woframework>
    </target>


    <!-- copy strings files ............................................ -->
    <target name="copy.strings">
        <copy todir="${dest.dir}/${framework.name}.framework/Resources">
            <fileset dir="." casesensitive="yes">
                <include name="*.strings"/>
                <include name="**/*.strings"/>
            </fileset>
            <mapper type="flatten"/>
        </copy>
    </target>


    <!-- compile ....................................................... -->
    <target name="compile" depends="setProps,init.build">
      <mkdir dir="bin"/>
      <javac srcdir="src" destdir="bin">
        <classpath>
          <fileset dir="${wo.dir.user.home.library.frameworks}"
              includesfile="woproject/ant.frameworks.user.home">
            <include name="**/*.jar"/>
          </fileset>
          <fileset dir="${wo.wolocalroot}"
              includesfile="woproject/ant.frameworks.wo.wolocalroot">
            <include name = "**/*.jar"/>
          </fileset>
          <fileset dir="${wo.wosystemroot}"
              includesfile="woproject/ant.frameworks.wo.wosystemroot">
            <include name = "**/*.jar"/>
          </fileset>
        </classpath>
      </javac>
    </target>


    <!-- ...............................................................
         Jars up the framework that was built in a form that can be used
         for Web-CAT server updates.
    -->
    <target name="export.jar"
      depends="build.woframework">
      <!-- need to jar framework up somewhere, based on version number -->
      <property file="Properties"/>
      <property name="export.jar.name"
          value="../${framework.name}_${ExternalJars.version.major}.${ExternalJars.version.minor}.${ExternalJars.version.revision}.jar"/>
      <jar destfile="${export.jar.name}"
          basedir="${install.dir}"
          includes="${framework.name}.framework/**"/>
    </target>


    <!-- ...............................................................
         Copies the exported jar file to a servlet's pending updates
         directory.  Set the pending.updates.dir property in your
         ~/Library/wobuild.properties file to enable this action.
    -->
    <target name="install.pending.updates"
        if="pending.updates.dir"
        depends="export.jar">
        <copy todir="${pending.updates.dir}" file="${export.jar.name}"/>
    </target>

</project>
